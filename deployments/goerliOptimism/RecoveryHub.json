{
  "address": "0xd3b1c2f108F4613866FeD02bc398F5cBFfE4425F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "ClaimCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "ClaimDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "ClaimMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "ClaimResolved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRecoverable",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claims",
      "outputs": [
        {
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "currencyUsed",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "clearClaimFromToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "clearClaimFromUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "collateralType",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "declareLost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "deleteClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "getClaimant",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "getCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "getCollateralType",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "getTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "isRecoverable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "recover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "recoveryDisabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setRecoverable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa85e294279239cc4cd844c4f0d1fef9cbd8ef1073899240121ba4c4a05069636",
  "receipt": {
    "to": null,
    "from": "0xbB3c2C7D631E94bdf279302CEA8DBbE42fB23A74",
    "contractAddress": "0xd3b1c2f108F4613866FeD02bc398F5cBFfE4425F",
    "transactionIndex": 1,
    "gasUsed": "971195",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x60b8389a5526460e708763f8c321d7c89e39cb6bc0b43e9595e4cc1fdf879ee8",
    "transactionHash": "0xa85e294279239cc4cd844c4f0d1fef9cbd8ef1073899240121ba4c4a05069636",
    "logs": [],
    "blockNumber": 9096672,
    "cumulativeGasUsed": "1018108",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "91afaafdcb9aac9433a4c41cf0b4eb46",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"ClaimCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"ClaimDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ClaimMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"ClaimResolved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IRecoverable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currencyUsed\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"clearClaimFromToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"clearClaimFromUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"declareLost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"deleteClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"getClaimant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"getCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"getCollateralType\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"getTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isRecoverable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recoveryDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setRecoverable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clearClaimFromToken(address)\":{\"notice\":\"Clears a claim after the key has been found again and assigns the collateral to the \\\"lost\\\" address. This is the price an adverse claimer pays for filing a false claim and makes it risky to do so.\"},\"declareLost(address,address,address)\":{\"notice\":\"Anyone can declare that the private key to a certain address was lost by calling declareLost providing a deposit/collateral. There are three possibilities of what can happen with the claim: 1) The claim period expires and the claimant can get the deposit and the shares back by calling recover 2) The \\\"lost\\\" private key is used at any time to call clearClaim. In that case, the claim is deleted and    the deposit sent to the shareholder (the owner of the private key). It is recommended to call recover    whenever someone transfers funds to let claims be resolved automatically when the \\\"lost\\\" private key is    used again. 3) The owner deletes the claim and assigns the deposit to the claimant. This is intended to be used to resolve    disputes. Generally, using this function implies that you have to trust the issuer of the tokens to handle    the situation well. As a rule of thumb, the contract owner should assume the owner of the lost address to be the    rightful owner of the deposit. It is highly recommended that the owner observes the claims made and informs the owners of the claimed addresses whenever a claim is made for their address (this of course is only possible if they are known to the owner, e.g. through a shareholder register).\"},\"deleteClaim(address)\":{\"notice\":\"The token contract can delete claims. It is the responsibility of the token contract to make sure only authorized parties can trigger such a call.\"},\"isRecoverable(address)\":{\"notice\":\"Some users might want to disable claims for their address completely. For example if they use a deep cold storage solution or paper wallet.\"},\"recover(address,address)\":{\"notice\":\"After the claim period has passed, the claimant can call this function to send the tokens on the lost address as well as the collateral to himself.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/recovery/RecoveryHub.sol\":\"RecoveryHub\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/ERC20/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0x2224189bcdeb28cbadfdb8d126c278df60ec39875c7929e7ffa9e2055cded960\",\"license\":\"MIT\"},\"src/recovery/IRecoverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IRecoveryHub.sol\\\";\\n\\ninterface IRecoverable is IERC20{\\n\\n    // returns the recovery hub\\n    function recovery() external view returns (IRecoveryHub);\\n\\n    function claimPeriod() external view returns (uint256);\\n    \\n    function notifyClaimMade(address target) external;\\n\\n    function notifyClaimDeleted(address target) external;\\n\\n    function getCollateralRate(IERC20 collateral) external view returns(uint256);\\n\\n    function recover(address oldAddress, address newAddress) external;\\n\\n}\",\"keccak256\":\"0x77410fd0b6770dd975fad125807a175040b23d96e4220e0cf51f701f0b257675\",\"license\":\"MIT\"},\"src/recovery/IRecoveryHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IRecoverable.sol\\\";\\n\\ninterface IRecoveryHub {\\n\\n    function setRecoverable(bool flag) external;\\n    \\n    // deletes claim and transfers collateral back to claimer\\n    function deleteClaim(address target) external;\\n\\n    // clears claim and transfers collateral to holder\\n    function clearClaimFromToken(address holder) external;\\n\\n    function clearClaimFromUser(IRecoverable token) external;\\n\\n}\",\"keccak256\":\"0x237d389d24b97f424c9388059110e78f61c9de6540f19ac6541d8aebfbcb923f\",\"license\":\"MIT\"},\"src/recovery/RecoveryHub.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2020 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IRecoveryHub.sol\\\";\\nimport \\\"./IRecoverable.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ncontract RecoveryHub is IRecoveryHub {\\n\\n    // A struct that represents a claim made\\n    struct Claim {\\n        address claimant; // the person who created the claim\\n        uint256 collateral; // the amount of collateral deposited\\n        uint256 timestamp;  // the timestamp of the block in which the claim was made\\n        IERC20 currencyUsed; // The currency (XCHF) can be updated, we record the currency used for every request\\n    }\\n\\n    mapping(IRecoverable => mapping (address => Claim)) public claims; // there can be at most one claim per token and claimed address\\n    mapping(address => bool) public recoveryDisabled; // disable claimability (e.g. for long term storage)\\n\\n    event ClaimMade(IRecoverable indexed token, address indexed lostAddress, address indexed claimant, uint256 balance);\\n    event ClaimCleared(IRecoverable indexed token, address indexed lostAddress, uint256 collateral);\\n    event ClaimDeleted(IRecoverable indexed token, address indexed lostAddress, address indexed claimant, uint256 collateral);\\n    event ClaimResolved(IRecoverable indexed token, address indexed lostAddress, address indexed claimant, uint256 collateral);\\n\\n    function setRecoverable(bool enabled) external override {\\n        recoveryDisabled[msg.sender] = !enabled;\\n    }\\n\\n    /**\\n     * Some users might want to disable claims for their address completely.\\n     * For example if they use a deep cold storage solution or paper wallet.\\n     */\\n    function isRecoverable(address target) public view returns (bool) {\\n        return !recoveryDisabled[target];\\n    }\\n\\n  /** Anyone can declare that the private key to a certain address was lost by calling declareLost\\n    * providing a deposit/collateral. There are three possibilities of what can happen with the claim:\\n    * 1) The claim period expires and the claimant can get the deposit and the shares back by calling recover\\n    * 2) The \\\"lost\\\" private key is used at any time to call clearClaim. In that case, the claim is deleted and\\n    *    the deposit sent to the shareholder (the owner of the private key). It is recommended to call recover\\n    *    whenever someone transfers funds to let claims be resolved automatically when the \\\"lost\\\" private key is\\n    *    used again.\\n    * 3) The owner deletes the claim and assigns the deposit to the claimant. This is intended to be used to resolve\\n    *    disputes. Generally, using this function implies that you have to trust the issuer of the tokens to handle\\n    *    the situation well. As a rule of thumb, the contract owner should assume the owner of the lost address to be the\\n    *    rightful owner of the deposit.\\n    * It is highly recommended that the owner observes the claims made and informs the owners of the claimed addresses\\n    * whenever a claim is made for their address (this of course is only possible if they are known to the owner, e.g.\\n    * through a shareholder register).\\n    */\\n    function declareLost(IRecoverable token, IERC20 collateralType, address lostAddress) external {\\n        require(isRecoverable(lostAddress), \\\"disabled\\\");\\n        uint256 collateralRate = IRecoverable(token).getCollateralRate(collateralType);\\n        require(collateralRate > 0, \\\"bad collateral\\\");\\n        uint256 balance = IERC20(token).balanceOf(lostAddress);\\n        require(balance > 0, \\\"empty\\\");\\n        uint256 collateral = balance * collateralRate;\\n        IERC20 currency = IERC20(collateralType);\\n        require(claims[token][lostAddress].collateral == 0, \\\"already claimed\\\");\\n\\n        claims[token][lostAddress] = Claim({\\n            claimant: msg.sender,\\n            collateral: collateral,\\n            // rely on time stamp is ok, no exact time stamp needed\\n            // solhint-disable-next-line not-rely-on-time\\n            timestamp: block.timestamp,\\n            currencyUsed: collateralType\\n        });\\n        emit ClaimMade(token, lostAddress, msg.sender, balance);\\n        \\n        require(currency.transferFrom(msg.sender, address(this), collateral), \\\"transfer failed\\\");\\n\\n        IRecoverable(token).notifyClaimMade(lostAddress);\\n    }\\n\\n    function getClaimant(IRecoverable token, address lostAddress) external view returns (address) {\\n        return claims[token][lostAddress].claimant;\\n    }\\n\\n    function getCollateral(IRecoverable token, address lostAddress) external view returns (uint256) {\\n        return claims[token][lostAddress].collateral;\\n    }\\n\\n    function getCollateralType(IRecoverable token, address lostAddress) external view returns (IERC20) {\\n        return claims[token][lostAddress].currencyUsed;\\n    }\\n\\n    function getTimeStamp(IRecoverable token, address lostAddress) external view returns (uint256) {\\n        return claims[token][lostAddress].timestamp;\\n    }\\n\\n    /**\\n     * Clears a claim after the key has been found again and assigns the collateral to the \\\"lost\\\" address.\\n     * This is the price an adverse claimer pays for filing a false claim and makes it risky to do so.\\n     */\\n    function clearClaimFromToken(address holder) external override {\\n        clearClaim(IRecoverable(msg.sender), holder);\\n    }\\n\\n    function clearClaimFromUser(IRecoverable token) external override {\\n        clearClaim(token, msg.sender);\\n    }\\n\\n    function clearClaim(IRecoverable token, address holder) private {\\n        Claim memory claim = claims[token][holder];\\n        if (claim.collateral > 0){\\n            IERC20 currency = IERC20(claim.currencyUsed);\\n            delete claims[token][holder];\\n            require(currency.transfer(holder, claim.collateral), \\\"could not return collateral\\\");\\n            emit ClaimCleared(token, holder, claim.collateral);\\n        }\\n        IRecoverable(token).notifyClaimDeleted(holder);\\n    }\\n\\n   /**\\n    * After the claim period has passed, the claimant can call this function to send the\\n    * tokens on the lost address as well as the collateral to himself.\\n    */\\n    function recover(IRecoverable token, address lostAddress) external {\\n        Claim memory claim = claims[token][lostAddress];\\n        address claimant = claim.claimant;\\n        require(claimant == msg.sender, \\\"not claimant\\\");\\n        uint256 collateral = claim.collateral;\\n        IERC20 currency = IERC20(claim.currencyUsed);\\n        require(collateral != 0, \\\"not found\\\");\\n        // rely on time stamp is ok, no exact time stamp needed\\n        // solhint-disable-next-line not-rely-on-time\\n        require(claim.timestamp + IRecoverable(token).claimPeriod() <= block.timestamp, \\\"too early\\\");\\n        delete claims[token][lostAddress];\\n        emit ClaimResolved(token, lostAddress, claimant, collateral);\\n        IRecoverable(token).notifyClaimDeleted(lostAddress);\\n        require(currency.transfer(claimant, collateral), \\\"transfer failed\\\");\\n        IRecoverable(token).recover(lostAddress, claimant);\\n    }\\n\\n    /**\\n     * The token contract can delete claims. It is the responsibility of the token contract to make sure\\n     * only authorized parties can trigger such a call.\\n     */\\n    function deleteClaim(address lostAddress) external override {\\n        IRecoverable token = IRecoverable(msg.sender);\\n        Claim memory claim = claims[token][lostAddress];\\n        IERC20 currency = IERC20(claim.currencyUsed);\\n        require(claim.collateral != 0, \\\"not found\\\");\\n        delete claims[token][lostAddress];\\n        emit ClaimDeleted(token, lostAddress, claim.claimant, claim.collateral);\\n        IRecoverable(token).notifyClaimDeleted(lostAddress);\\n        require(currency.transfer(claim.claimant, claim.collateral), \\\"transfer failed\\\");\\n    }\\n\\n}\",\"keccak256\":\"0x3f4f13b9b8f26617b3895df5da68c8bb03c9ea8f7eb03824a470db4e272fd18a\",\"license\":\"LicenseRef-Aktionariat\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806352226ef01161008c578063b40e80d111610066578063b40e80d114610263578063c1e5857314610286578063cc0720cc14610299578063e334860a146102e757600080fd5b806352226ef0146101e95780636427ed9714610223578063648bf7741461025057600080fd5b806306036025146100d457806323cd9a86146100e95780632851bbc91461010f57806332a7ae951461014c5780633f733c6b1461015f5780634d301a30146101d6575b600080fd5b6100e76100e2366004610ef3565b610320565b005b6100fc6100f7366004610f17565b61032d565b6040519081526020015b60405180910390f35b61013c61011d366004610ef3565b6001600160a01b031660009081526001602052604090205460ff161590565b6040519015158152602001610106565b6100e761015a366004610ef3565b61035b565b6101a761016d366004610f17565b600060208181529281526040808220909352908152208054600182015460028301546003909301546001600160a01b039283169391921684565b604080516001600160a01b03958616815260208101949094528301919091529091166060820152608001610106565b6100e76101e4366004610ef3565b610578565b6100fc6101f7366004610f17565b6001600160a01b0391821660009081526020818152604080832093909416825291909152206001015490565b6100e7610231366004610f5e565b336000908152600160205260409020805460ff19169115919091179055565b6100e761025e366004610f17565b610582565b61013c610271366004610ef3565b60016020526000908152604090205460ff1681565b6100e7610294366004610f7b565b6108e7565b6102cf6102a7366004610f17565b6001600160a01b03918216600090815260208181526040808320938516835292905220541690565b6040516001600160a01b039091168152602001610106565b6102cf6102f5366004610f17565b6001600160a01b03918216600090815260208181526040808320938516835292905220600301541690565b61032a8133610cc1565b50565b6001600160a01b03808316600090815260208181526040808320938516835292905220600201545b92915050565b336000818152602081815260408083206001600160a01b038681168552908352818420825160808101845281548316815260018201549481018590526002820154938101939093526003015416606082018190529092909190036103f25760405162461bcd60e51b81526020600482015260096024820152681b9bdd08199bdd5b9960ba1b60448201526064015b60405180910390fd5b6001600160a01b0383811660008181526020818152604080832089861680855290835281842080546001600160a01b0319908116825560018201869055600282019590955560030180549094169093558651878301519151918252909416939192917fe353e089146c0574fa0001d9aa56c67a4eee067d8730543ae0ee937a30d679f3910160405180910390a460405163396e093b60e21b81526001600160a01b03858116600483015284169063e5b824ec90602401600060405180830381600087803b1580156104c257600080fd5b505af11580156104d6573d6000803e3d6000fd5b50508351602085015160405163a9059cbb60e01b81526001600160a01b0392831660048201526024810191909152908416925063a9059cbb91506044016020604051808303816000875af1158015610532573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105569190610fc6565b6105725760405162461bcd60e51b81526004016103e990610fe3565b50505050565b61032a3382610cc1565b6001600160a01b038083166000908152602081815260408083208585168452825291829020825160808101845281548516808252600183015493820193909352600282015493810193909352600301549092166060820152903381146106195760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd0818db185a5b585b9d60a21b60448201526064016103e9565b6020820151606083015160008290036106605760405162461bcd60e51b81526020600482015260096024820152681b9bdd08199bdd5b9960ba1b60448201526064016103e9565b42866001600160a01b0316637dc2cd986040518163ffffffff1660e01b8152600401602060405180830381865afa15801561069f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c3919061100c565b85604001516106d2919061103b565b111561070c5760405162461bcd60e51b8152602060048201526009602482015268746f6f206561726c7960b81b60448201526064016103e9565b6001600160a01b038681166000818152602081815260408083208a861680855290835281842080546001600160a01b03199081168255600182018690556002820195909555600301805490941690935551868152938716939192917f03746d4086c981172ed0a960601bec02cfe0a2ecbe1b1b4e328752bbf5d0c255910160405180910390a460405163396e093b60e21b81526001600160a01b03868116600483015287169063e5b824ec90602401600060405180830381600087803b1580156107d557600080fd5b505af11580156107e9573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038681166004830152602482018690528416925063a9059cbb91506044016020604051808303816000875af115801561083c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108609190610fc6565b61087c5760405162461bcd60e51b81526004016103e990610fe3565b604051631922fddd60e21b81526001600160a01b038681166004830152848116602483015287169063648bf77490604401600060405180830381600087803b1580156108c757600080fd5b505af11580156108db573d6000803e3d6000fd5b50505050505050505050565b6001600160a01b03811660009081526001602052604090205460ff161561093b5760405162461bcd60e51b8152602060048201526008602482015267191a5cd8589b195960c21b60448201526064016103e9565b6040516377e071ad60e01b81526001600160a01b038381166004830152600091908516906377e071ad90602401602060405180830381865afa158015610985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a9919061100c565b9050600081116109ec5760405162461bcd60e51b815260206004820152600e60248201526d1898590818dbdb1b185d195c985b60921b60448201526064016103e9565b6040516370a0823160e01b81526001600160a01b038381166004830152600091908616906370a0823190602401602060405180830381865afa158015610a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5a919061100c565b905060008111610a945760405162461bcd60e51b8152602060048201526005602482015264656d70747960d81b60448201526064016103e9565b6000610aa0838361104e565b6001600160a01b0380881660009081526020818152604080832093891683529290522060010154909150859015610b0b5760405162461bcd60e51b815260206004820152600f60248201526e185b1c9958591e4818db185a5b5959608a1b60448201526064016103e9565b60408051608081018252338082526020808301868152428486019081526001600160a01b038c8116606087019081528e821660008181528087528981208f85168083529752899020975188549084166001600160a01b03199182161789559451600189015592516002880155516003909601805496909116959092169490941790559251909291907f6bfd50306449d9d6c51593433950fc186e4ab99a885ed357a34549bfd7a2668f90610bc29088815260200190565b60405180910390a46040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c419190610fc6565b610c5d5760405162461bcd60e51b81526004016103e990610fe3565b6040516330605cb160e21b81526001600160a01b03868116600483015288169063c18172c490602401600060405180830381600087803b158015610ca057600080fd5b505af1158015610cb4573d6000803e3d6000fd5b5050505050505050505050565b6001600160a01b038083166000908152602081815260408083208585168452825291829020825160808101845281548516815260018201549281018390526002820154938101939093526003015490921660608201529015610e7e5760608101516001600160a01b0384811660009081526020818152604080832087851680855290835281842080546001600160a01b03199081168255600182018690556002820195909555600301805490941690935590850151905163a9059cbb60e01b8152600481019290925260248201529082169063a9059cbb906044016020604051808303816000875af1158015610dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddf9190610fc6565b610e2b5760405162461bcd60e51b815260206004820152601b60248201527f636f756c64206e6f742072657475726e20636f6c6c61746572616c000000000060448201526064016103e9565b826001600160a01b0316846001600160a01b03167febe2b7544a1a711c29034fc19c1b200f13cf4ec175198e0f857735ed4f5f9bd18460200151604051610e7491815260200190565b60405180910390a3505b60405163396e093b60e21b81526001600160a01b03838116600483015284169063e5b824ec90602401600060405180830381600087803b158015610ec157600080fd5b505af1158015610ed5573d6000803e3d6000fd5b50505050505050565b6001600160a01b038116811461032a57600080fd5b600060208284031215610f0557600080fd5b8135610f1081610ede565b9392505050565b60008060408385031215610f2a57600080fd5b8235610f3581610ede565b91506020830135610f4581610ede565b809150509250929050565b801515811461032a57600080fd5b600060208284031215610f7057600080fd5b8135610f1081610f50565b600080600060608486031215610f9057600080fd5b8335610f9b81610ede565b92506020840135610fab81610ede565b91506040840135610fbb81610ede565b809150509250925092565b600060208284031215610fd857600080fd5b8151610f1081610f50565b6020808252600f908201526e1d1c985b9cd9995c8819985a5b1959608a1b604082015260600190565b60006020828403121561101e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561035557610355611025565b80820281158282048414176103555761035561102556fea2646970667358221220700557be89aa3c6dc3cc34ae6061de69c1031192b17386464d5e1e6a0bba3bdf64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "clearClaimFromToken(address)": {
        "notice": "Clears a claim after the key has been found again and assigns the collateral to the \"lost\" address. This is the price an adverse claimer pays for filing a false claim and makes it risky to do so."
      },
      "declareLost(address,address,address)": {
        "notice": "Anyone can declare that the private key to a certain address was lost by calling declareLost providing a deposit/collateral. There are three possibilities of what can happen with the claim: 1) The claim period expires and the claimant can get the deposit and the shares back by calling recover 2) The \"lost\" private key is used at any time to call clearClaim. In that case, the claim is deleted and    the deposit sent to the shareholder (the owner of the private key). It is recommended to call recover    whenever someone transfers funds to let claims be resolved automatically when the \"lost\" private key is    used again. 3) The owner deletes the claim and assigns the deposit to the claimant. This is intended to be used to resolve    disputes. Generally, using this function implies that you have to trust the issuer of the tokens to handle    the situation well. As a rule of thumb, the contract owner should assume the owner of the lost address to be the    rightful owner of the deposit. It is highly recommended that the owner observes the claims made and informs the owners of the claimed addresses whenever a claim is made for their address (this of course is only possible if they are known to the owner, e.g. through a shareholder register)."
      },
      "deleteClaim(address)": {
        "notice": "The token contract can delete claims. It is the responsibility of the token contract to make sure only authorized parties can trigger such a call."
      },
      "isRecoverable(address)": {
        "notice": "Some users might want to disable claims for their address completely. For example if they use a deep cold storage solution or paper wallet."
      },
      "recover(address,address)": {
        "notice": "After the claim period has passed, the claimant can call this function to send the tokens on the lost address as well as the collateral to himself."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9315,
        "contract": "src/recovery/RecoveryHub.sol:RecoveryHub",
        "label": "claims",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_contract(IRecoverable)9265,t_mapping(t_address,t_struct(Claim)9307_storage))"
      },
      {
        "astId": 9319,
        "contract": "src/recovery/RecoveryHub.sol:RecoveryHub",
        "label": "recoveryDisabled",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1208": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRecoverable)9265": {
        "encoding": "inplace",
        "label": "contract IRecoverable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Claim)9307_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RecoveryHub.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)9307_storage"
      },
      "t_mapping(t_contract(IRecoverable)9265,t_mapping(t_address,t_struct(Claim)9307_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IRecoverable)9265",
        "label": "mapping(contract IRecoverable => mapping(address => struct RecoveryHub.Claim))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Claim)9307_storage)"
      },
      "t_struct(Claim)9307_storage": {
        "encoding": "inplace",
        "label": "struct RecoveryHub.Claim",
        "members": [
          {
            "astId": 9299,
            "contract": "src/recovery/RecoveryHub.sol:RecoveryHub",
            "label": "claimant",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9301,
            "contract": "src/recovery/RecoveryHub.sol:RecoveryHub",
            "label": "collateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9303,
            "contract": "src/recovery/RecoveryHub.sol:RecoveryHub",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9306,
            "contract": "src/recovery/RecoveryHub.sol:RecoveryHub",
            "label": "currencyUsed",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)1208"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}