{
  "address": "0xAF21E166ADc362465A27AeDc15315DcFc0c51624",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IQuoter",
          "name": "_quoter",
          "type": "address"
        },
        {
          "internalType": "contract ISwapRouter",
          "name": "swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedSigner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20In",
          "type": "address"
        }
      ],
      "name": "approveERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPriceCHFUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPriceETHUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxBlockTimestampDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxDataTimestampDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountInBase",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        }
      ],
      "name": "getPriceInERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountInBase",
          "type": "uint256"
        },
        {
          "internalType": "contract IBrokerbot",
          "name": "brokerBot",
          "type": "address"
        }
      ],
      "name": "getPriceInEther",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountInBase",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "base",
          "type": "address"
        }
      ],
      "name": "getPriceInEtherFromOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBrokerbot",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "hasSettingKeepEther",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receviedSigner",
          "type": "address"
        }
      ],
      "name": "isSignerAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_receivedTimestamp",
          "type": "uint256"
        }
      ],
      "name": "isTimestampValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "multiPay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        }
      ],
      "name": "multiPayAndNotify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountInBase",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        }
      ],
      "name": "payAndNotify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        }
      ],
      "name": "payAndNotify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMaximum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "erc20In",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "payFromERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountBase",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountInMaximum",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        }
      ],
      "name": "payFromERC20AndNotify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountInBase",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "base",
          "type": "address"
        }
      ],
      "name": "payFromEther",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBrokerbot",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountInBase",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        }
      ],
      "name": "payFromEtherAndNotify",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "ercAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8772548a35b9a9c7564e75d6ab833e20738e362b666939be0e25c114bfa28260",
  "receipt": {
    "to": null,
    "from": "0x39E5351E6CE3c4B19B8b0a2F5C82c511782457BE",
    "contractAddress": "0xAF21E166ADc362465A27AeDc15315DcFc0c51624",
    "transactionIndex": 0,
    "gasUsed": "3139062",
    "logsBloom": "0x
    "blockHash": "0x9f69836870bfbfa2cd664fac80e80002a9a30f9e4023fd68c7fb269b7a18ed05",
    "transactionHash": "0x8772548a35b9a9c7564e75d6ab833e20738e362b666939be0e25c114bfa28260",
    "logs": [],
    "blockNumber": 1350118,
    "cumulativeGasUsed": "3139062",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6",
    "0xE592427A0AEce92De3Edee1F18E0157C05861564",
    "0x926E370fD53c23f8B71ad2B3217b227E41A92b12"
  ],
  "numDeployments": 5,
  "solcInputHash": "0eee5cc12ad26638010f52b27c8a2c15",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IQuoter\",\"name\":\"_quoter\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedSigner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20In\",\"type\":\"address\"}],\"name\":\"approveERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceCHFUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceETHUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxBlockTimestampDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxDataTimestampDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"name\":\"getPriceInERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"contract IBrokerbot\",\"name\":\"brokerBot\",\"type\":\"address\"}],\"name\":\"getPriceInEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"base\",\"type\":\"address\"}],\"name\":\"getPriceInEtherFromOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBrokerbot\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"hasSettingKeepEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receviedSigner\",\"type\":\"address\"}],\"name\":\"isSignerAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_receivedTimestamp\",\"type\":\"uint256\"}],\"name\":\"isTimestampValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiPay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"multiPayAndNotify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"payAndNotify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"payAndNotify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20In\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"payFromERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"payFromERC20AndNotify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"base\",\"type\":\"address\"}],\"name\":\"payFromEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBrokerbot\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"payFromEtherAndNotify\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"ercAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveERC20(address)\":{\"details\":\"This function needs to be called before using the PaymentHub the first time with a new ERC20 token.\",\"params\":{\"erc20In\":\"The erc20 addresse to approve.\"}},\"getPriceInEther(uint256,address)\":{\"returns\":{\"_0\":\"The price in wei.\"}},\"payFromERC20(uint256,uint256,address,bytes,address)\":{\"details\":\"The calling address must approve this contract to spend its ERC20 for this function to succeed. As the amount of input ERC20 is variable, the calling address will need to approve for a slightly higher or infinit amount, anticipating some variance.\",\"params\":{\"amountInMaximum\":\"The maximum amount of ERC20 willing to be swapped for the specified amountOut of baseCurrency.\",\"amountOut\":\"The desired amount of baseCurrency.\",\"erc20In\":\"The address of the erc20 token to pay with.\",\"path\":\"The encoded path of the swap from erc20 to base.\",\"recipient\":\"The reciving address - brokerbot.\"},\"returns\":{\"amountIn\":\"The amountIn of ERC20 actually spent to receive the desired amountOut.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveERC20(address)\":{\"notice\":\"This function appoves infinite allowance for Uniswap, this is safe as the paymenthub should never hold any token (see also recover() ).\"},\"getLatestPriceCHFUSD()\":{\"notice\":\"Returns the latest price of chf/usd pair from redstoneainlink with 8 decimals\"},\"getLatestPriceETHUSD()\":{\"notice\":\"Returns the latest price of eth/usd pair from chainlink with 8 decimals\"},\"getPriceInEther(uint256,address)\":{\"notice\":\"Get price in Ether depding on brokerbot setting. If keep ETH is set price is from oracle. This is the method that the Brokerbot widget should use to quote the price to the user.\"},\"getPriceInEtherFromOracle(uint256,address)\":{\"notice\":\"Price in ETH with 18 decimals\"},\"hasSettingKeepEther(address)\":{\"notice\":\"Checks if the recipient(brokerbot) has setting enabled to keep ether\"},\"multiPayAndNotify(address,address[],uint256[],bytes)\":{\"notice\":\"Can (at least in theory) save some gas as the sender balance only is touched in one transaction.\"},\"payFromEther(address,uint256,address)\":{\"notice\":\"Convenience method to swap ether into base and pay a target address\"},\"recover(address,address,uint256)\":{\"notice\":\"In case tokens have been accidentally sent directly to this contract. Make sure to be fast as anyone can call this!\"}},\"notice\":\"A hub for payments. This allows tokens that do not support ERC 677 to enjoy similar functionality, namely interacting with a token-handling smart contract in one transaction, without having to set an allowance first. Instead, an allowance needs to be set only once, namely for this contract. Further, it supports automatic conversion from Ether to the payment currency through Uniswap or the reception of Ether using the current exchange rate as found in the chainlink oracle.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/brokerbot/PaymentHub.sol\":\"PaymentHub\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/ERC20/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0x2224189bcdeb28cbadfdb8d126c278df60ec39875c7929e7ffa9e2055cded960\",\"license\":\"MIT\"},\"src/brokerbot/IBrokerbot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ninterface IBrokerbot {\\n\\n  function base() external view returns (IERC20);\\n  \\n  function settings() external view returns (uint256);\\n\\n  // @return The amount of shares bought on buying or how much in the base currency is transfered on selling\\n  function processIncoming(IERC20 token_, address from, uint256 amount, bytes calldata ref) external payable returns (uint256);\\n\\n}\",\"keccak256\":\"0xfa9a31e2499366c027ec809b1216189809546c434536aba032c8e1ae8272ad15\",\"license\":\"MIT\"},\"src/brokerbot/IUniswapV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol\\npragma solidity ^0.8.0;\\n\\ninterface IQuoter {\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n    \\n    // solhint-disable-next-line func-name-mixedcase\\n    function WETH9() external view returns (address);\\n}\\n\\ninterface ISwapRouter {\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n    \\n    function refundETH() external payable;\\n}\",\"keccak256\":\"0x9a0e05a42567ffb0f2a96965ddda9f62adc782427a1fd1a267ff866d2420184c\",\"license\":\"MIT\"},\"src/brokerbot/PaymentHub.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2021 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IUniswapV3.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"./IBrokerbot.sol\\\";\\nimport \\\"../utils/PriceAware.sol\\\";\\n\\n/**\\n * A hub for payments. This allows tokens that do not support ERC 677 to enjoy similar functionality,\\n * namely interacting with a token-handling smart contract in one transaction, without having to set an allowance first.\\n * Instead, an allowance needs to be set only once, namely for this contract.\\n * Further, it supports automatic conversion from Ether to the payment currency through Uniswap or the reception of Ether\\n * using the current exchange rate as found in the chainlink oracle.\\n */\\ncontract PaymentHub is PriceAware{\\n\\n    uint24 private constant DEFAULT_FEE = 3000;\\n    uint256 private constant DENOMINATOR = 1e8;\\n    address private constant CHF_TOKEN = 0xB4272071eCAdd69d933AdcD19cA99fe80664fc08;\\n    address private immutable TRUSTED_SIGNER;\\n\\n    uint8 private constant KEEP_ETHER = 0x4; // copied from brokerbot\\n    \\n    IQuoter private immutable uniswapQuoter;\\n    ISwapRouter private immutable uniswapRouter;\\n\\n    constructor(IQuoter _quoter, ISwapRouter swapRouter, address _trustedSigner) {\\n        uniswapQuoter = _quoter;\\n        uniswapRouter = swapRouter;\\n        TRUSTED_SIGNER = _trustedSigner;\\n    }\\n\\n    function isSignerAuthorized(address _receviedSigner) public override virtual view returns (bool) {\\n        return _receviedSigner == TRUSTED_SIGNER;\\n    }\\n\\n    /*  \\n     * Get price in ERC20\\n     * This is the method that the Brokerbot widget should use to quote the price to the user.\\n     * @param amountInBase The amount of the base currency for the exact output.\\n     * @param path The encoded path of the swap from erc20 to base.\\n     * @return amount quoted to pay\\n     */\\n    function getPriceInERC20(uint256 amountInBase, bytes memory path) public returns (uint256) {\\n        return uniswapQuoter.quoteExactOutput(\\n            path,\\n            amountInBase\\n        );\\n    }\\n\\n    /**\\n     * Get price in Ether depding on brokerbot setting.\\n     * If keep ETH is set price is from oracle.\\n     * This is the method that the Brokerbot widget should use to quote the price to the user.\\n     * @return The price in wei.\\n     */\\n    function getPriceInEther(uint256 amountInBase, IBrokerbot brokerBot) public returns (uint256) {\\n        if ((address(brokerBot) != address(0)) && hasSettingKeepEther(brokerBot)) {\\n            return getPriceInEtherFromOracle(amountInBase, IBrokerbot(brokerBot).base());\\n        } else {\\n            return uniswapQuoter.quoteExactOutputSingle(uniswapQuoter.WETH9(), address(brokerBot.base()), DEFAULT_FEE, amountInBase, 0);\\n        }\\n    }\\n\\n    /**\\n     * Price in ETH with 18 decimals\\n     */\\n    function getPriceInEtherFromOracle(uint256 amountInBase, IERC20 base) public view returns (uint256) {\\n        if(address(base) == CHF_TOKEN) {\\n            return getLatestPriceCHFUSD() * amountInBase / getLatestPriceETHUSD();\\n        } else {\\n            return amountInBase * DENOMINATOR / getLatestPriceETHUSD();\\n        }\\n    }\\n\\n    /**\\n     * Returns the latest price of eth/usd pair from chainlink with 8 decimals\\n     */\\n    function getLatestPriceETHUSD() public view returns (uint256) {\\n        return getPriceFromMsg(bytes32(\\\"ETH\\\"));\\n    }\\n\\n    /**\\n     * Returns the latest price of chf/usd pair from redstoneainlink with 8 decimals\\n     */\\n    function getLatestPriceCHFUSD() public view returns (uint256) {\\n        return getPriceFromMsg(bytes32(\\\"CHF\\\"));\\n    }\\n\\n    /**\\n     * Convenience method to swap ether into base and pay a target address\\n     */\\n    function payFromEther(address recipient, uint256 amountInBase, IERC20 base) public payable {\\n        ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter.ExactOutputSingleParams(\\n            // rely on time stamp is ok, no exact time stamp needed\\n            // solhint-disable-next-line not-rely-on-time\\n            uniswapQuoter.WETH9(), address(base), DEFAULT_FEE, recipient, block.timestamp, amountInBase, msg.value, 0);\\n\\n        ISwapRouter swapRouter = uniswapRouter;\\n        // Executes the swap returning the amountIn needed to spend to receive the desired amountOut.\\n        uint256 amountIn = swapRouter.exactOutputSingle{value: msg.value}(params);\\n\\n        // For exact output swaps, the amountInMaximum may not have all been spent.\\n        // If the actual amount spent (amountIn) is less than the specified maximum amount, we must refund the msg.sender and approve the swapRouter to spend 0.\\n        if (amountIn < msg.value) {\\n            swapRouter.refundETH();\\n            (bool success, ) = msg.sender.call{value:msg.value - amountIn}(\\\"\\\"); // return change\\n            require(success, \\\"Transfer failed.\\\");\\n        }\\n    }\\n\\n    /// @dev The calling address must approve this contract to spend its ERC20 for this function to succeed. As the amount of input ERC20 is variable,\\n    /// the calling address will need to approve for a slightly higher or infinit amount, anticipating some variance.\\n    /// @param amountOut The desired amount of baseCurrency.\\n    /// @param amountInMaximum The maximum amount of ERC20 willing to be swapped for the specified amountOut of baseCurrency.\\n    /// @param erc20In The address of the erc20 token to pay with.\\n    /// @param path The encoded path of the swap from erc20 to base.\\n    /// @param recipient The reciving address - brokerbot.\\n    /// @return amountIn The amountIn of ERC20 actually spent to receive the desired amountOut.\\n    function payFromERC20(uint256 amountOut, uint256 amountInMaximum, address erc20In, bytes memory path, address recipient) public returns (uint256 amountIn) {\\n        ISwapRouter swapRouter = uniswapRouter;\\n        // Transfer the specified `amountInMaximum` to this contract.\\n        IERC20(erc20In).transferFrom(msg.sender, address(this), amountInMaximum);\\n\\n        // The parameter path is encoded as (tokenOut, fee, tokenIn/tokenOut, fee, tokenIn)\\n        ISwapRouter.ExactOutputParams memory params =\\n            ISwapRouter.ExactOutputParams({\\n                path: path,\\n                recipient: recipient,\\n                // solhint-disable-next-line not-rely-on-time\\n                deadline: block.timestamp,\\n                amountOut: amountOut,\\n                amountInMaximum: amountInMaximum\\n            });\\n\\n        // Executes the swap, returning the amountIn actually spent.\\n        amountIn = swapRouter.exactOutput(params);\\n\\n        // If the swap did not require the full amountInMaximum to achieve the exact amountOut then we refund msg.sender and approve the router to spend 0.\\n        if (amountIn < amountInMaximum) {\\n            IERC20(erc20In).transfer(msg.sender, amountInMaximum - amountIn);\\n        }\\n    }\\n\\n    ///This function appoves infinite allowance for Uniswap, this is safe as the paymenthub should never hold any token (see also recover() ).\\n    ///@dev This function needs to be called before using the PaymentHub the first time with a new ERC20 token.\\n    ///@param erc20In The erc20 addresse to approve.\\n    function approveERC20(address erc20In) external {\\n        IERC20(erc20In).approve(address(uniswapRouter), 0x8000000000000000000000000000000000000000000000000000000000000000);\\n    }\\n\\n    function multiPay(IERC20 token, address[] calldata recipients, uint256[] calldata amounts) public {\\n        for (uint i=0; i<recipients.length; i++) {\\n            require(IERC20(token).transferFrom(msg.sender, recipients[i], amounts[i]));\\n        }\\n    }\\n\\n    /**\\n     * Can (at least in theory) save some gas as the sender balance only is touched in one transaction.\\n     */\\n    function multiPayAndNotify(IERC20 token, address[] calldata recipients, uint256[] calldata amounts, bytes calldata ref) external {\\n        for (uint i=0; i<recipients.length; i++) {\\n            payAndNotify(token, recipients[i], amounts[i], ref);\\n        }\\n    }\\n\\n    // Allows to make a payment from the sender to an address given an allowance to this contract\\n    // Equivalent to xchf.transferAndCall(recipient, amountInBase)\\n    function payAndNotify(address recipient, uint256 amountInBase, bytes calldata ref) external {\\n        payAndNotify(IBrokerbot(recipient).base(), recipient, amountInBase, ref);\\n    }\\n\\n    function payAndNotify(IERC20 token, address recipient, uint256 amount, bytes calldata ref) public {\\n        require(IERC20(token).transferFrom(msg.sender, recipient, amount));\\n        IBrokerbot(recipient).processIncoming(token, msg.sender, amount, ref);\\n    }\\n\\n    function payFromEtherAndNotify(IBrokerbot recipient, uint256 amountInBase, bytes calldata ref) external payable {\\n        IERC20 base = recipient.base();\\n        // Check if the brokerbot has setting to keep ETH\\n        if (hasSettingKeepEther(recipient)) {\\n            uint256 priceInEther = getPriceInEtherFromOracle(amountInBase, base);\\n            recipient.processIncoming{value: priceInEther}(base, msg.sender, amountInBase, ref);\\n\\n            // Pay back ETH that was overpaid\\n            if (priceInEther < msg.value) {\\n                (bool success, ) = msg.sender.call{value:msg.value - priceInEther}(\\\"\\\"); // return change\\n                require(success, \\\"Transfer failed.\\\");\\n            }\\n\\n        } else {\\n            payFromEther(address(recipient), amountInBase, base);\\n            recipient.processIncoming(base, msg.sender, amountInBase, ref);\\n        }\\n    }\\n\\n    /***\\n     * Pay from any ERC20 token (which has Uniswapv3 ERC20-ETH pool) and send swapped base currency to brokerbot.\\n     * The needed amount needs to be approved at the ERC20 contract beforehand\\n     */\\n    function payFromERC20AndNotify(address recipient, uint256 amountBase, address erc20, uint256 amountInMaximum, bytes memory path, bytes calldata ref) external {\\n        IERC20 base = IBrokerbot(recipient).base();\\n        uint256 balanceBefore = IERC20(base).balanceOf(recipient);\\n        payFromERC20(amountBase, amountInMaximum, erc20, path, recipient);\\n        uint256 balanceAfter = IERC20(base).balanceOf(recipient);\\n        require(amountBase == (balanceAfter - balanceBefore), \\\"swap error\\\");\\n        IBrokerbot(recipient).processIncoming(base, msg.sender, balanceAfter - balanceBefore, ref);\\n    }\\n\\n    /**\\n     * Checks if the recipient(brokerbot) has setting enabled to keep ether\\n     */\\n    function hasSettingKeepEther(IBrokerbot recipient) public view returns (bool) {\\n        return recipient.settings() & KEEP_ETHER == KEEP_ETHER;\\n    }\\n\\n    /**\\n     * In case tokens have been accidentally sent directly to this contract.\\n     * Make sure to be fast as anyone can call this!\\n     */\\n    function recover(IERC20 ercAddress, address to, uint256 amount) external {\\n        require(ercAddress.transfer(to, amount));\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {\\n        // Important to receive ETH refund from Uniswap\\n    }\\n}\\n\",\"keccak256\":\"0x0c63be1b31cb563675a05b989fb8de3fea9990db2ef90dcf490f1b3a24973bf4\",\"license\":\"LicenseRef-Aktionariat\"},\"src/utils/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/ECDSA.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\",\"keccak256\":\"0x5f966c4bfe53dd55e0965d367743b8443c8272ba6af26de96a7efced8a28c838\",\"license\":\"MIT\"},\"src/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n//\\n// Modifications:\\n// - Replaced Context._msgSender() with msg.sender\\n// - Made leaner\\n// - Extracted interface\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor (address initialOwner) {\\n        owner = initialOwner;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"not owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x1104f456d1ee340a1674c34f132578b599d8fd1a8e12e57d5a7691de1191caca\",\"license\":\"MIT\"},\"src/utils/PriceAware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/redstone-finance/redstone-evm-connector/blob/master/contracts/message-based/PriceAware.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\nabstract contract PriceAware {\\n  using ECDSA for bytes32;\\n\\n  uint256 constant _MAX_DATA_TIMESTAMP_DELAY = 3 * 60; // 3 minutes\\n  uint256 constant _MAX_BLOCK_TIMESTAMP_DELAY = 15; // 15 seconds\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\\n\\n  function getMaxDataTimestampDelay() public virtual view returns (uint256) {\\n    return _MAX_DATA_TIMESTAMP_DELAY;\\n  }\\n\\n  function getMaxBlockTimestampDelay() public virtual view returns (uint256) {\\n    return _MAX_BLOCK_TIMESTAMP_DELAY;\\n  }\\n\\n  function isSignerAuthorized(address _receviedSigner) public virtual view returns (bool);\\n\\n  function isTimestampValid(uint256 _receivedTimestamp) public virtual view returns (bool) {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    require(\\n      (block.timestamp + getMaxBlockTimestampDelay()) > _receivedTimestamp,\\n      \\\"Data with future timestamps is not allowed\\\");\\n\\n    return block.timestamp < _receivedTimestamp\\n      || block.timestamp - _receivedTimestamp < getMaxDataTimestampDelay();\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\\n\\n  function getPriceFromMsg(bytes32 symbol) internal view returns (uint256) {bytes32[] memory symbols = new bytes32[](1); symbols[0] = symbol;\\n    return getPricesFromMsg(symbols)[0];\\n  }\\n\\n  function getPricesFromMsg(bytes32[] memory symbols) internal view returns (uint256[] memory) {\\n    // The structure of calldata witn n - data items:\\n    // The data that is signed (symbols, values, timestamp) are inside the {} brackets\\n    // [origina_call_data| ?]{[[symbol | 32][value | 32] | n times][timestamp | 32]}[size | 1][signature | 65]\\n\\n    // 1. First we extract dataSize - the number of data items (symbol,value pairs) in the message\\n    uint8 dataSize; //Number of data entries\\n    assembly {\\n      // Calldataload loads slots of 32 bytes\\n      // The last 65 bytes are for signature\\n      // We load the previous 32 bytes and automatically take the 2 least significant ones (casting to uint16)\\n      dataSize := calldataload(sub(calldatasize(), 97))\\n    }\\n\\n    // 2. We calculate the size of signable message expressed in bytes\\n    // ((symbolLen(32) + valueLen(32)) * dataSize + timeStamp length\\n    uint16 messageLength = uint16(dataSize) * 64 + 32; //Length of data message in bytes\\n\\n    // 3. We extract the signableMessage\\n\\n    // (That's the high level equivalent 2k gas more expensive)\\n    // bytes memory rawData = msg.data.slice(msg.data.length - messageLength - 65, messageLength);\\n\\n    bytes memory signableMessage;\\n    assembly {\\n      signableMessage := mload(0x40)\\n      mstore(signableMessage, messageLength)\\n      // The starting point is callDataSize minus length of data(messageLength), signature(65) and size(1) = 66\\n      calldatacopy(\\n        add(signableMessage, 0x20),\\n        sub(calldatasize(), add(messageLength, 66)),\\n        messageLength\\n      )\\n      mstore(0x40, add(signableMessage, 0x20))\\n    }\\n\\n    // 4. We first hash the raw message and then hash it again with the prefix\\n    // Following the https://github.com/ethereum/eips/issues/191 standard\\n    bytes32 hash = keccak256(signableMessage);\\n    bytes32 hashWithPrefix = keccak256(\\n      abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n    );\\n\\n    // 5. We extract the off-chain signature from calldata\\n\\n    // (That's the high level equivalent 2k gas more expensive)\\n    // bytes memory signature = msg.data.slice(msg.data.length - 65, 65);\\n    bytes memory signature;\\n    assembly {\\n      signature := mload(0x40)\\n      mstore(signature, 65)\\n      calldatacopy(add(signature, 0x20), sub(calldatasize(), 65), 65)\\n      mstore(0x40, add(signature, 0x20))\\n    }\\n\\n    // 6. We verify the off-chain signature against on-chain hashed data\\n\\n    address signer = hashWithPrefix.recover(signature);\\n    require(isSignerAuthorized(signer), \\\"Signer not authorized\\\");\\n\\n    // 7. We extract timestamp from callData\\n\\n    uint256 dataTimestamp;\\n    assembly {\\n      // Calldataload loads slots of 32 bytes\\n      // The last 65 bytes are for signature + 1 for data size\\n      // We load the previous 32 bytes\\n      dataTimestamp := calldataload(sub(calldatasize(), 98))\\n    }\\n\\n    // 8. We validate timestamp\\n    require(isTimestampValid(dataTimestamp), \\\"Data timestamp is invalid\\\");\\n\\n    return _readFromCallData(symbols, uint256(dataSize), messageLength);\\n  }\\n\\n  function _readFromCallData(bytes32[] memory symbols, uint256 dataSize, uint16 messageLength) private pure returns (uint256[] memory) {\\n    uint256[] memory values;\\n    uint256 i;\\n    uint256 j;\\n    uint256 readyAssets;\\n    bytes32 currentSymbol;\\n\\n    // We iterate directly through call data to extract the values for symbols\\n    assembly {\\n      let start := sub(calldatasize(), add(messageLength, 66))\\n\\n      values := msize()\\n      mstore(values, mload(symbols))\\n      mstore(0x40, add(add(values, 0x20), mul(mload(symbols), 0x20)))\\n\\n      for { i := 0 } lt(i, dataSize) { i := add(i, 1) } {\\n        currentSymbol := calldataload(add(start, mul(i, 64)))\\n\\n        for { j := 0 } lt(j, mload(symbols)) { j := add(j, 1) } {\\n          if eq(mload(add(add(symbols, 32), mul(j, 32))), currentSymbol) {\\n            mstore(\\n              add(add(values, 32), mul(j, 32)),\\n              calldataload(add(add(start, mul(i, 64)), 32))\\n            )\\n            readyAssets := add(readyAssets, 1)\\n          }\\n\\n          if eq(readyAssets, mload(symbols)) {\\n            i := dataSize\\n          }\\n        }\\n      }\\n    }\\n\\n    return (values);\\n  }\\n}\",\"keccak256\":\"0xbc69d1679d58ad6fc8aa7943fc5c2fef947039f30d7171ce34974724c2064d70\",\"license\":\"MIT\"},\"src/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\",\"keccak256\":\"0x54217161f9477b5519e76ff5a8d289faaa6c0fa279ffd99675286ae9c563e4d5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162003a5238038062003a528339818101604052810190620000379190620001d0565b8273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050506200022c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010e82620000e1565b9050919050565b6000620001228262000101565b9050919050565b620001348162000115565b81146200014057600080fd5b50565b600081519050620001548162000129565b92915050565b6000620001678262000101565b9050919050565b62000179816200015a565b81146200018557600080fd5b50565b60008151905062000199816200016e565b92915050565b620001aa8162000101565b8114620001b657600080fd5b50565b600081519050620001ca816200019f565b92915050565b600080600060608486031215620001ec57620001eb620000dc565b5b6000620001fc8682870162000143565b93505060206200020f8682870162000188565b92505060406200022286828701620001b9565b9150509250925092565b60805160a05160c0516137d36200027f6000396000818161089e01528181610ff9015261140e01526000818161078401528181610ed9015281816116d601526117120152600061082c01526137d36000f3fe6080604052600436106101225760003560e01c8063568f3254116100a0578063c1d8e08a11610064578063c1d8e08a146103d1578063d3b3ca771461040e578063d64d4ba514610437578063e25b37c614610474578063f31a210a146104b157610129565b8063568f3254146102fb5780635daf206a146103245780636fb0c7dc1461034d578063750582051461036957806395fe863c146103a657610129565b806317f565d2116100e757806317f565d2146102185780631945b784146102415780631c9af2e31461027e5780631ec82cb8146102a75780635118af5a146102d057610129565b8062124e3d1461012e578063040c037a14610159578063078aa9641461017557806311c89b10146101b257806311e8701c146101ef57610129565b3661012957005b600080fd5b34801561013a57600080fd5b506101436104dc565b6040516101509190611f37565b60405180910390f35b610173600480360381019061016e9190612067565b61050c565b005b34801561018157600080fd5b5061019c6004803603810190610197919061221c565b610780565b6040516101a99190611f37565b60405180910390f35b3480156101be57600080fd5b506101d960048036038101906101d491906122a4565b610828565b6040516101e691906122ec565b60405180910390f35b3480156101fb57600080fd5b50610216600480360381019061021191906122a4565b610880565b005b34801561022457600080fd5b5061023f600480360381019061023a9190612307565b610942565b005b34801561024d57600080fd5b50610268600480360381019061026391906123b9565b6109c3565b6040516102759190611f37565b60405180910390f35b34801561028a57600080fd5b506102a560048036038101906102a091906124a5565b610a64565b005b3480156102b357600080fd5b506102ce60048036038101906102c9919061253a565b610b56565b005b3480156102dc57600080fd5b506102e5610be2565b6040516102f29190611f37565b60405180910390f35b34801561030757600080fd5b50610322600480360381019061031d919061258d565b610beb565b005b34801561033057600080fd5b5061034b60048036038101906103469190612656565b610c63565b005b61036760048036038101906103629190612721565b610ec9565b005b34801561037557600080fd5b50610390600480360381019061038b9190612774565b6111c4565b60405161039d91906122ec565b60405180910390f35b3480156103b257600080fd5b506103bb611240565b6040516103c89190611f37565b60405180910390f35b3480156103dd57600080fd5b506103f860048036038101906103f391906127a1565b611270565b60405161040591906122ec565b60405180910390f35b34801561041a57600080fd5b50610435600480360381019061043091906127ce565b6112f4565b005b34801561044357600080fd5b5061045e60048036038101906104599190612856565b611409565b60405161046b9190611f37565b60405180910390f35b34801561048057600080fd5b5061049b600480360381019061049691906128ed565b61160d565b6040516104a89190611f37565b60405180910390f35b3480156104bd57600080fd5b506104c6611880565b6040516104d39190611f37565b60405180910390f35b60006105077f4348460000000000000000000000000000000000000000000000000000000000611889565b905090565b60008473ffffffffffffffffffffffffffffffffffffffff16635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057d9190612942565b905061058885611270565b156106e857600061059985836109c3565b90508573ffffffffffffffffffffffffffffffffffffffff166369365c528284338989896040518763ffffffff1660e01b81526004016105dd959493929190612a1b565b60206040518083038185885af11580156105fb573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106209190612a7e565b50348110156106e25760003373ffffffffffffffffffffffffffffffffffffffff16823461064e9190612ada565b60405161065a90612b3f565b60006040518083038185875af1925050503d8060008114610697576040519150601f19603f3d011682016040523d82523d6000602084013e61069c565b606091505b50509050806106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d790612bb1565b60405180910390fd5b505b50610779565b6106f3858583610ec9565b8473ffffffffffffffffffffffffffffffffffffffff166369365c5282338787876040518663ffffffff1660e01b8152600401610734959493929190612a1b565b6020604051808303816000875af1158015610753573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107779190612a7e565b505b5050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632f80bb1d83856040518363ffffffff1660e01b81526004016107dd929190612c48565b6020604051808303816000875af11580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108209190612a7e565b905092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b8073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f00000000000000000000000000000000000000000000000000000000000000007f80000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004016108fb929190612cb3565b6020604051808303816000875af115801561091a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093e9190612d08565b5050565b6109bd8473ffffffffffffffffffffffffffffffffffffffff16635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b49190612942565b858585856112f4565b50505050565b600073b4272071ecadd69d933adcd19ca99fe80664fc0873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a3957610a15611240565b83610a1e6104dc565b610a289190612d35565b610a329190612dbe565b9050610a5e565b610a41611240565b6305f5e10084610a519190612d35565b610a5b9190612dbe565b90505b92915050565b60005b84849050811015610b4e578573ffffffffffffffffffffffffffffffffffffffff166323b872dd33878785818110610aa257610aa1612def565b5b9050602002016020810190610ab791906122a4565b868686818110610aca57610ac9612def565b5b905060200201356040518463ffffffff1660e01b8152600401610aef93929190612e1e565b6020604051808303816000875af1158015610b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b329190612d08565b610b3b57600080fd5b8080610b4690612e55565b915050610a67565b505050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610b91929190612e9e565b6020604051808303816000875af1158015610bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd49190612d08565b610bdd57600080fd5b505050565b6000600f905090565b60005b86869050811015610c5957610c4688888884818110610c1057610c0f612def565b5b9050602002016020810190610c2591906122a4565b878785818110610c3857610c37612def565b5b9050602002013586866112f4565b8080610c5190612e55565b915050610bee565b5050505050505050565b60008773ffffffffffffffffffffffffffffffffffffffff16635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd49190612942565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b8152600401610d119190612ec7565b602060405180830381865afa158015610d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d529190612a7e565b9050610d61888789888d611409565b5060008273ffffffffffffffffffffffffffffffffffffffff166370a082318b6040518263ffffffff1660e01b8152600401610d9d9190612ec7565b602060405180830381865afa158015610dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dde9190612a7e565b90508181610dec9190612ada565b8914610e2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2490612f2e565b60405180910390fd5b8973ffffffffffffffffffffffffffffffffffffffff166369365c5284338585610e579190612ada565b89896040518663ffffffff1660e01b8152600401610e79959493929190612a1b565b6020604051808303816000875af1158015610e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebc9190612a7e565b5050505050505050505050565b60006040518061010001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634aa4a4fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f669190612f63565b73ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001428152602001848152602001348152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060007f0000000000000000000000000000000000000000000000000000000000000000905060008173ffffffffffffffffffffffffffffffffffffffff1663db3e219834856040518363ffffffff1660e01b8152600401611056919061307d565b60206040518083038185885af1158015611074573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906110999190612a7e565b9050348110156111bc578173ffffffffffffffffffffffffffffffffffffffff166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156110eb57600080fd5b505af11580156110ff573d6000803e3d6000fd5b5050505060003373ffffffffffffffffffffffffffffffffffffffff1682346111289190612ada565b60405161113490612b3f565b60006040518083038185875af1925050503d8060008114611171576040519150601f19603f3d011682016040523d82523d6000602084013e611176565b606091505b50509050806111ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b190612bb1565b60405180910390fd5b505b505050505050565b6000816111cf610be2565b426111da9190613099565b1161121a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121190613161565b60405180910390fd5b81421080611239575061122b611880565b82426112379190612ada565b105b9050919050565b600061126b7f4554480000000000000000000000000000000000000000000000000000000000611889565b905090565b6000600460ff16600460ff168373ffffffffffffffffffffffffffffffffffffffff1663e06174e46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112eb9190612a7e565b16149050919050565b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd3386866040518463ffffffff1660e01b815260040161133193929190612e1e565b6020604051808303816000875af1158015611350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113749190612d08565b61137d57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff166369365c5286338686866040518663ffffffff1660e01b81526004016113be959493929190612a1b565b6020604051808303816000875af11580156113dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114019190612a7e565b505050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000090508473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161146c93929190612e1e565b6020604051808303816000875af115801561148b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114af9190612d08565b5060006040518060a001604052808681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018981526020018881525090508173ffffffffffffffffffffffffffffffffffffffff1663f28c0498826040518263ffffffff1660e01b815260040161152a9190613241565b6020604051808303816000875af1158015611549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156d9190612a7e565b925086831015611602578573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33858a6115a09190612ada565b6040518363ffffffff1660e01b81526004016115bd929190612e9e565b6020604051808303816000875af11580156115dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116009190612d08565b505b505095945050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015611650575061164f82611270565b5b156116d4576116cd838373ffffffffffffffffffffffffffffffffffffffff16635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c89190612942565b6109c3565b905061187a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166330d07f217f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634aa4a4fc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561177b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179f9190612f63565b8473ffffffffffffffffffffffffffffffffffffffff16635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180e9190612942565b610bb88760006040518663ffffffff1660e01b81526004016118349594939291906132ad565b6020604051808303816000875af1158015611853573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118779190612a7e565b90505b92915050565b600060b4905090565b600080600167ffffffffffffffff8111156118a7576118a66120f1565b5b6040519080825280602002602001820160405280156118d55781602001602082028036833780820191505090505b50905082816000815181106118ed576118ec612def565b5b60200260200101818152505061190281611925565b60008151811061191557611914612def565b5b6020026020010151915050919050565b60606000606136033590506000602060408360ff16611944919061330e565b61194e919061334a565b9050606060405190508181528160428301360360208301376020810160405260008180519060200120905060008160405160200161198c9190613404565b6040516020818303038152906040528051906020012090506060604051905060418152604180360360208301376020810160405260006119d58284611a8d90919063ffffffff16565b90506119e081610828565b611a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1690613476565b60405180910390fd5b600060623603359050611a31816111c4565b611a70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a67906134e2565b60405180910390fd5b611a7e8a8960ff1689611ab4565b98505050505050505050919050565b6000806000611a9c8585611b5a565b91509150611aa981611bdd565b819250505092915050565b6060806000806000806042870136035995508951865260208a51026020870101604052600094505b88851015611b4a57604085028101359150600093505b8951841015611b3f57816020850260208c0101511415611b275760206040860282010135602085026020880101526001830192505b8951831415611b34578894505b600184019350611af2565b600185019450611adc565b5084955050505050509392505050565b600080604183511415611b9c5760008060006020860151925060408601519150606086015160001a9050611b9087828585611db2565b94509450505050611bd6565b604083511415611bcd576000806020850151915060408501519050611bc2868383611ebf565b935093505050611bd6565b60006002915091505b9250929050565b60006004811115611bf157611bf0613502565b5b816004811115611c0457611c03613502565b5b1415611c0f57611daf565b60016004811115611c2357611c22613502565b5b816004811115611c3657611c35613502565b5b1415611c77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6e9061357d565b60405180910390fd5b60026004811115611c8b57611c8a613502565b5b816004811115611c9e57611c9d613502565b5b1415611cdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd6906135e9565b60405180910390fd5b60036004811115611cf357611cf2613502565b5b816004811115611d0657611d05613502565b5b1415611d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3e9061367b565b60405180910390fd5b600480811115611d5a57611d59613502565b5b816004811115611d6d57611d6c613502565b5b1415611dae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da59061370d565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115611ded576000600391509150611eb6565b601b8560ff1614158015611e055750601c8560ff1614155b15611e17576000600491509150611eb6565b600060018787878760405160008152602001604052604051611e3c9493929190613758565b6020604051602081039080840390855afa158015611e5e573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ead57600060019250925050611eb6565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c611f029190613099565b9050611f1087828885611db2565b935093505050935093915050565b6000819050919050565b611f3181611f1e565b82525050565b6000602082019050611f4c6000830184611f28565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f9182611f66565b9050919050565b6000611fa382611f86565b9050919050565b611fb381611f98565b8114611fbe57600080fd5b50565b600081359050611fd081611faa565b92915050565b611fdf81611f1e565b8114611fea57600080fd5b50565b600081359050611ffc81611fd6565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261202757612026612002565b5b8235905067ffffffffffffffff81111561204457612043612007565b5b6020830191508360018202830111156120605761205f61200c565b5b9250929050565b6000806000806060858703121561208157612080611f5c565b5b600061208f87828801611fc1565b94505060206120a087828801611fed565b935050604085013567ffffffffffffffff8111156120c1576120c0611f61565b5b6120cd87828801612011565b925092505092959194509250565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612129826120e0565b810181811067ffffffffffffffff82111715612148576121476120f1565b5b80604052505050565b600061215b611f52565b90506121678282612120565b919050565b600067ffffffffffffffff821115612187576121866120f1565b5b612190826120e0565b9050602081019050919050565b82818337600083830152505050565b60006121bf6121ba8461216c565b612151565b9050828152602081018484840111156121db576121da6120db565b5b6121e684828561219d565b509392505050565b600082601f83011261220357612202612002565b5b81356122138482602086016121ac565b91505092915050565b6000806040838503121561223357612232611f5c565b5b600061224185828601611fed565b925050602083013567ffffffffffffffff81111561226257612261611f61565b5b61226e858286016121ee565b9150509250929050565b61228181611f86565b811461228c57600080fd5b50565b60008135905061229e81612278565b92915050565b6000602082840312156122ba576122b9611f5c565b5b60006122c88482850161228f565b91505092915050565b60008115159050919050565b6122e6816122d1565b82525050565b600060208201905061230160008301846122dd565b92915050565b6000806000806060858703121561232157612320611f5c565b5b600061232f8782880161228f565b945050602061234087828801611fed565b935050604085013567ffffffffffffffff81111561236157612360611f61565b5b61236d87828801612011565b925092505092959194509250565b600061238682611f86565b9050919050565b6123968161237b565b81146123a157600080fd5b50565b6000813590506123b38161238d565b92915050565b600080604083850312156123d0576123cf611f5c565b5b60006123de85828601611fed565b92505060206123ef858286016123a4565b9150509250929050565b60008083601f84011261240f5761240e612002565b5b8235905067ffffffffffffffff81111561242c5761242b612007565b5b6020830191508360208202830111156124485761244761200c565b5b9250929050565b60008083601f84011261246557612464612002565b5b8235905067ffffffffffffffff81111561248257612481612007565b5b60208301915083602082028301111561249e5761249d61200c565b5b9250929050565b6000806000806000606086880312156124c1576124c0611f5c565b5b60006124cf888289016123a4565b955050602086013567ffffffffffffffff8111156124f0576124ef611f61565b5b6124fc888289016123f9565b9450945050604086013567ffffffffffffffff81111561251f5761251e611f61565b5b61252b8882890161244f565b92509250509295509295909350565b60008060006060848603121561255357612552611f5c565b5b6000612561868287016123a4565b93505060206125728682870161228f565b925050604061258386828701611fed565b9150509250925092565b60008060008060008060006080888a0312156125ac576125ab611f5c565b5b60006125ba8a828b016123a4565b975050602088013567ffffffffffffffff8111156125db576125da611f61565b5b6125e78a828b016123f9565b9650965050604088013567ffffffffffffffff81111561260a57612609611f61565b5b6126168a828b0161244f565b9450945050606088013567ffffffffffffffff81111561263957612638611f61565b5b6126458a828b01612011565b925092505092959891949750929550565b600080600080600080600060c0888a03121561267557612674611f5c565b5b60006126838a828b0161228f565b97505060206126948a828b01611fed565b96505060406126a58a828b0161228f565b95505060606126b68a828b01611fed565b945050608088013567ffffffffffffffff8111156126d7576126d6611f61565b5b6126e38a828b016121ee565b93505060a088013567ffffffffffffffff81111561270457612703611f61565b5b6127108a828b01612011565b925092505092959891949750929550565b60008060006060848603121561273a57612739611f5c565b5b60006127488682870161228f565b935050602061275986828701611fed565b925050604061276a868287016123a4565b9150509250925092565b60006020828403121561278a57612789611f5c565b5b600061279884828501611fed565b91505092915050565b6000602082840312156127b7576127b6611f5c565b5b60006127c584828501611fc1565b91505092915050565b6000806000806000608086880312156127ea576127e9611f5c565b5b60006127f8888289016123a4565b95505060206128098882890161228f565b945050604061281a88828901611fed565b935050606086013567ffffffffffffffff81111561283b5761283a611f61565b5b61284788828901612011565b92509250509295509295909350565b600080600080600060a0868803121561287257612871611f5c565b5b600061288088828901611fed565b955050602061289188828901611fed565b94505060406128a28882890161228f565b935050606086013567ffffffffffffffff8111156128c3576128c2611f61565b5b6128cf888289016121ee565b92505060806128e08882890161228f565b9150509295509295909350565b6000806040838503121561290457612903611f5c565b5b600061291285828601611fed565b925050602061292385828601611fc1565b9150509250929050565b60008151905061293c8161238d565b92915050565b60006020828403121561295857612957611f5c565b5b60006129668482850161292d565b91505092915050565b6000819050919050565b600061299461298f61298a84611f66565b61296f565b611f66565b9050919050565b60006129a682612979565b9050919050565b60006129b88261299b565b9050919050565b6129c8816129ad565b82525050565b6129d781611f86565b82525050565b600082825260208201905092915050565b60006129fa83856129dd565b9350612a0783858461219d565b612a10836120e0565b840190509392505050565b6000608082019050612a3060008301886129bf565b612a3d60208301876129ce565b612a4a6040830186611f28565b8181036060830152612a5d8184866129ee565b90509695505050505050565b600081519050612a7881611fd6565b92915050565b600060208284031215612a9457612a93611f5c565b5b6000612aa284828501612a69565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612ae582611f1e565b9150612af083611f1e565b925082821015612b0357612b02612aab565b5b828203905092915050565b600081905092915050565b50565b6000612b29600083612b0e565b9150612b3482612b19565b600082019050919050565b6000612b4a82612b1c565b9150819050919050565b600082825260208201905092915050565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b6000612b9b601083612b54565b9150612ba682612b65565b602082019050919050565b60006020820190508181036000830152612bca81612b8e565b9050919050565b600081519050919050565b60005b83811015612bfa578082015181840152602081019050612bdf565b83811115612c09576000848401525b50505050565b6000612c1a82612bd1565b612c2481856129dd565b9350612c34818560208601612bdc565b612c3d816120e0565b840191505092915050565b60006040820190508181036000830152612c628185612c0f565b9050612c716020830184611f28565b9392505050565b6000819050919050565b6000612c9d612c98612c9384612c78565b61296f565b611f1e565b9050919050565b612cad81612c82565b82525050565b6000604082019050612cc860008301856129ce565b612cd56020830184612ca4565b9392505050565b612ce5816122d1565b8114612cf057600080fd5b50565b600081519050612d0281612cdc565b92915050565b600060208284031215612d1e57612d1d611f5c565b5b6000612d2c84828501612cf3565b91505092915050565b6000612d4082611f1e565b9150612d4b83611f1e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612d8457612d83612aab565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612dc982611f1e565b9150612dd483611f1e565b925082612de457612de3612d8f565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000606082019050612e3360008301866129ce565b612e4060208301856129ce565b612e4d6040830184611f28565b949350505050565b6000612e6082611f1e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612e9357612e92612aab565b5b600182019050919050565b6000604082019050612eb360008301856129ce565b612ec06020830184611f28565b9392505050565b6000602082019050612edc60008301846129ce565b92915050565b7f73776170206572726f7200000000000000000000000000000000000000000000600082015250565b6000612f18600a83612b54565b9150612f2382612ee2565b602082019050919050565b60006020820190508181036000830152612f4781612f0b565b9050919050565b600081519050612f5d81612278565b92915050565b600060208284031215612f7957612f78611f5c565b5b6000612f8784828501612f4e565b91505092915050565b612f9981611f86565b82525050565b600062ffffff82169050919050565b612fb781612f9f565b82525050565b612fc681611f1e565b82525050565b612fd581611f66565b82525050565b61010082016000820151612ff26000850182612f90565b5060208201516130056020850182612f90565b5060408201516130186040850182612fae565b50606082015161302b6060850182612f90565b50608082015161303e6080850182612fbd565b5060a082015161305160a0850182612fbd565b5060c082015161306460c0850182612fbd565b5060e082015161307760e0850182612fcc565b50505050565b6000610100820190506130936000830184612fdb565b92915050565b60006130a482611f1e565b91506130af83611f1e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156130e4576130e3612aab565b5b828201905092915050565b7f446174612077697468206675747572652074696d657374616d7073206973206e60008201527f6f7420616c6c6f77656400000000000000000000000000000000000000000000602082015250565b600061314b602a83612b54565b9150613156826130ef565b604082019050919050565b6000602082019050818103600083015261317a8161313e565b9050919050565b600082825260208201905092915050565b600061319d82612bd1565b6131a78185613181565b93506131b7818560208601612bdc565b6131c0816120e0565b840191505092915050565b600060a08301600083015184820360008601526131e88282613192565b91505060208301516131fd6020860182612f90565b5060408301516132106040860182612fbd565b5060608301516132236060860182612fbd565b5060808301516132366080860182612fbd565b508091505092915050565b6000602082019050818103600083015261325b81846131cb565b905092915050565b61326c81612f9f565b82525050565b6000819050919050565b600061329761329261328d84613272565b61296f565b611f66565b9050919050565b6132a78161327c565b82525050565b600060a0820190506132c260008301886129ce565b6132cf60208301876129ce565b6132dc6040830186613263565b6132e96060830185611f28565b6132f6608083018461329e565b9695505050505050565b600061ffff82169050919050565b600061331982613300565b915061332483613300565b92508161ffff048311821515161561333f5761333e612aab565b5b828202905092915050565b600061335582613300565b915061336083613300565b92508261ffff0382111561337757613376612aab565b5b828201905092915050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006133c3601c83613382565b91506133ce8261338d565b601c82019050919050565b6000819050919050565b6000819050919050565b6133fe6133f9826133d9565b6133e3565b82525050565b600061340f826133b6565b915061341b82846133ed565b60208201915081905092915050565b7f5369676e6572206e6f7420617574686f72697a65640000000000000000000000600082015250565b6000613460601583612b54565b915061346b8261342a565b602082019050919050565b6000602082019050818103600083015261348f81613453565b9050919050565b7f446174612074696d657374616d7020697320696e76616c696400000000000000600082015250565b60006134cc601983612b54565b91506134d782613496565b602082019050919050565b600060208201905081810360008301526134fb816134bf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000613567601883612b54565b915061357282613531565b602082019050919050565b600060208201905081810360008301526135968161355a565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006135d3601f83612b54565b91506135de8261359d565b602082019050919050565b60006020820190508181036000830152613602816135c6565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000613665602283612b54565b915061367082613609565b604082019050919050565b6000602082019050818103600083015261369481613658565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006136f7602283612b54565b91506137028261369b565b604082019050919050565b60006020820190508181036000830152613726816136ea565b9050919050565b613736816133d9565b82525050565b600060ff82169050919050565b6137528161373c565b82525050565b600060808201905061376d600083018761372d565b61377a6020830186613749565b613787604083018561372d565b613794606083018461372d565b9594505050505056fea2646970667358221220293649cbdf9c00e0e69ce0674c520909018b64fc1b008b9042e3d71f7d5b962464736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106101225760003560e01c8063568f3254116100a0578063c1d8e08a11610064578063c1d8e08a146103d1578063d3b3ca771461040e578063d64d4ba514610437578063e25b37c614610474578063f31a210a146104b157610129565b8063568f3254146102fb5780635daf206a146103245780636fb0c7dc1461034d578063750582051461036957806395fe863c146103a657610129565b806317f565d2116100e757806317f565d2146102185780631945b784146102415780631c9af2e31461027e5780631ec82cb8146102a75780635118af5a146102d057610129565b8062124e3d1461012e578063040c037a14610159578063078aa9641461017557806311c89b10146101b257806311e8701c146101ef57610129565b3661012957005b600080fd5b34801561013a57600080fd5b506101436104dc565b6040516101509190611f37565b60405180910390f35b610173600480360381019061016e9190612067565b61050c565b005b34801561018157600080fd5b5061019c6004803603810190610197919061221c565b610780565b6040516101a99190611f37565b60405180910390f35b3480156101be57600080fd5b506101d960048036038101906101d491906122a4565b610828565b6040516101e691906122ec565b60405180910390f35b3480156101fb57600080fd5b50610216600480360381019061021191906122a4565b610880565b005b34801561022457600080fd5b5061023f600480360381019061023a9190612307565b610942565b005b34801561024d57600080fd5b50610268600480360381019061026391906123b9565b6109c3565b6040516102759190611f37565b60405180910390f35b34801561028a57600080fd5b506102a560048036038101906102a091906124a5565b610a64565b005b3480156102b357600080fd5b506102ce60048036038101906102c9919061253a565b610b56565b005b3480156102dc57600080fd5b506102e5610be2565b6040516102f29190611f37565b60405180910390f35b34801561030757600080fd5b50610322600480360381019061031d919061258d565b610beb565b005b34801561033057600080fd5b5061034b60048036038101906103469190612656565b610c63565b005b61036760048036038101906103629190612721565b610ec9565b005b34801561037557600080fd5b50610390600480360381019061038b9190612774565b6111c4565b60405161039d91906122ec565b60405180910390f35b3480156103b257600080fd5b506103bb611240565b6040516103c89190611f37565b60405180910390f35b3480156103dd57600080fd5b506103f860048036038101906103f391906127a1565b611270565b60405161040591906122ec565b60405180910390f35b34801561041a57600080fd5b50610435600480360381019061043091906127ce565b6112f4565b005b34801561044357600080fd5b5061045e60048036038101906104599190612856565b611409565b60405161046b9190611f37565b60405180910390f35b34801561048057600080fd5b5061049b600480360381019061049691906128ed565b61160d565b6040516104a89190611f37565b60405180910390f35b3480156104bd57600080fd5b506104c6611880565b6040516104d39190611f37565b60405180910390f35b60006105077f4348460000000000000000000000000000000000000000000000000000000000611889565b905090565b60008473ffffffffffffffffffffffffffffffffffffffff16635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057d9190612942565b905061058885611270565b156106e857600061059985836109c3565b90508573ffffffffffffffffffffffffffffffffffffffff166369365c528284338989896040518763ffffffff1660e01b81526004016105dd959493929190612a1b565b60206040518083038185885af11580156105fb573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106209190612a7e565b50348110156106e25760003373ffffffffffffffffffffffffffffffffffffffff16823461064e9190612ada565b60405161065a90612b3f565b60006040518083038185875af1925050503d8060008114610697576040519150601f19603f3d011682016040523d82523d6000602084013e61069c565b606091505b50509050806106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d790612bb1565b60405180910390fd5b505b50610779565b6106f3858583610ec9565b8473ffffffffffffffffffffffffffffffffffffffff166369365c5282338787876040518663ffffffff1660e01b8152600401610734959493929190612a1b565b6020604051808303816000875af1158015610753573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107779190612a7e565b505b5050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632f80bb1d83856040518363ffffffff1660e01b81526004016107dd929190612c48565b6020604051808303816000875af11580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108209190612a7e565b905092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b8073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f00000000000000000000000000000000000000000000000000000000000000007f80000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004016108fb929190612cb3565b6020604051808303816000875af115801561091a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093e9190612d08565b5050565b6109bd8473ffffffffffffffffffffffffffffffffffffffff16635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b49190612942565b858585856112f4565b50505050565b600073b4272071ecadd69d933adcd19ca99fe80664fc0873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a3957610a15611240565b83610a1e6104dc565b610a289190612d35565b610a329190612dbe565b9050610a5e565b610a41611240565b6305f5e10084610a519190612d35565b610a5b9190612dbe565b90505b92915050565b60005b84849050811015610b4e578573ffffffffffffffffffffffffffffffffffffffff166323b872dd33878785818110610aa257610aa1612def565b5b9050602002016020810190610ab791906122a4565b868686818110610aca57610ac9612def565b5b905060200201356040518463ffffffff1660e01b8152600401610aef93929190612e1e565b6020604051808303816000875af1158015610b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b329190612d08565b610b3b57600080fd5b8080610b4690612e55565b915050610a67565b505050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610b91929190612e9e565b6020604051808303816000875af1158015610bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd49190612d08565b610bdd57600080fd5b505050565b6000600f905090565b60005b86869050811015610c5957610c4688888884818110610c1057610c0f612def565b5b9050602002016020810190610c2591906122a4565b878785818110610c3857610c37612def565b5b9050602002013586866112f4565b8080610c5190612e55565b915050610bee565b5050505050505050565b60008773ffffffffffffffffffffffffffffffffffffffff16635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd49190612942565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b8152600401610d119190612ec7565b602060405180830381865afa158015610d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d529190612a7e565b9050610d61888789888d611409565b5060008273ffffffffffffffffffffffffffffffffffffffff166370a082318b6040518263ffffffff1660e01b8152600401610d9d9190612ec7565b602060405180830381865afa158015610dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dde9190612a7e565b90508181610dec9190612ada565b8914610e2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2490612f2e565b60405180910390fd5b8973ffffffffffffffffffffffffffffffffffffffff166369365c5284338585610e579190612ada565b89896040518663ffffffff1660e01b8152600401610e79959493929190612a1b565b6020604051808303816000875af1158015610e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebc9190612a7e565b5050505050505050505050565b60006040518061010001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634aa4a4fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f669190612f63565b73ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001428152602001848152602001348152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060007f0000000000000000000000000000000000000000000000000000000000000000905060008173ffffffffffffffffffffffffffffffffffffffff1663db3e219834856040518363ffffffff1660e01b8152600401611056919061307d565b60206040518083038185885af1158015611074573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906110999190612a7e565b9050348110156111bc578173ffffffffffffffffffffffffffffffffffffffff166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156110eb57600080fd5b505af11580156110ff573d6000803e3d6000fd5b5050505060003373ffffffffffffffffffffffffffffffffffffffff1682346111289190612ada565b60405161113490612b3f565b60006040518083038185875af1925050503d8060008114611171576040519150601f19603f3d011682016040523d82523d6000602084013e611176565b606091505b50509050806111ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b190612bb1565b60405180910390fd5b505b505050505050565b6000816111cf610be2565b426111da9190613099565b1161121a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121190613161565b60405180910390fd5b81421080611239575061122b611880565b82426112379190612ada565b105b9050919050565b600061126b7f4554480000000000000000000000000000000000000000000000000000000000611889565b905090565b6000600460ff16600460ff168373ffffffffffffffffffffffffffffffffffffffff1663e06174e46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112eb9190612a7e565b16149050919050565b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd3386866040518463ffffffff1660e01b815260040161133193929190612e1e565b6020604051808303816000875af1158015611350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113749190612d08565b61137d57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff166369365c5286338686866040518663ffffffff1660e01b81526004016113be959493929190612a1b565b6020604051808303816000875af11580156113dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114019190612a7e565b505050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000090508473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161146c93929190612e1e565b6020604051808303816000875af115801561148b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114af9190612d08565b5060006040518060a001604052808681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018981526020018881525090508173ffffffffffffffffffffffffffffffffffffffff1663f28c0498826040518263ffffffff1660e01b815260040161152a9190613241565b6020604051808303816000875af1158015611549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156d9190612a7e565b925086831015611602578573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33858a6115a09190612ada565b6040518363ffffffff1660e01b81526004016115bd929190612e9e565b6020604051808303816000875af11580156115dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116009190612d08565b505b505095945050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015611650575061164f82611270565b5b156116d4576116cd838373ffffffffffffffffffffffffffffffffffffffff16635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c89190612942565b6109c3565b905061187a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166330d07f217f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634aa4a4fc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561177b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179f9190612f63565b8473ffffffffffffffffffffffffffffffffffffffff16635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180e9190612942565b610bb88760006040518663ffffffff1660e01b81526004016118349594939291906132ad565b6020604051808303816000875af1158015611853573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118779190612a7e565b90505b92915050565b600060b4905090565b600080600167ffffffffffffffff8111156118a7576118a66120f1565b5b6040519080825280602002602001820160405280156118d55781602001602082028036833780820191505090505b50905082816000815181106118ed576118ec612def565b5b60200260200101818152505061190281611925565b60008151811061191557611914612def565b5b6020026020010151915050919050565b60606000606136033590506000602060408360ff16611944919061330e565b61194e919061334a565b9050606060405190508181528160428301360360208301376020810160405260008180519060200120905060008160405160200161198c9190613404565b6040516020818303038152906040528051906020012090506060604051905060418152604180360360208301376020810160405260006119d58284611a8d90919063ffffffff16565b90506119e081610828565b611a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1690613476565b60405180910390fd5b600060623603359050611a31816111c4565b611a70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a67906134e2565b60405180910390fd5b611a7e8a8960ff1689611ab4565b98505050505050505050919050565b6000806000611a9c8585611b5a565b91509150611aa981611bdd565b819250505092915050565b6060806000806000806042870136035995508951865260208a51026020870101604052600094505b88851015611b4a57604085028101359150600093505b8951841015611b3f57816020850260208c0101511415611b275760206040860282010135602085026020880101526001830192505b8951831415611b34578894505b600184019350611af2565b600185019450611adc565b5084955050505050509392505050565b600080604183511415611b9c5760008060006020860151925060408601519150606086015160001a9050611b9087828585611db2565b94509450505050611bd6565b604083511415611bcd576000806020850151915060408501519050611bc2868383611ebf565b935093505050611bd6565b60006002915091505b9250929050565b60006004811115611bf157611bf0613502565b5b816004811115611c0457611c03613502565b5b1415611c0f57611daf565b60016004811115611c2357611c22613502565b5b816004811115611c3657611c35613502565b5b1415611c77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6e9061357d565b60405180910390fd5b60026004811115611c8b57611c8a613502565b5b816004811115611c9e57611c9d613502565b5b1415611cdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd6906135e9565b60405180910390fd5b60036004811115611cf357611cf2613502565b5b816004811115611d0657611d05613502565b5b1415611d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3e9061367b565b60405180910390fd5b600480811115611d5a57611d59613502565b5b816004811115611d6d57611d6c613502565b5b1415611dae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da59061370d565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115611ded576000600391509150611eb6565b601b8560ff1614158015611e055750601c8560ff1614155b15611e17576000600491509150611eb6565b600060018787878760405160008152602001604052604051611e3c9493929190613758565b6020604051602081039080840390855afa158015611e5e573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ead57600060019250925050611eb6565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c611f029190613099565b9050611f1087828885611db2565b935093505050935093915050565b6000819050919050565b611f3181611f1e565b82525050565b6000602082019050611f4c6000830184611f28565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f9182611f66565b9050919050565b6000611fa382611f86565b9050919050565b611fb381611f98565b8114611fbe57600080fd5b50565b600081359050611fd081611faa565b92915050565b611fdf81611f1e565b8114611fea57600080fd5b50565b600081359050611ffc81611fd6565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261202757612026612002565b5b8235905067ffffffffffffffff81111561204457612043612007565b5b6020830191508360018202830111156120605761205f61200c565b5b9250929050565b6000806000806060858703121561208157612080611f5c565b5b600061208f87828801611fc1565b94505060206120a087828801611fed565b935050604085013567ffffffffffffffff8111156120c1576120c0611f61565b5b6120cd87828801612011565b925092505092959194509250565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612129826120e0565b810181811067ffffffffffffffff82111715612148576121476120f1565b5b80604052505050565b600061215b611f52565b90506121678282612120565b919050565b600067ffffffffffffffff821115612187576121866120f1565b5b612190826120e0565b9050602081019050919050565b82818337600083830152505050565b60006121bf6121ba8461216c565b612151565b9050828152602081018484840111156121db576121da6120db565b5b6121e684828561219d565b509392505050565b600082601f83011261220357612202612002565b5b81356122138482602086016121ac565b91505092915050565b6000806040838503121561223357612232611f5c565b5b600061224185828601611fed565b925050602083013567ffffffffffffffff81111561226257612261611f61565b5b61226e858286016121ee565b9150509250929050565b61228181611f86565b811461228c57600080fd5b50565b60008135905061229e81612278565b92915050565b6000602082840312156122ba576122b9611f5c565b5b60006122c88482850161228f565b91505092915050565b60008115159050919050565b6122e6816122d1565b82525050565b600060208201905061230160008301846122dd565b92915050565b6000806000806060858703121561232157612320611f5c565b5b600061232f8782880161228f565b945050602061234087828801611fed565b935050604085013567ffffffffffffffff81111561236157612360611f61565b5b61236d87828801612011565b925092505092959194509250565b600061238682611f86565b9050919050565b6123968161237b565b81146123a157600080fd5b50565b6000813590506123b38161238d565b92915050565b600080604083850312156123d0576123cf611f5c565b5b60006123de85828601611fed565b92505060206123ef858286016123a4565b9150509250929050565b60008083601f84011261240f5761240e612002565b5b8235905067ffffffffffffffff81111561242c5761242b612007565b5b6020830191508360208202830111156124485761244761200c565b5b9250929050565b60008083601f84011261246557612464612002565b5b8235905067ffffffffffffffff81111561248257612481612007565b5b60208301915083602082028301111561249e5761249d61200c565b5b9250929050565b6000806000806000606086880312156124c1576124c0611f5c565b5b60006124cf888289016123a4565b955050602086013567ffffffffffffffff8111156124f0576124ef611f61565b5b6124fc888289016123f9565b9450945050604086013567ffffffffffffffff81111561251f5761251e611f61565b5b61252b8882890161244f565b92509250509295509295909350565b60008060006060848603121561255357612552611f5c565b5b6000612561868287016123a4565b93505060206125728682870161228f565b925050604061258386828701611fed565b9150509250925092565b60008060008060008060006080888a0312156125ac576125ab611f5c565b5b60006125ba8a828b016123a4565b975050602088013567ffffffffffffffff8111156125db576125da611f61565b5b6125e78a828b016123f9565b9650965050604088013567ffffffffffffffff81111561260a57612609611f61565b5b6126168a828b0161244f565b9450945050606088013567ffffffffffffffff81111561263957612638611f61565b5b6126458a828b01612011565b925092505092959891949750929550565b600080600080600080600060c0888a03121561267557612674611f5c565b5b60006126838a828b0161228f565b97505060206126948a828b01611fed565b96505060406126a58a828b0161228f565b95505060606126b68a828b01611fed565b945050608088013567ffffffffffffffff8111156126d7576126d6611f61565b5b6126e38a828b016121ee565b93505060a088013567ffffffffffffffff81111561270457612703611f61565b5b6127108a828b01612011565b925092505092959891949750929550565b60008060006060848603121561273a57612739611f5c565b5b60006127488682870161228f565b935050602061275986828701611fed565b925050604061276a868287016123a4565b9150509250925092565b60006020828403121561278a57612789611f5c565b5b600061279884828501611fed565b91505092915050565b6000602082840312156127b7576127b6611f5c565b5b60006127c584828501611fc1565b91505092915050565b6000806000806000608086880312156127ea576127e9611f5c565b5b60006127f8888289016123a4565b95505060206128098882890161228f565b945050604061281a88828901611fed565b935050606086013567ffffffffffffffff81111561283b5761283a611f61565b5b61284788828901612011565b92509250509295509295909350565b600080600080600060a0868803121561287257612871611f5c565b5b600061288088828901611fed565b955050602061289188828901611fed565b94505060406128a28882890161228f565b935050606086013567ffffffffffffffff8111156128c3576128c2611f61565b5b6128cf888289016121ee565b92505060806128e08882890161228f565b9150509295509295909350565b6000806040838503121561290457612903611f5c565b5b600061291285828601611fed565b925050602061292385828601611fc1565b9150509250929050565b60008151905061293c8161238d565b92915050565b60006020828403121561295857612957611f5c565b5b60006129668482850161292d565b91505092915050565b6000819050919050565b600061299461298f61298a84611f66565b61296f565b611f66565b9050919050565b60006129a682612979565b9050919050565b60006129b88261299b565b9050919050565b6129c8816129ad565b82525050565b6129d781611f86565b82525050565b600082825260208201905092915050565b60006129fa83856129dd565b9350612a0783858461219d565b612a10836120e0565b840190509392505050565b6000608082019050612a3060008301886129bf565b612a3d60208301876129ce565b612a4a6040830186611f28565b8181036060830152612a5d8184866129ee565b90509695505050505050565b600081519050612a7881611fd6565b92915050565b600060208284031215612a9457612a93611f5c565b5b6000612aa284828501612a69565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612ae582611f1e565b9150612af083611f1e565b925082821015612b0357612b02612aab565b5b828203905092915050565b600081905092915050565b50565b6000612b29600083612b0e565b9150612b3482612b19565b600082019050919050565b6000612b4a82612b1c565b9150819050919050565b600082825260208201905092915050565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b6000612b9b601083612b54565b9150612ba682612b65565b602082019050919050565b60006020820190508181036000830152612bca81612b8e565b9050919050565b600081519050919050565b60005b83811015612bfa578082015181840152602081019050612bdf565b83811115612c09576000848401525b50505050565b6000612c1a82612bd1565b612c2481856129dd565b9350612c34818560208601612bdc565b612c3d816120e0565b840191505092915050565b60006040820190508181036000830152612c628185612c0f565b9050612c716020830184611f28565b9392505050565b6000819050919050565b6000612c9d612c98612c9384612c78565b61296f565b611f1e565b9050919050565b612cad81612c82565b82525050565b6000604082019050612cc860008301856129ce565b612cd56020830184612ca4565b9392505050565b612ce5816122d1565b8114612cf057600080fd5b50565b600081519050612d0281612cdc565b92915050565b600060208284031215612d1e57612d1d611f5c565b5b6000612d2c84828501612cf3565b91505092915050565b6000612d4082611f1e565b9150612d4b83611f1e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612d8457612d83612aab565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612dc982611f1e565b9150612dd483611f1e565b925082612de457612de3612d8f565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000606082019050612e3360008301866129ce565b612e4060208301856129ce565b612e4d6040830184611f28565b949350505050565b6000612e6082611f1e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612e9357612e92612aab565b5b600182019050919050565b6000604082019050612eb360008301856129ce565b612ec06020830184611f28565b9392505050565b6000602082019050612edc60008301846129ce565b92915050565b7f73776170206572726f7200000000000000000000000000000000000000000000600082015250565b6000612f18600a83612b54565b9150612f2382612ee2565b602082019050919050565b60006020820190508181036000830152612f4781612f0b565b9050919050565b600081519050612f5d81612278565b92915050565b600060208284031215612f7957612f78611f5c565b5b6000612f8784828501612f4e565b91505092915050565b612f9981611f86565b82525050565b600062ffffff82169050919050565b612fb781612f9f565b82525050565b612fc681611f1e565b82525050565b612fd581611f66565b82525050565b61010082016000820151612ff26000850182612f90565b5060208201516130056020850182612f90565b5060408201516130186040850182612fae565b50606082015161302b6060850182612f90565b50608082015161303e6080850182612fbd565b5060a082015161305160a0850182612fbd565b5060c082015161306460c0850182612fbd565b5060e082015161307760e0850182612fcc565b50505050565b6000610100820190506130936000830184612fdb565b92915050565b60006130a482611f1e565b91506130af83611f1e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156130e4576130e3612aab565b5b828201905092915050565b7f446174612077697468206675747572652074696d657374616d7073206973206e60008201527f6f7420616c6c6f77656400000000000000000000000000000000000000000000602082015250565b600061314b602a83612b54565b9150613156826130ef565b604082019050919050565b6000602082019050818103600083015261317a8161313e565b9050919050565b600082825260208201905092915050565b600061319d82612bd1565b6131a78185613181565b93506131b7818560208601612bdc565b6131c0816120e0565b840191505092915050565b600060a08301600083015184820360008601526131e88282613192565b91505060208301516131fd6020860182612f90565b5060408301516132106040860182612fbd565b5060608301516132236060860182612fbd565b5060808301516132366080860182612fbd565b508091505092915050565b6000602082019050818103600083015261325b81846131cb565b905092915050565b61326c81612f9f565b82525050565b6000819050919050565b600061329761329261328d84613272565b61296f565b611f66565b9050919050565b6132a78161327c565b82525050565b600060a0820190506132c260008301886129ce565b6132cf60208301876129ce565b6132dc6040830186613263565b6132e96060830185611f28565b6132f6608083018461329e565b9695505050505050565b600061ffff82169050919050565b600061331982613300565b915061332483613300565b92508161ffff048311821515161561333f5761333e612aab565b5b828202905092915050565b600061335582613300565b915061336083613300565b92508261ffff0382111561337757613376612aab565b5b828201905092915050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006133c3601c83613382565b91506133ce8261338d565b601c82019050919050565b6000819050919050565b6000819050919050565b6133fe6133f9826133d9565b6133e3565b82525050565b600061340f826133b6565b915061341b82846133ed565b60208201915081905092915050565b7f5369676e6572206e6f7420617574686f72697a65640000000000000000000000600082015250565b6000613460601583612b54565b915061346b8261342a565b602082019050919050565b6000602082019050818103600083015261348f81613453565b9050919050565b7f446174612074696d657374616d7020697320696e76616c696400000000000000600082015250565b60006134cc601983612b54565b91506134d782613496565b602082019050919050565b600060208201905081810360008301526134fb816134bf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000613567601883612b54565b915061357282613531565b602082019050919050565b600060208201905081810360008301526135968161355a565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006135d3601f83612b54565b91506135de8261359d565b602082019050919050565b60006020820190508181036000830152613602816135c6565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000613665602283612b54565b915061367082613609565b604082019050919050565b6000602082019050818103600083015261369481613658565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006136f7602283612b54565b91506137028261369b565b604082019050919050565b60006020820190508181036000830152613726816136ea565b9050919050565b613736816133d9565b82525050565b600060ff82169050919050565b6137528161373c565b82525050565b600060808201905061376d600083018761372d565b61377a6020830186613749565b613787604083018561372d565b613794606083018461372d565b9594505050505056fea2646970667358221220293649cbdf9c00e0e69ce0674c520909018b64fc1b008b9042e3d71f7d5b962464736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveERC20(address)": {
        "details": "This function needs to be called before using the PaymentHub the first time with a new ERC20 token.",
        "params": {
          "erc20In": "The erc20 addresse to approve."
        }
      },
      "getPriceInEther(uint256,address)": {
        "returns": {
          "_0": "The price in wei."
        }
      },
      "payFromERC20(uint256,uint256,address,bytes,address)": {
        "details": "The calling address must approve this contract to spend its ERC20 for this function to succeed. As the amount of input ERC20 is variable, the calling address will need to approve for a slightly higher or infinit amount, anticipating some variance.",
        "params": {
          "amountInMaximum": "The maximum amount of ERC20 willing to be swapped for the specified amountOut of baseCurrency.",
          "amountOut": "The desired amount of baseCurrency.",
          "erc20In": "The address of the erc20 token to pay with.",
          "path": "The encoded path of the swap from erc20 to base.",
          "recipient": "The reciving address - brokerbot."
        },
        "returns": {
          "amountIn": "The amountIn of ERC20 actually spent to receive the desired amountOut."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveERC20(address)": {
        "notice": "This function appoves infinite allowance for Uniswap, this is safe as the paymenthub should never hold any token (see also recover() )."
      },
      "getLatestPriceCHFUSD()": {
        "notice": "Returns the latest price of chf/usd pair from redstoneainlink with 8 decimals"
      },
      "getLatestPriceETHUSD()": {
        "notice": "Returns the latest price of eth/usd pair from chainlink with 8 decimals"
      },
      "getPriceInEther(uint256,address)": {
        "notice": "Get price in Ether depding on brokerbot setting. If keep ETH is set price is from oracle. This is the method that the Brokerbot widget should use to quote the price to the user."
      },
      "getPriceInEtherFromOracle(uint256,address)": {
        "notice": "Price in ETH with 18 decimals"
      },
      "hasSettingKeepEther(address)": {
        "notice": "Checks if the recipient(brokerbot) has setting enabled to keep ether"
      },
      "multiPayAndNotify(address,address[],uint256[],bytes)": {
        "notice": "Can (at least in theory) save some gas as the sender balance only is touched in one transaction."
      },
      "payFromEther(address,uint256,address)": {
        "notice": "Convenience method to swap ether into base and pay a target address"
      },
      "recover(address,address,uint256)": {
        "notice": "In case tokens have been accidentally sent directly to this contract. Make sure to be fast as anyone can call this!"
      }
    },
    "notice": "A hub for payments. This allows tokens that do not support ERC 677 to enjoy similar functionality, namely interacting with a token-handling smart contract in one transaction, without having to set an allowance first. Instead, an allowance needs to be set only once, namely for this contract. Further, it supports automatic conversion from Ether to the payment currency through Uniswap or the reception of Ether using the current exchange rate as found in the chainlink oracle.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}