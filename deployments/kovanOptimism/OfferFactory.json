{
  "address": "0x4B28071E90245DC4e13Aa495684fd4f3BA8B7cE2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pricePerShare",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votePeriod",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "contract IOffer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "contract IDraggable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pricePerShare",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votePeriod",
          "type": "uint256"
        }
      ],
      "name": "predictOfferAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1712edce35c7a5b3c83285a36aacd6165e2bf012a1fc90123823a413c07ee692",
  "receipt": {
    "to": null,
    "from": "0xbB3c2C7D631E94bdf279302CEA8DBbE42fB23A74",
    "contractAddress": "0x4B28071E90245DC4e13Aa495684fd4f3BA8B7cE2",
    "transactionIndex": 0,
    "gasUsed": "1724290",
    "logsBloom": "0x
    "blockHash": "0x6b32a96be15cc138ca909699ec847eb45cc13855ab4e6ff6e074f73e60be56ba",
    "transactionHash": "0x1712edce35c7a5b3c83285a36aacd6165e2bf012a1fc90123823a413c07ee692",
    "logs": [],
    "blockNumber": 1694589,
    "cumulativeGasUsed": "1724290",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6f144dc76d70c194e9110ed3cc8bb233",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votePeriod\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract IOffer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"contract IDraggable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votePeriod\",\"type\":\"uint256\"}],\"name\":\"predictOfferAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/draggable/OfferFactory.sol\":\"OfferFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/ERC20/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0x2224189bcdeb28cbadfdb8d126c278df60ec39875c7929e7ffa9e2055cded960\",\"license\":\"MIT\"},\"src/draggable/IDraggable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\ninterface IDraggable {\\n    \\n    function oracle() external view returns (address);\\n    function drag(address buyer, IERC20 currency) external;\\n    function notifyOfferEnded() external;\\n    function votingPower(address voter) external returns (uint256);\\n    function totalVotingTokens() external view returns (uint256);\\n    function notifyVoted(address voter) external;\\n\\n}\",\"keccak256\":\"0xf2c6e6dfbd3d1694b17def3b3daee91a418ec17fcf49a8d7ba525058894b60ad\",\"license\":\"MIT\"},\"src/draggable/IOffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ninterface IOffer {\\n\\tfunction makeCompetingOffer(IOffer newOffer) external;\\n\\n\\t// if there is a token transfer while an offer is open, the votes get transfered too\\n\\tfunction notifyMoved(address from, address to, uint256 value) external;\\n\\n\\tfunction currency() external view returns (IERC20);\\n\\n\\tfunction price() external view returns (uint256);\\n\\n\\tfunction isWellFunded() external view returns (bool);\\n}\",\"keccak256\":\"0xac6f70c3e8b5cbae464cbf39ffcd16035bd77104982695ef255bd11418bf8826\",\"license\":\"MIT\"},\"src/draggable/IOfferFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\n\\ninterface IOfferFactory {\\n\\n\\tfunction create(\\n\\t\\tbytes32 salt, address buyer, uint256 pricePerShare,\\tIERC20 currency,\\tuint256 quorum,\\tuint256 votePeriod\\n\\t) external payable returns (IOffer);\\n}\",\"keccak256\":\"0x048511f24b8e4278df38ee6f5fb038d53a7964cc90761780fb1ebb2e7825a532\",\"license\":\"MIT\"},\"src/draggable/Offer.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2020 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IDraggable.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\n/**\\n * @title A public offer to acquire all tokens\\n * @author Luzius Meisser, luzius@aktionariat.com\\n */\\n\\ncontract Offer is IOffer {\\n\\n    address private constant LICENSE_FEE_ADDRESS = 0x29Fe8914e76da5cE2d90De98a64d0055f199d06D;\\n\\n    uint256 private constant AQUISITION_GRACE_PERIOD = 30 days;     // buyer has thirty days to complete acquisition after voting ends\\n    \\n    uint256 private constant BPS_MUL = 10000;           // basis point multiplier to be used with quorum\\n\\n    uint256 public immutable quorum;                    // Percentage of votes needed to start drag-along process in BPS, i.e. 10'000 = 100%\\n\\n    IDraggable public immutable token;\\n    address public immutable buyer;                     // who made the offer\\n    \\n    IERC20 override public immutable currency;\\n    uint256 override public immutable price;            // the price offered per share\\n\\n    enum Vote { NONE, YES, NO }                         // Used internally, represents not voted yet or yes/no vote.\\n    mapping (address => Vote) private votes;            // Who votes what\\n    uint256 public yesVotes;                            // total number of yes votes, including external votes\\n    uint256 public noVotes;                             // total number of no votes, including external votes\\n    uint256 public noExternal;                          // number of external no votes reported by oracle\\n    uint256 public yesExternal;                         // number of external yes votes reported by oracle\\n\\n    uint256 public immutable voteEnd;                   // end of vote period in block time (seconds after 1.1.1970)\\n\\n    event VotesChanged(uint256 yesVotes, uint256 noVotes);\\n    event OfferCreated(address indexed buyer, IDraggable indexed token, uint256 pricePerShare, IERC20 indexed currency);\\n    event OfferEnded(address indexed buyer, bool indexed success, string message);\\n\\n    // Not checked here, but buyer should make sure it is well funded from the beginning\\n    constructor(\\n        address _buyer,\\n        IDraggable _token,\\n        uint256 _price,\\n        IERC20 _currency,\\n        uint256 _quorum,\\n        uint256 _votePeriod\\n    ) \\n        payable \\n    {\\n        buyer = _buyer;\\n        token = _token;\\n        currency = _currency;\\n        price = _price;\\n        quorum = _quorum;\\n        // rely on time stamp is ok, no exact time stamp needed\\n        // solhint-disable-next-line not-rely-on-time\\n        voteEnd = block.timestamp + _votePeriod;\\n        emit OfferCreated(_buyer, _token, _price, _currency);\\n        // License Fee to Aktionariat AG, also ensures that offer is serious.\\n        // Any circumvention of this license fee payment is a violation of the copyright terms.\\n        payable(LICENSE_FEE_ADDRESS).transfer(3 ether);\\n    }\\n\\n    function makeCompetingOffer(IOffer betterOffer) external override {\\n        require(msg.sender == address(token), \\\"invalid caller\\\");\\n        require(!isAccepted(), \\\"old already accepted\\\");\\n        require(currency == betterOffer.currency() && betterOffer.price() > price, \\\"old offer better\\\");\\n        require(betterOffer.isWellFunded(), \\\"not funded\\\");\\n        kill(false, \\\"replaced\\\");\\n    }\\n\\n    function hasExpired() internal view returns (bool) {\\n        // rely on time stamp is ok, no exact time stamp needed\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp > voteEnd + AQUISITION_GRACE_PERIOD; \\n    }\\n\\n    function contest() external {\\n        if (hasExpired()) {\\n            kill(false, \\\"expired\\\");\\n        } else if (isDeclined()) {\\n            kill(false, \\\"declined\\\");\\n        } else if (!isWellFunded()) {\\n            kill(false, \\\"lack of funds\\\");\\n        }\\n    }\\n\\n    function cancel() external {\\n        require(msg.sender == buyer, \\\"invalid caller\\\");\\n        kill(false, \\\"cancelled\\\");\\n    }\\n\\n    function execute() external {\\n        require(msg.sender == buyer, \\\"not buyer\\\");\\n        require(isAccepted(), \\\"not accepted\\\");\\n        uint256 totalPrice = getTotalPrice();\\n        require(currency.transferFrom(buyer, address(token), totalPrice), \\\"transfer failed\\\");\\n        token.drag(buyer, currency);\\n        kill(true, \\\"success\\\");\\n    }\\n\\n    function getTotalPrice() internal view returns (uint256) {\\n        IERC20 tok = IERC20(address(token));\\n        return (tok.totalSupply() - tok.balanceOf(buyer)) * price;\\n    }\\n\\n    function isWellFunded() public view override returns (bool) {\\n        uint256 buyerBalance = currency.balanceOf(buyer);\\n        uint256 totalPrice = getTotalPrice();\\n        return totalPrice <= buyerBalance;\\n    }\\n\\n    function isAccepted() public view returns (bool) {\\n        if (isVotingOpen()) {\\n            // is it already clear that more than the quorum requiered will vote yes even though the vote is not over yet?\\n            return yesVotes * BPS_MUL  >= quorum * token.totalVotingTokens();\\n        } else {\\n            // did more than the quorum requiered votes say 'yes'?\\n            return yesVotes * BPS_MUL >= quorum * (yesVotes + noVotes);\\n        }\\n    }\\n\\n    function isDeclined() public view returns (bool) {\\n        if (isVotingOpen()) {\\n            // is it already clear that 25% will vote no even though the vote is not over yet?\\n            uint256 supply = token.totalVotingTokens();\\n            return (supply - noVotes) * BPS_MUL < quorum * supply;\\n        } else {\\n            // did quorum% of all cast votes say 'no'?\\n            return BPS_MUL * yesVotes < quorum * (yesVotes + noVotes);\\n        }\\n    }\\n\\n    function notifyMoved(address from, address to, uint256 value) external override {\\n        require(msg.sender == address(token), \\\"invalid caller\\\");\\n        if (isVotingOpen()) {\\n            Vote fromVoting = votes[from];\\n            Vote toVoting = votes[to];\\n            update(fromVoting, toVoting, value);\\n        }\\n    }\\n\\n    function update(Vote previousVote, Vote newVote, uint256 votes_) internal {\\n        if (previousVote != newVote) {\\n            if (previousVote == Vote.NO) {\\n                noVotes -= votes_;\\n            } else if (previousVote == Vote.YES) {\\n                yesVotes -= votes_;\\n            }\\n            if (newVote == Vote.NO) {\\n                noVotes += votes_;\\n            } else if (newVote == Vote.YES) {\\n                yesVotes += votes_;\\n            }\\n            emit VotesChanged(yesVotes, noVotes);\\n        }\\n    }\\n\\n    function isVotingOpen() public view returns (bool) {\\n        // rely on time stamp is ok, no exact time stamp needed\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp <= voteEnd;\\n    }\\n\\n    modifier votingOpen() {\\n        require(isVotingOpen(), \\\"vote ended\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Function to allow the oracle to report the votes of external votes (e.g. shares tokenized on other blockchains).\\n     * This functions is idempotent and sets the number of external yes and no votes. So when more votes come in, the\\n     * oracle should always report the total number of yes and no votes. Abstentions are not counted.\\n     */\\n    function reportExternalVotes(uint256 yes, uint256 no) external {\\n        require(msg.sender == token.oracle(), \\\"not oracle\\\");\\n        require(yes + no + IERC20(address(token)).totalSupply() <= token.totalVotingTokens(), \\\"too many votes\\\");\\n        // adjust total votes taking into account that the oralce might have reported different counts before\\n        yesVotes = yesVotes - yesExternal + yes;\\n        noVotes = noVotes - noExternal + no;\\n        // remember how the oracle voted in case the oracle later reports updated numbers\\n        yesExternal = yes;\\n        noExternal = no;\\n    }\\n\\n    function voteYes() external {\\n        vote(Vote.YES);\\n    }\\n\\n    function voteNo() external { \\n        vote(Vote.NO);\\n    }\\n\\n    function vote(Vote newVote) internal votingOpen() {\\n        Vote previousVote = votes[msg.sender];\\n        votes[msg.sender] = newVote;\\n        if(previousVote == Vote.NONE){\\n            token.notifyVoted(msg.sender);\\n        }\\n        update(previousVote, newVote, token.votingPower(msg.sender));\\n    }\\n\\n    function hasVotedYes(address voter) external view returns (bool) {\\n        return votes[voter] == Vote.YES;\\n    }\\n\\n    function hasVotedNo(address voter) external view returns (bool) {\\n        return votes[voter] == Vote.NO;\\n    }\\n\\n    function kill(bool success, string memory message) internal {\\n        emit OfferEnded(buyer, success, message);\\n        token.notifyOfferEnded();\\n        selfdestruct(payable(buyer));\\n    }\\n\\n}\",\"keccak256\":\"0xf0a547f1a7bc3cf1ab57cd268cae3f7442268ac213d8bcd8a09dc48a80842680\",\"license\":\"LicenseRef-Aktionariat\"},\"src/draggable/OfferFactory.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2020 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Offer.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\nimport \\\"./IOfferFactory.sol\\\";\\n\\ncontract OfferFactory is IOfferFactory{\\n\\n    // It must be possible to predict the address of the offer so one can pre-fund the allowance.\\n    function predictOfferAddress(bytes32 salt, address buyer, IDraggable token, uint256 pricePerShare, IERC20 currency, uint256 quorum, uint256 votePeriod) external view returns (address) {\\n        bytes32 initCodeHash = keccak256(abi.encodePacked(type(Offer).creationCode, abi.encode(buyer, token, pricePerShare, currency, quorum, votePeriod)));\\n        bytes32 hashResult = keccak256(abi.encodePacked(bytes1(0xff), address(this), salt, initCodeHash));\\n        return address(uint160(uint256(hashResult)));\\n    }\\n\\n    // Do not call directly, msg.sender must be the token to be acquired\\n    function create(bytes32 salt, address buyer, uint256 pricePerShare, IERC20 currency, uint256 quorum, uint256 votePeriod) override external payable returns (IOffer) {\\n        IOffer offer = new Offer{value: msg.value, salt: salt}(buyer, IDraggable(msg.sender), pricePerShare, currency, quorum, votePeriod);\\n        return offer;\\n    }\\n}\",\"keccak256\":\"0x3b57e219ea638816d7f883228b046342001475c8765c5445f2f3e2d4d350ebc2\",\"license\":\"LicenseRef-Aktionariat\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611e85806100206000396000f3fe6080604052600436106100295760003560e01c8063452784bc1461002e5780634dc5e4311461006a575b600080fd5b34801561003a57600080fd5b5061004e6100493660046101c7565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e610078366004610238565b61014e565b60008060405180602001610090906101a2565b601f1982820381018352601f9091011660408190526100bd908a908a908a908a908a908a90602001610294565b60408051601f19818403018152908290526100db9291602001610309565b60408051601f1981840301815282825280516020918201206001600160f81b0319828501523060601b6bffffffffffffffffffffffff19166021850152603584019c909c5260558084019c909c528151808403909c018c5260759092019052895199019890982098975050505050505050565b600080348890883389898989604051610166906101a2565b61017596959493929190610294565b82906040518091039083f591505080158015610195573d6000803e3d6000fd5b5098975050505050505050565b611b298061032783390190565b6001600160a01b03811681146101c457600080fd5b50565b600080600080600080600060e0888a0312156101e257600080fd5b8735965060208801356101f4816101af565b95506040880135610204816101af565b945060608801359350608088013561021b816101af565b9699959850939692959460a0840135945060c09093013592915050565b60008060008060008060c0878903121561025157600080fd5b863595506020870135610263816101af565b945060408701359350606087013561027a816101af565b9598949750929560808101359460a0909101359350915050565b6001600160a01b0396871681529486166020860152604085019390935293166060830152608082019290925260a081019190915260c00190565b6000815160005b818110156102ef57602081850181015186830152016102d5565b818111156102fe576000828601525b509290920192915050565b600061031e61031883866102ce565b846102ce565b94935050505056fe61014060405260405162001b2938038062001b2983398101604081905262000027916200010c565b6001600160a01b0380871660c05285811660a052831660e05261010084905260808290526200005781426200017c565b610120526040518481526001600160a01b0380851691878216918916907f4f05be72ad7f57c27e555ace8452f56d8b1e82c9e6e1cd4fd282f34518b7729a9060200160405180910390a46040517329fe8914e76da5ce2d90de98a64d0055f199d06d906000906729a2241af62c00009082818181858883f19350505050158015620000e6573d6000803e3d6000fd5b50505050505050620001a3565b6001600160a01b03811681146200010957600080fd5b50565b60008060008060008060c087890312156200012657600080fd5b86516200013381620000f3565b60208801519096506200014681620000f3565b6040880151606089015191965094506200016081620000f3565b809350506080870151915060a087015190509295509295509295565b600082198211156200019e57634e487b7160e01b600052601160045260246000fd5b500190565b60805160a05160c05160e051610100516101205161183a620002ef60003960008181610298015281816103190152818161047f0152818161085201528181610c4f015281816111db01526115ee01526000818161025501528181610f0301526110ef0152600081816102da015281816103b40152818161069e0152818161078a0152610ed10152600081816101f30152818161038701528181610582015281816106440152818161076201528181610d67015281816110a20152818161139f015261147301526000818161034e015281816104a60152818161066c015281816107b20152818161087b0152818161099a01528181610a6901528181610aeb01528181610c1001528181610ddb015281816110cd0152818161129a01528181611324015261140001526000818161017e0152818161052c01528181610903015261095f015261183a6000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063a035b1fe116100c3578063e5a6b10f1161007c578063e5a6b10f146102d5578063ea8a1af0146102fc578063f6c8c41e14610304578063fa7f1bae14610317578063fb286c6514610340578063fc0c546a1461034957600080fd5b8063a035b1fe14610250578063b5b47f4214610277578063bd3bc1d314610280578063ddbe8f0914610293578063e1a1810f146102ba578063e3ac83da146102cd57600080fd5b80635051a5ec116101155780635051a5ec146101de57806361461954146101e65780637150d8ae146101ee5780638f1b4c6f1461022d57806390cf581c146102405780639b4e88aa1461024857600080fd5b806311a439a01461015d5780631703a01814610179578063354e5629146101a05780633f5e3e7f146101a957806341c12a70146101c1578063448ab4c6146101cb575b600080fd5b61016660045481565b6040519081526020015b60405180910390f35b6101667f000000000000000000000000000000000000000000000000000000000000000081565b61016660035481565b6101b1610370565b6040519015158152602001610170565b6101c9610436565b005b6101b16101d936600461162e565b610442565b6101b161047b565b6101c9610577565b6102157f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610170565b6101b161023b36600461162e565b61083b565b6101c9610844565b6101b161084e565b6101667f000000000000000000000000000000000000000000000000000000000000000081565b61016660025481565b6101c961028e366004611652565b610998565b6101667f000000000000000000000000000000000000000000000000000000000000000081565b6101c96102c8366004611674565b610c05565b6101c9610cb1565b6102157f000000000000000000000000000000000000000000000000000000000000000081565b6101c9610d5c565b6101c961031236600461162e565b610dd0565b7f00000000000000000000000000000000000000000000000000000000000000004211156101b1565b61016660015481565b6102157f000000000000000000000000000000000000000000000000000000000000000081565b6040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156103fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041f91906116b5565b9050600061042b61108b565b919091111592915050565b61044060026111d9565b565b600060015b6001600160a01b03831660009081526020819052604090205460ff166002811115610474576104746116ce565b1492915050565b60007f00000000000000000000000000000000000000000000000000000000000000004211610567577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610502573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052691906116b5565b610550907f00000000000000000000000000000000000000000000000000000000000000006116fa565b61271060015461056091906116fa565b1015905090565b6002546001546105269190611719565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105e05760405162461bcd60e51b81526020600482015260096024820152683737ba10313abcb2b960b91b60448201526064015b60405180910390fd5b6105e861047b565b6106235760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd081858d8d95c1d195960a21b60448201526064016105d7565b600061062d61108b565b6040516323b872dd60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152604482018390529192507f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303816000875af11580156106e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070d9190611731565b61074b5760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b60448201526064016105d7565b604051637e5bcd3f60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063fcb79a7e90604401600060405180830381600087803b1580156107f657600080fd5b505af115801561080a573d6000803e3d6000fd5b505050506108386001604051806040016040528060078152602001667375636365737360c81b81525061139a565b50565b60006002610447565b61044060016111d9565b60007f000000000000000000000000000000000000000000000000000000000000000042116109495760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fb91906116b5565b9050610927817f00000000000000000000000000000000000000000000000000000000000000006116fa565b612710600254836109389190611753565b61094291906116fa565b1091505090565b6002546001546109599190611719565b610983907f00000000000000000000000000000000000000000000000000000000000000006116fa565b600154610992906127106116fa565b10905090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a919061176a565b6001600160a01b0316336001600160a01b031614610a675760405162461bcd60e51b815260206004820152600a6024820152696e6f74206f7261636c6560b01b60448201526064016105d7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae991906116b5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6b91906116b5565b610b758385611719565b610b7f9190611719565b1115610bbe5760405162461bcd60e51b815260206004820152600e60248201526d746f6f206d616e7920766f74657360901b60448201526064016105d7565b81600454600154610bcf9190611753565b610bd99190611719565b6001556003546002548291610bed91611753565b610bf79190611719565b600255600491909155600355565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c4d5760405162461bcd60e51b81526004016105d790611787565b7f00000000000000000000000000000000000000000000000000000000000000004211610cac576001600160a01b0380841660009081526020819052604080822054928516825290205460ff9182169116610ca982828561149d565b50505b505050565b610cb96115e3565b15610ce857610440600060405180604001604052806007815260200166195e1c1a5c995960ca1b81525061139a565b610cf061084e565b15610d2057610440600060405180604001604052806008815260200167191958db1a5b995960c21b81525061139a565b610d28610370565b6104405761044060006040518060400160405280600d81526020016c6c61636b206f662066756e647360981b81525061139a565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610da45760405162461bcd60e51b81526004016105d790611787565b61044060006040518060400160405280600981526020016818d85b98d95b1b195960ba1b81525061139a565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e185760405162461bcd60e51b81526004016105d790611787565b610e2061047b565b15610e645760405162461bcd60e51b81526020600482015260146024820152731bdb1908185b1c9958591e481858d8d95c1d195960621b60448201526064016105d7565b806001600160a01b031663e5a6b10f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec6919061176a565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316148015610f8657507f0000000000000000000000000000000000000000000000000000000000000000816001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8491906116b5565b115b610fc55760405162461bcd60e51b815260206004820152601060248201526f37b6321037b33332b9103132ba3a32b960811b60448201526064016105d7565b806001600160a01b0316633f5e3e7f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611003573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110279190611731565b6110605760405162461bcd60e51b815260206004820152600a6024820152691b9bdd08199d5b99195960b21b60448201526064016105d7565b6108386000604051806040016040528060088152602001671c995c1b1858d95960c21b81525061139a565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000091908316906370a0823190602401602060405180830381865afa158015611139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115d91906116b5565b826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561119b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bf91906116b5565b6111c99190611753565b6111d391906116fa565b91505090565b7f00000000000000000000000000000000000000000000000000000000000000004211156112365760405162461bcd60e51b815260206004820152600a6024820152691d9bdd1948195b99195960b21b60448201526064016105d7565b336000908152602081905260409020805460ff811691839160ff19166001836002811115611266576112666116ce565b0217905550600081600281111561127f5761127f6116ce565b14156112ff576040516345c8a62b60e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906345c8a62b90602401600060405180830381600087803b1580156112e657600080fd5b505af11580156112fa573d6000803e3d6000fd5b505050505b60405163603a39fb60e11b815233600482015261139690829084906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c07473f6906024016020604051808303816000875af115801561136d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139191906116b5565b61149d565b5050565b8115157f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167fba01adb1638f647e6baa43cb5d8d3a05ed7e59ac18415bf4c64adba235c5b2b0836040516113f691906117af565b60405180910390a37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166332bc320b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561145957600080fd5b505af115801561146d573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316ff5b8160028111156114af576114af6116ce565b8360028111156114c1576114c16116ce565b14610cac5760028360028111156114da576114da6116ce565b14156114fd5780600260008282546114f29190611753565b9091555061152f9050565b6001836002811115611511576115116116ce565b141561152f5780600160008282546115299190611753565b90915550505b6002826002811115611543576115436116ce565b141561156657806002600082825461155b9190611719565b909155506115989050565b600182600281111561157a5761157a6116ce565b14156115985780600160008282546115929190611719565b90915550505b7f8fcc50c2c4edd06d51ae66e9e21ed76b32a1766c57f491788e1aa24a1b58c2566001546002546040516115d6929190918252602082015260400190565b60405180910390a1505050565b600061161262278d007f0000000000000000000000000000000000000000000000000000000000000000611719565b4211905090565b6001600160a01b038116811461083857600080fd5b60006020828403121561164057600080fd5b813561164b81611619565b9392505050565b6000806040838503121561166557600080fd5b50508035926020909101359150565b60008060006060848603121561168957600080fd5b833561169481611619565b925060208401356116a481611619565b929592945050506040919091013590565b6000602082840312156116c757600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611714576117146116e4565b500290565b6000821982111561172c5761172c6116e4565b500190565b60006020828403121561174357600080fd5b8151801515811461164b57600080fd5b600082821015611765576117656116e4565b500390565b60006020828403121561177c57600080fd5b815161164b81611619565b6020808252600e908201526d34b73b30b634b21031b0b63632b960911b604082015260600190565b600060208083528351808285015260005b818110156117dc578581018301518582016040015282016117c0565b818111156117ee576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220b49ec25fee89ff3830d0260b48caeeb222840bfc5f489c5d9e6e7086fd27007764736f6c634300080c0033a2646970667358221220d94dd3f047fb060c952adb614a50f563b1ef78cfea160e48d3325d6a76b7e47464736f6c634300080c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}