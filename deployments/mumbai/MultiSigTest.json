{
  "address": "0xDC6715b0d5ad3AdD9e9Bd4b2c49df2BB220AD44A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "cosignaturesNeeded",
          "type": "uint8"
        }
      ],
      "name": "SignerChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "signers",
          "type": "address[]"
        }
      ],
      "name": "Transacted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_INCREASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "checkExecution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "nonce",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "checkSignatures",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractId",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "nonce",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "nonce",
          "type": "uint128"
        }
      ],
      "name": "isFree",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "cosignaturesNeeded",
          "type": "uint8"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signerCount",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signers",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "verifySignatures",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa3b1171292ef30c420a4de5f3103579cfe0440b5e257faf4dc2d92866b0ee82e",
  "receipt": {
    "to": null,
    "from": "0x39E5351E6CE3c4B19B8b0a2F5C82c511782457BE",
    "contractAddress": "0xDC6715b0d5ad3AdD9e9Bd4b2c49df2BB220AD44A",
    "transactionIndex": 5,
    "gasUsed": "1790887",
    "logsBloom": "0x000000000000000200000400000100000000000000000000000000000000000000000000000000000000000000000000000080000000000000200000000000000000000000000000000000000000008000000000000000000001000000000000000000000000000000008000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000840002000000000000000a0000000000000000001100000000400000000000000004000000000000000000001000000000000000000000008000000100000000000000000000000000000000000000000000001040000000000000000000000100000",
    "blockHash": "0xeaf176efbcd82c6b9279f5bbe1c753964e85b5bb9269a5a326d207849d9ef836",
    "transactionHash": "0xa3b1171292ef30c420a4de5f3103579cfe0440b5e257faf4dc2d92866b0ee82e",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 22105654,
        "transactionHash": "0xa3b1171292ef30c420a4de5f3103579cfe0440b5e257faf4dc2d92866b0ee82e",
        "address": "0xDC6715b0d5ad3AdD9e9Bd4b2c49df2BB220AD44A",
        "topics": [
          "0x7f00bf87056fc9622b70d830cce34aa24d6c12881ebbc71d3bf22d0c5ae295b7",
          "0x000000000000000000000000447ffd9a116efb3d77f47802cc4869c3730f723c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 9,
        "blockHash": "0xeaf176efbcd82c6b9279f5bbe1c753964e85b5bb9269a5a326d207849d9ef836"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 22105654,
        "transactionHash": "0xa3b1171292ef30c420a4de5f3103579cfe0440b5e257faf4dc2d92866b0ee82e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000039e5351e6ce3c4b19b8b0a2f5c82c511782457be",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001644cece2335000000000000000000000000000000000000000000000000000d4aae7afb98f4000000000000000000000000000000000000000000000002739de5aecadddcb9450000000000000000000000000000000000000000000000000d3469ac2d75bf000000000000000000000000000000000000000000000002739dfbf399abffee45",
        "logIndex": 10,
        "blockHash": "0xeaf176efbcd82c6b9279f5bbe1c753964e85b5bb9269a5a326d207849d9ef836"
      }
    ],
    "blockNumber": 22105654,
    "cumulativeGasUsed": "4917232",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x447ffD9a116efb3D77f47802cc4869C3730f723C"
  ],
  "solcInputHash": "77a9961c3b2fdeee8fb0d98e225d3d31",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"cosignaturesNeeded\",\"type\":\"uint8\"}],\"name\":\"SignerChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"}],\"name\":\"Transacted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_INCREASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"checkExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"checkSignatures\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"}],\"name\":\"isFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"cosignaturesNeeded\",\"type\":\"uint8\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"verifySignatures\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkExecution(address,uint256,bytes)\":{\"notice\":\"Checks if the execution of a transaction would succeed if it was properly signed.\"},\"checkSignatures(uint128,address,uint256,bytes,uint8[],bytes32[],bytes32[])\":{\"notice\":\"Checks if the provided signatures suffice to sign the transaction and if the nonce is correct.\"},\"isFree(uint128)\":{\"notice\":\"Returns whether the provided nonce can be used. For the 100 nonces in the interval [nextNonce(), nextNonce + 99], this is always true. For the nonces in the interval [nextNonce() - 129, nextNonce() - 1], this is true for the nonces that have not been used yet.\"},\"nextNonce()\":{\"notice\":\"The next recommended nonce, which is the highest nonce ever used plus one.\"},\"setSigner(address,uint8)\":{\"notice\":\"Call this method through execute\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/multisig/MultiSig.sol\":\"MultiSig\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/libraries/RLPEncode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0;\\n/**\\n * @title RLPEncode\\n * @dev A simple RLP encoding library.\\n * @author Bakaoh\\n */\\nlibrary RLPEncode {\\n    /*\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @dev RLP encodes a byte string.\\n     * @param self The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function encodeBytes(bytes memory self) internal pure returns (bytes memory) {\\n        bytes memory encoded;\\n        if (self.length == 1 && uint8(self[0]) <= 128) {\\n            encoded = self;\\n        } else {\\n            encoded = concat(encodeLength(self.length, 128), self);\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev RLP encodes a list of RLP encoded byte byte strings.\\n     * @param self The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function encodeList(bytes[] memory self) internal pure returns (bytes memory) {\\n        bytes memory list = flatten(self);\\n        return concat(encodeLength(list.length, 192), list);\\n    }\\n\\n    /**\\n     * @dev RLP encodes a string.\\n     * @param self The string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function encodeString(string memory self) internal pure returns (bytes memory) {\\n        return encodeBytes(bytes(self));\\n    }\\n\\n    /** \\n     * @dev RLP encodes an address.\\n     * @param self The address to encode.\\n     * @return The RLP encoded address in bytes.\\n     */\\n    function encodeAddress(address self) internal pure returns (bytes memory) {\\n        bytes memory inputBytes;\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(add(m, 20), xor(0x140000000000000000000000000000000000000000, self))\\n            mstore(0x40, add(m, 52))\\n            inputBytes := m\\n        }\\n        return encodeBytes(inputBytes);\\n    }\\n\\n    /** \\n     * @dev RLP encodes a uint.\\n     * @param self The uint to encode.\\n     * @return The RLP encoded uint in bytes.\\n     */\\n    function encodeUint(uint self) internal pure returns (bytes memory) {\\n        return encodeBytes(toBinary(self));\\n    }\\n\\n    /** \\n     * @dev RLP encodes an int.\\n     * @param self The int to encode.\\n     * @return The RLP encoded int in bytes.\\n     */\\n    function encodeInt(int self) internal pure returns (bytes memory) {\\n        return encodeUint(uint(self));\\n    }\\n\\n    /** \\n     * @dev RLP encodes a bool.\\n     * @param self The bool to encode.\\n     * @return The RLP encoded bool in bytes.\\n     */\\n    function encodeBool(bool self) internal pure returns (bytes memory) {\\n        bytes memory encoded = new bytes(1);\\n        encoded[0] = (self ? bytes1(0x01) : bytes1(0x80));\\n        return encoded;\\n    }\\n\\n\\n    /*\\n     * Private functions\\n     */\\n\\n    /**\\n     * @dev Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param len The length of the string or the payload.\\n     * @param offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function encodeLength(uint len, uint offset) private pure returns (bytes memory) {\\n        bytes memory encoded;\\n        if (len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = bytes32(len + offset)[31];\\n        } else {\\n            uint lenLen;\\n            uint i = 1;\\n            while (len / i != 0) {\\n                lenLen++;\\n                i *= 256;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = bytes32(lenLen + offset + 55)[31];\\n            for(i = 1; i <= lenLen; i++) {\\n                encoded[i] = bytes32((len / (256**(lenLen-i))) % 256)[31];\\n            }\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev Encode integer in big endian binary form with no leading zeroes.\\n     * @notice TODO: This should be optimized with assembly to save gas costs.\\n     * @param _x The integer to encode.\\n     * @return RLP encoded bytes.\\n     */\\n    function toBinary(uint _x) private pure returns (bytes memory) {\\n        bytes memory b = new bytes(32);\\n        assembly { \\n            mstore(add(b, 32), _x) \\n        }\\n        uint i;\\n        for (i = 0; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n        bytes memory res = new bytes(32 - i);\\n        for (uint j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n        return res;\\n    }\\n\\n    /**\\n     * @dev Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function memcpy(uint _dest, uint _src, uint _len) private pure {\\n        uint dest = _dest;\\n        uint src = _src;\\n        uint len = _len;\\n\\n        for(; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * @dev Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function flatten(bytes[] memory _list) private pure returns (bytes memory) {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint len;\\n        uint i;\\n        for (i = 0; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint flattenedPtr;\\n        assembly { flattenedPtr := add(flattened, 0x20) }\\n\\n        for(i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n            \\n            uint listPtr;\\n            assembly { listPtr := add(item, 0x20)}\\n\\n            memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += _list[i].length;\\n        }\\n\\n        return flattened;\\n    }\\n\\n    /**\\n     * @dev Concatenates two bytes.\\n     * @notice From: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol.\\n     * @param _preBytes First byte string.\\n     * @param _postBytes Second byte string.\\n     * @return Both byte string combined.\\n     */\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) private pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            tempBytes := mload(0x40)\\n\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            let mc := add(tempBytes, 0x20)\\n            let end := add(mc, length)\\n\\n            for {\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            mc := end\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31)\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n}\",\"keccak256\":\"0x73053fc8ea64c66c1dbaf02badb30ba48d700f5107c8f1ed7a56291b4cccc916\",\"license\":\"MIT\"},\"src/multisig/MultiSig.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Nonce.sol\\\";\\nimport \\\"../libraries/RLPEncode.sol\\\";\\n\\ncontract MultiSig is Nonce {\\n\\n  mapping (address => uint8) public signers; // The addresses that can co-sign transactions and the number of signatures needed\\n\\n  uint16 public signerCount;\\n  bytes public contractId; // most likely unique id of this contract\\n\\n  event SignerChange(\\n    address indexed signer,\\n    uint8 cosignaturesNeeded\\n  );\\n\\n  event Transacted(\\n    address indexed toAddress,  // The address the transaction was sent to\\n    bytes4 selector, // selected operation\\n    address[] signers // Addresses of the signers used to initiate the transaction\\n  );\\n\\n  constructor (address owner) {\\n    // We use the gas price to get a unique id into our transactions.\\n    // Note that 32 bits do not guarantee that no one can generate a contract with the\\n    // same id, but it practically rules out that someone accidentally creates two\\n    // two multisig contracts with the same id, and that's all we need to prevent\\n    // replay-attacks.\\n    contractId = toBytes(uint32(uint160(address(this))));\\n    _setSigner(owner, 1); // set initial owner\\n  }\\n\\n  /**\\n   * It should be possible to store ether on this address.\\n   */\\n  receive() external payable {\\n  }\\n\\n  /**\\n   * Checks if the provided signatures suffice to sign the transaction and if the nonce is correct.\\n   */\\n  function checkSignatures(uint128 nonce, address to, uint value, bytes calldata data,\\n    uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external view returns (address[] memory) {\\n    bytes32 transactionHash = calculateTransactionHash(nonce, contractId, to, value, data);\\n    return verifySignatures(transactionHash, v, r, s);\\n  }\\n\\n  /**\\n   * Checks if the execution of a transaction would succeed if it was properly signed.\\n   */\\n  function checkExecution(address to, uint value, bytes calldata data) external {\\n    Address.functionCallWithValue(to, data, value);\\n    require(false, \\\"Test passed. Reverting.\\\");\\n  }\\n\\n  function execute(uint128 nonce, address to, uint value, bytes calldata data, uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external returns (bytes memory) {\\n    bytes32 transactionHash = calculateTransactionHash(nonce, contractId, to, value, data);\\n    address[] memory found = verifySignatures(transactionHash, v, r, s);\\n    bytes memory returndata = Address.functionCallWithValue(to, data, value);\\n    flagUsed(nonce);\\n    emit Transacted(to, extractSelector(data), found);\\n    return returndata;\\n  }\\n\\n  function extractSelector(bytes calldata data) private pure returns (bytes4){\\n    if (data.length < 4){\\n      return bytes4(0);\\n    } else {\\n      return bytes4(data[0]) | (bytes4(data[1]) >> 8) | (bytes4(data[2]) >> 16) | (bytes4(data[3]) >> 24);\\n    }\\n  }\\n\\n  function toBytes(uint number) internal pure returns (bytes memory){\\n    uint len = 0;\\n    uint temp = 1;\\n    while (number >= temp){\\n      temp = temp << 8;\\n      len++;\\n    }\\n    temp = number;\\n    bytes memory data = new bytes(len);\\n    for (uint i = len; i>0; i--) {\\n      data[i-1] = bytes1(uint8(temp));\\n      temp = temp >> 8;\\n    }\\n    return data;\\n  }\\n\\n  // Note: does not work with contract creation\\n  function calculateTransactionHash(uint128 sequence, bytes memory id, address to, uint value, bytes calldata data)\\n    internal view returns (bytes32){\\n    bytes[] memory all = new bytes[](9);\\n    all[0] = toBytes(sequence); // sequence number instead of nonce\\n    all[1] = id; // contract id instead of gas price\\n    all[2] = toBytes(21000); // gas limit\\n    all[3] = abi.encodePacked(to);\\n    all[4] = toBytes(value);\\n    all[5] = data;\\n    all[6] = toBytes(block.chainid);\\n    all[7] = toBytes(0);\\n    for (uint i = 0; i<8; i++){\\n      all[i] = RLPEncode.encodeBytes(all[i]);\\n    }\\n    all[8] = all[7];\\n    return keccak256(RLPEncode.encodeList(all));\\n  }\\n\\n  function verifySignatures(bytes32 transactionHash, uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s)\\n    public view returns (address[] memory) {\\n    address[] memory found = new address[](r.length);\\n    for (uint i = 0; i < r.length; i++) {\\n      address signer = ecrecover(transactionHash, v[i], r[i], s[i]);\\n      uint8 cosignaturesNeeded = signers[signer];\\n      require(cosignaturesNeeded > 0 && cosignaturesNeeded <= r.length, \\\"cosigner error\\\");\\n      found[i] = signer;\\n    }\\n    requireNoDuplicates(found);\\n    return found;\\n  }\\n\\n  function requireNoDuplicates(address[] memory found) private pure {\\n    for (uint i = 0; i < found.length; i++) {\\n      for (uint j = i+1; j < found.length; j++) {\\n        require(found[i] != found[j], \\\"duplicate signature\\\");\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Call this method through execute\\n   */\\n  function setSigner(address signer, uint8 cosignaturesNeeded) external authorized {\\n    _setSigner(signer, cosignaturesNeeded);\\n    require(signerCount > 0);\\n  }\\n\\n  function migrate(address destination) external {\\n    _migrate(msg.sender, destination);\\n  }\\n\\n  function migrate(address source, address destination) external authorized {\\n    _migrate(source, destination);\\n  }\\n\\n  function _migrate(address source, address destination) private {\\n    require(signers[destination] == 0); // do not overwrite existing signer!\\n    _setSigner(destination, signers[source]);\\n    _setSigner(source, 0);\\n  }\\n\\n  function _setSigner(address signer, uint8 cosignaturesNeeded) private {\\n    require(!Address.isContract(signer), \\\"signer cannot be a contract\\\");\\n    uint8 prevValue = signers[signer];\\n    signers[signer] = cosignaturesNeeded;\\n    if (prevValue > 0 && cosignaturesNeeded == 0){\\n      signerCount--;\\n    } else if (prevValue == 0 && cosignaturesNeeded > 0){\\n      signerCount++;\\n    }\\n    emit SignerChange(signer, cosignaturesNeeded);\\n  }\\n\\n  modifier authorized() {\\n    require(address(this) == msg.sender || signers[msg.sender] == 1, \\\"not authorized\\\");\\n    _;\\n  }\\n\\n}\",\"keccak256\":\"0x9a67d8ebc67a7c739d736ded10fa5bdd563d11215c63eadca97498c29ddaaef3\",\"license\":\"MIT\"},\"src/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\n// and modified it.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 weiValue) internal returns (bytes memory) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        require(data.length == 0 || isContract(target));\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // TODO: I think this does not lead to correct error messages.\\n            revert(string(returndata));\\n        }\\n    }\\n}\",\"keccak256\":\"0xf1617d3b3e1175ccb1dbbee9df882a441f886d77282ae786ac05f4cee0731e44\",\"license\":\"MIT\"},\"src/utils/Nonce.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2020 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\n\\npragma solidity ^0.8.0;\\n\\ncontract Nonce {\\n\\n    uint256 public constant MAX_INCREASE = 100;\\n    \\n    uint256 private compound;\\n    \\n    constructor(){\\n        setBoth(128, 0);\\n    }\\n    \\n    /**\\n     * The next recommended nonce, which is the highest nonce ever used plus one.\\n     */\\n    function nextNonce() external view returns (uint256){\\n        return getMax() + 1;\\n    }\\n\\n    /**\\n     * Returns whether the provided nonce can be used.\\n     * For the 100 nonces in the interval [nextNonce(), nextNonce + 99], this is always true.\\n     * For the nonces in the interval [nextNonce() - 129, nextNonce() - 1], this is true for the nonces that have not been used yet.\\n     */ \\n    function isFree(uint128 nonce) external view returns (bool){\\n        uint128 max = getMax();\\n        return isValidHighNonce(max, nonce) || isValidLowNonce(max, getRegister(), nonce);\\n    }\\n\\n    /**\\n     * Flags the given nonce as used.\\n     * Reverts if the provided nonce is not free.\\n     */\\n    function flagUsed(uint128 nonce) internal {\\n        uint256 comp = compound;\\n        uint128 max = uint128(comp);\\n        uint128 reg = uint128(comp >> 128);\\n        if (isValidHighNonce(max, nonce)){\\n            setBoth(nonce, ((reg << 1) | 0x1) << (nonce - max - 1));\\n        } else if (isValidLowNonce(max, reg, nonce)){\\n            setBoth(max, uint128(reg | 0x1 << (max - nonce - 1)));\\n        } else {\\n            require(false);\\n        }\\n    }\\n    \\n    function getMax() private view returns (uint128) {\\n        return uint128(compound);\\n    }\\n    \\n    function getRegister() private view returns (uint128) {\\n        return uint128(compound >> 128);\\n    }\\n    \\n    function setBoth(uint128 max, uint128 reg) private {\\n        compound = uint256(reg) << 128 | max;\\n    }\\n\\n    function isValidHighNonce(uint128 max, uint128 nonce) private pure returns (bool){\\n        return nonce > max && nonce <= max + MAX_INCREASE;\\n    }\\n\\n    function isValidLowNonce(uint128 max, uint128 reg, uint256 nonce) private pure returns (bool){\\n        uint256 diff = max - nonce;\\n        return diff > 0 && diff <= 128 && ((0x1 << (diff - 1)) & reg == 0);\\n    }\\n    \\n}\",\"keccak256\":\"0xd95aeb9d834f2109164d279e7ee5277a9e8a8ef13f6f1c4733774d80e8fd21bc\",\"license\":\"LicenseRef-Aktionariat\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002261380380620022618339810160408190526200003491620003a9565b60806000556200004a63ffffffff301662000075565b8051620000609160039160209091019062000303565b506200006e81600162000154565b50620004f2565b6060600060015b8084106200009c5760081b81620000938162000492565b9250506200007c565b50826000826001600160401b03811115620000bb57620000bb620004dc565b6040519080825280601f01601f191660200182016040528015620000e6576020820181803683370190505b509050825b80156200014b5760f883901b8262000105600184620003db565b81518110620001185762000118620004c6565b60200101906001600160f81b031916908160001a90535060089290921c9180620001428162000416565b915050620000eb565b50949350505050565b6200016a82620002c660201b620008bf1760201c565b15620001bc5760405162461bcd60e51b815260206004820152601b60248201527f7369676e65722063616e6e6f74206265206120636f6e74726163740000000000604482015260640160405180910390fd5b6001600160a01b0382166000908152600160205260409020805460ff83811660ff19831617909255168015801590620001f6575060ff8216155b1562000233576002805461ffff169060006200021283620003f5565b91906101000a81548161ffff021916908361ffff1602179055505062000280565b60ff811615801562000248575060008260ff16115b1562000280576002805461ffff1690600062000264836200046d565b91906101000a81548161ffff021916908361ffff160217905550505b60405160ff831681526001600160a01b038416907f7f00bf87056fc9622b70d830cce34aa24d6c12881ebbc71d3bf22d0c5ae295b79060200160405180910390a2505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590620002fb57508115155b949350505050565b828054620003119062000430565b90600052602060002090601f01602090048101928262000335576000855562000380565b82601f106200035057805160ff191683800117855562000380565b8280016001018555821562000380579182015b828111156200038057825182559160200191906001019062000363565b506200038e92915062000392565b5090565b5b808211156200038e576000815560010162000393565b600060208284031215620003bc57600080fd5b81516001600160a01b0381168114620003d457600080fd5b9392505050565b600082821015620003f057620003f0620004b0565b500390565b600061ffff8216806200040c576200040c620004b0565b6000190192915050565b600081620004285762000428620004b0565b506000190190565b600181811c908216806200044557607f821691505b602082108114156200046757634e487b7160e01b600052602260045260246000fd5b50919050565b600061ffff80831681811415620004885762000488620004b0565b6001019392505050565b6000600019821415620004a957620004a9620004b0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b611d5f80620005026000396000f3fe6080604052600436106100c65760003560e01c80638291286c1161007f578063cb6367d111610059578063cb6367d114610242578063ce5494bb1461026f578063d69c3d301461028f578063ecec0dfd146102a457600080fd5b80638291286c146101dd578063b5fe5163146101f2578063b6e404de1461022257600080fd5b80630f43d678146100d25780631068361f146100f457806348753d0014610114578063736c0d5b1461014a5780637ca548c61461018c5780637cedbb80146101ba57600080fd5b366100cd57005b600080fd5b3480156100de57600080fd5b506100f26100ed366004611776565b6102c4565b005b34801561010057600080fd5b506100f261010f3660046116e9565b610345565b34801561012057600080fd5b5061013461012f36600461185f565b6103ad565b6040516101419190611a31565b60405180910390f35b34801561015657600080fd5b5061017a6101653660046116ce565b60016020526000908152604090205460ff1681565b60405160ff9091168152602001610141565b34801561019857600080fd5b506002546101a79061ffff1681565b60405161ffff9091168152602001610141565b3480156101c657600080fd5b506101cf606481565b604051908152602001610141565b3480156101e957600080fd5b50610134610518565b3480156101fe57600080fd5b5061021261020d366004611844565b6105a6565b6040519015158152602001610141565b34801561022e57600080fd5b506100f261023d36600461171c565b6105ea565b34801561024e57600080fd5b5061026261025d3660046117a0565b61067b565b60405161014191906119fc565b34801561027b57600080fd5b506100f261028a3660046116ce565b61085e565b34801561029b57600080fd5b506101cf61086b565b3480156102b057600080fd5b506102626102bf36600461185f565b610888565b303314806102e557503360009081526001602081905260409091205460ff16145b6103275760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b60448201526064015b60405180910390fd5b61033182826108fb565b60025461ffff1661034157600080fd5b5050565b3033148061036657503360009081526001602081905260409091205460ff16145b6103a35760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b604482015260640161031e565b6103418282610a52565b606060006104498d600380546103c290611c45565b80601f01602080910402602001604051908101604052809291908181526020018280546103ee90611c45565b801561043b5780601f106104105761010080835404028352916020019161043b565b820191906000526020600020905b81548152906001019060200180831161041e57829003601f168201915b50505050508e8e8e8e610aaa565b9050600061045c828a8a8a8a8a8a61067b565b905060006104af8e8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508f610d2c565b90506104ba8f610dd7565b8d6001600160a01b03167f64ada3f9bcd41ebd407b399dc401184273a19bc294825172626af05a15c95d256104ef8e8e610eb3565b846040516104fe929190611a0f565b60405180910390a29e9d5050505050505050505050505050565b6003805461052590611c45565b80601f016020809104026020016040519081016040528092919081815260200182805461055190611c45565b801561059e5780601f106105735761010080835404028352916020019161059e565b820191906000526020600020905b81548152906001019060200180831161058157829003601f168201915b505050505081565b6000806105b260005490565b90506105be8184610f6f565b806105e357506105e3816105d460005460801c90565b856001600160801b0316610fb4565b9392505050565b61062c8483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250610d2c915050565b5060405162461bcd60e51b815260206004820152601760248201527f54657374207061737365642e20526576657274696e672e000000000000000000604482015260640161031e565b50505050565b606060008467ffffffffffffffff81111561069857610698611d13565b6040519080825280602002602001820160405280156106c1578160200160208202803683370190505b50905060005b8581101561084857600060018b8b8b858181106106e6576106e6611cfd565b90506020020160208101906106fb9190611955565b8a8a8681811061070d5761070d611cfd565b9050602002013589898781811061072657610726611cfd565b9050602002013560405160008152602001604052604051610763949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610785573d6000803e3d6000fd5b505060408051601f1901516001600160a01b03811660009081526001602052919091205490925060ff16905080158015906107c3575060ff81168810155b6108005760405162461bcd60e51b815260206004820152600e60248201526d31b7b9b4b3b732b91032b93937b960911b604482015260640161031e565b8184848151811061081357610813611cfd565b60200260200101906001600160a01b031690816001600160a01b0316815250505050808061084090611ca2565b9150506106c7565b5061085281611009565b98975050505050505050565b6108683382610a52565b50565b6000805461087a906001611a44565b6001600160801b0316905090565b6060600061089d8d600380546103c290611c45565b90506108ae8189898989898961067b565b9d9c50505050505050505050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906108f357508115155b949350505050565b610904826108bf565b156109515760405162461bcd60e51b815260206004820152601b60248201527f7369676e65722063616e6e6f74206265206120636f6e74726163740000000000604482015260640161031e565b6001600160a01b0382166000908152600160205260409020805460ff83811660ff1983161790925516801580159061098a575060ff8216155b156109c3576002805461ffff169060006109a383611c10565b91906101000a81548161ffff021916908361ffff16021790555050610a0c565b60ff81161580156109d7575060008260ff16115b15610a0c576002805461ffff169060006109f083611c80565b91906101000a81548161ffff021916908361ffff160217905550505b60405160ff831681526001600160a01b038416907f7f00bf87056fc9622b70d830cce34aa24d6c12881ebbc71d3bf22d0c5ae295b79060200160405180910390a2505050565b6001600160a01b03811660009081526001602052604090205460ff1615610a7857600080fd5b6001600160a01b038216600090815260016020526040902054610a9f90829060ff166108fb565b6103418260006108fb565b6040805160098082526101408201909252600091829190816020015b6060815260200190600190039081610ac6579050509050610aef886001600160801b03166110dd565b81600081518110610b0257610b02611cfd565b60200260200101819052508681600181518110610b2157610b21611cfd565b6020026020010181905250610b376152086110dd565b81600281518110610b4a57610b4a611cfd565b602002602001018190525085604051602001610b7e919060609190911b6bffffffffffffffffffffffff1916815260140190565b60405160208183030381529060405281600381518110610ba057610ba0611cfd565b6020026020010181905250610bb4856110dd565b81600481518110610bc757610bc7611cfd565b602002602001018190525083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250508351849250600591508110610c1d57610c1d611cfd565b6020026020010181905250610c31466110dd565b81600681518110610c4457610c44611cfd565b6020026020010181905250610c5960006110dd565b81600781518110610c6c57610c6c611cfd565b602002602001018190525060005b6008811015610cd557610ca5828281518110610c9857610c98611cfd565b60200260200101516111ac565b828281518110610cb757610cb7611cfd565b60200260200101819052508080610ccd90611ca2565b915050610c7a565b5080600781518110610ce957610ce9611cfd565b602002602001015181600881518110610d0457610d04611cfd565b6020026020010181905250610d18816111fc565b805190602001209150509695505050505050565b6060825160001480610d425750610d42846108bf565b610d4b57600080fd5b600080856001600160a01b03168486604051610d6791906119e0565b60006040518083038185875af1925050503d8060008114610da4576040519150601f19603f3d011682016040523d82523d6000602084013e610da9565b606091505b50915091508115610dbd5791506105e39050565b8060405162461bcd60e51b815260040161031e9190611a31565b60005480608081901c610dea8285610f6f565b15610e4757610e42846001610dff8583611ba5565b610e099190611ba5565b6001600160801b0319600185811b6ffffffffffffffffffffffffffffffffe16176001600160801b039283161b60801b16911617600055565b610675565b610e5b8282866001600160801b0316610fb4565b156100cd57610e42826001610e708783611ba5565b610e7a9190611ba5565b6001600160801b03166001901b836001600160801b0316176001600160801b031960809190911b166001600160801b0390911617600055565b60006004821015610ec657506000610f69565b601883836003818110610edb57610edb611cfd565b909101356001600160f81b03191690911c9050601084846002818110610f0357610f03611cfd565b909101356001600160f81b03191690911c9050600885856001818110610f2b57610f2b611cfd565b909101356001600160f81b03191690911c90508585600081610f4f57610f4f611cfd565b9050013560f81c60f81b6001600160f81b03191617171790505b92915050565b6000826001600160801b0316826001600160801b03161180156105e35750610fa160646001600160801b038516611a6f565b826001600160801b031611159392505050565b600080610fca836001600160801b038716611bcd565b9050600081118015610fdd575060808111155b801561100057506001600160801b038416610ff9600183611bcd565b6001901b16155b95945050505050565b60005b8151811015610341576000611022826001611a6f565b90505b82518110156110ca5782818151811061104057611040611cfd565b60200260200101516001600160a01b031683838151811061106357611063611cfd565b60200260200101516001600160a01b031614156110b85760405162461bcd60e51b81526020600482015260136024820152726475706c6963617465207369676e617475726560681b604482015260640161031e565b806110c281611ca2565b915050611025565b50806110d581611ca2565b91505061100c565b6060600060015b8084106111005760081b816110f881611ca2565b9250506110e4565b508260008267ffffffffffffffff81111561111d5761111d611d13565b6040519080825280601f01601f191660200182016040528015611147576020820181803683370190505b509050825b80156111a35760f883901b82611163600184611bcd565b8151811061117357611173611cfd565b60200101906001600160f81b031916908160001a90535060089290921c918061119b81611c2e565b91505061114c565b50949350505050565b606080825160011480156111db57506080836000815181106111d0576111d0611cfd565b016020015160f81c11155b156111e7575081610f69565b6105e36111f684516080611220565b846113d7565b6060600061120983611454565b90506105e361121a825160c0611220565b826113d7565b606080603884101561128a57604080516001808252818301909252906020820181803683370190505090506112558385611a6f565b601f1a60f81b8160008151811061126e5761126e611cfd565b60200101906001600160f81b031916908160001a9053506105e3565b600060015b6112998187611a87565b156112bf57816112a881611ca2565b92506112b8905061010082611b86565b905061128f565b6112ca826001611a6f565b67ffffffffffffffff8111156112e2576112e2611d13565b6040519080825280601f01601f19166020018201604052801561130c576020820181803683370190505b5092506113198583611a6f565b611324906037611a6f565b601f1a60f81b8360008151811061133d5761133d611cfd565b60200101906001600160f81b031916908160001a905350600190505b8181116113ce5761010061136d8284611bcd565b61137990610100611ade565b6113839088611a87565b61138d9190611cbd565b601f1a60f81b8382815181106113a5576113a5611cfd565b60200101906001600160f81b031916908160001a905350806113c681611ca2565b915050611359565b50509392505050565b6060806040519050835180825260208201818101602087015b818310156114085780518352602092830192016113f0565b50855184518101855292509050808201602086015b8183101561143557805183526020928301920161141d565b508651929092011591909101601f01601f191660405250905092915050565b606081516000141561147457505060408051600081526020810190915290565b6000805b83518110156114bb5783818151811061149357611493611cfd565b602002602001015151826114a79190611a6f565b9150806114b381611ca2565b915050611478565b60008267ffffffffffffffff8111156114d6576114d6611d13565b6040519080825280601f01601f191660200182016040528015611500576020820181803683370190505b50600092509050602081015b85518310156111a357600086848151811061152957611529611cfd565b60200260200101519050600060208201905061154783828451611584565b87858151811061155957611559611cfd565b6020026020010151518361156d9190611a6f565b92505050828061157c90611ca2565b93505061150c565b8282825b602081106115c0578151835261159f602084611a6f565b92506115ac602083611a6f565b91506115b9602082611bcd565b9050611588565b600060016115cf836020611bcd565b6115db90610100611ade565b6115e59190611bcd565b925184518416931916929092179092525050505050565b80356001600160a01b038116811461161357600080fd5b919050565b60008083601f84011261162a57600080fd5b50813567ffffffffffffffff81111561164257600080fd5b6020830191508360208260051b850101111561165d57600080fd5b9250929050565b60008083601f84011261167657600080fd5b50813567ffffffffffffffff81111561168e57600080fd5b60208301915083602082850101111561165d57600080fd5b80356001600160801b038116811461161357600080fd5b803560ff8116811461161357600080fd5b6000602082840312156116e057600080fd5b6105e3826115fc565b600080604083850312156116fc57600080fd5b611705836115fc565b9150611713602084016115fc565b90509250929050565b6000806000806060858703121561173257600080fd5b61173b856115fc565b935060208501359250604085013567ffffffffffffffff81111561175e57600080fd5b61176a87828801611664565b95989497509550505050565b6000806040838503121561178957600080fd5b611792836115fc565b9150611713602084016116bd565b60008060008060008060006080888a0312156117bb57600080fd5b87359650602088013567ffffffffffffffff808211156117da57600080fd5b6117e68b838c01611618565b909850965060408a01359150808211156117ff57600080fd5b61180b8b838c01611618565b909650945060608a013591508082111561182457600080fd5b506118318a828b01611618565b989b979a50959850939692959293505050565b60006020828403121561185657600080fd5b6105e3826116a6565b600080600080600080600080600080600060e08c8e03121561188057600080fd5b6118898c6116a6565b9a5061189760208d016115fc565b995060408c0135985067ffffffffffffffff8060608e013511156118ba57600080fd5b6118ca8e60608f01358f01611664565b909950975060808d01358110156118e057600080fd5b6118f08e60808f01358f01611618565b909750955060a08d013581101561190657600080fd5b6119168e60a08f01358f01611618565b909550935060c08d013581101561192c57600080fd5b5061193d8d60c08e01358e01611618565b81935080925050509295989b509295989b9093969950565b60006020828403121561196757600080fd5b6105e3826116bd565b600081518084526020808501945080840160005b838110156119a95781516001600160a01b031687529582019590820190600101611984565b509495945050505050565b600081518084526119cc816020860160208601611be4565b601f01601f19169290920160200192915050565b600082516119f2818460208701611be4565b9190910192915050565b6020815260006105e36020830184611970565b63ffffffff60e01b831681526040602082015260006108f36040830184611970565b6020815260006105e360208301846119b4565b60006001600160801b03808316818516808303821115611a6657611a66611cd1565b01949350505050565b60008219821115611a8257611a82611cd1565b500190565b600082611a9657611a96611ce7565b500490565b600181815b80851115611ad6578160001904821115611abc57611abc611cd1565b80851615611ac957918102915b93841c9390800290611aa0565b509250929050565b60006105e38383600082611af457506001610f69565b81611b0157506000610f69565b8160018114611b175760028114611b2157611b3d565b6001915050610f69565b60ff841115611b3257611b32611cd1565b50506001821b610f69565b5060208310610133831016604e8410600b8410161715611b60575081810a610f69565b611b6a8383611a9b565b8060001904821115611b7e57611b7e611cd1565b029392505050565b6000816000190483118215151615611ba057611ba0611cd1565b500290565b60006001600160801b0383811690831681811015611bc557611bc5611cd1565b039392505050565b600082821015611bdf57611bdf611cd1565b500390565b60005b83811015611bff578181015183820152602001611be7565b838111156106755750506000910152565b600061ffff821680611c2457611c24611cd1565b6000190192915050565b600081611c3d57611c3d611cd1565b506000190190565b600181811c90821680611c5957607f821691505b60208210811415611c7a57634e487b7160e01b600052602260045260246000fd5b50919050565b600061ffff80831681811415611c9857611c98611cd1565b6001019392505050565b6000600019821415611cb657611cb6611cd1565b5060010190565b600082611ccc57611ccc611ce7565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220ebf746d6b9d1b506c053306e73883a01e8e8b0ce95b433e3eeaf75546b624ee164736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100c65760003560e01c80638291286c1161007f578063cb6367d111610059578063cb6367d114610242578063ce5494bb1461026f578063d69c3d301461028f578063ecec0dfd146102a457600080fd5b80638291286c146101dd578063b5fe5163146101f2578063b6e404de1461022257600080fd5b80630f43d678146100d25780631068361f146100f457806348753d0014610114578063736c0d5b1461014a5780637ca548c61461018c5780637cedbb80146101ba57600080fd5b366100cd57005b600080fd5b3480156100de57600080fd5b506100f26100ed366004611776565b6102c4565b005b34801561010057600080fd5b506100f261010f3660046116e9565b610345565b34801561012057600080fd5b5061013461012f36600461185f565b6103ad565b6040516101419190611a31565b60405180910390f35b34801561015657600080fd5b5061017a6101653660046116ce565b60016020526000908152604090205460ff1681565b60405160ff9091168152602001610141565b34801561019857600080fd5b506002546101a79061ffff1681565b60405161ffff9091168152602001610141565b3480156101c657600080fd5b506101cf606481565b604051908152602001610141565b3480156101e957600080fd5b50610134610518565b3480156101fe57600080fd5b5061021261020d366004611844565b6105a6565b6040519015158152602001610141565b34801561022e57600080fd5b506100f261023d36600461171c565b6105ea565b34801561024e57600080fd5b5061026261025d3660046117a0565b61067b565b60405161014191906119fc565b34801561027b57600080fd5b506100f261028a3660046116ce565b61085e565b34801561029b57600080fd5b506101cf61086b565b3480156102b057600080fd5b506102626102bf36600461185f565b610888565b303314806102e557503360009081526001602081905260409091205460ff16145b6103275760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b60448201526064015b60405180910390fd5b61033182826108fb565b60025461ffff1661034157600080fd5b5050565b3033148061036657503360009081526001602081905260409091205460ff16145b6103a35760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b604482015260640161031e565b6103418282610a52565b606060006104498d600380546103c290611c45565b80601f01602080910402602001604051908101604052809291908181526020018280546103ee90611c45565b801561043b5780601f106104105761010080835404028352916020019161043b565b820191906000526020600020905b81548152906001019060200180831161041e57829003601f168201915b50505050508e8e8e8e610aaa565b9050600061045c828a8a8a8a8a8a61067b565b905060006104af8e8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508f610d2c565b90506104ba8f610dd7565b8d6001600160a01b03167f64ada3f9bcd41ebd407b399dc401184273a19bc294825172626af05a15c95d256104ef8e8e610eb3565b846040516104fe929190611a0f565b60405180910390a29e9d5050505050505050505050505050565b6003805461052590611c45565b80601f016020809104026020016040519081016040528092919081815260200182805461055190611c45565b801561059e5780601f106105735761010080835404028352916020019161059e565b820191906000526020600020905b81548152906001019060200180831161058157829003601f168201915b505050505081565b6000806105b260005490565b90506105be8184610f6f565b806105e357506105e3816105d460005460801c90565b856001600160801b0316610fb4565b9392505050565b61062c8483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250610d2c915050565b5060405162461bcd60e51b815260206004820152601760248201527f54657374207061737365642e20526576657274696e672e000000000000000000604482015260640161031e565b50505050565b606060008467ffffffffffffffff81111561069857610698611d13565b6040519080825280602002602001820160405280156106c1578160200160208202803683370190505b50905060005b8581101561084857600060018b8b8b858181106106e6576106e6611cfd565b90506020020160208101906106fb9190611955565b8a8a8681811061070d5761070d611cfd565b9050602002013589898781811061072657610726611cfd565b9050602002013560405160008152602001604052604051610763949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610785573d6000803e3d6000fd5b505060408051601f1901516001600160a01b03811660009081526001602052919091205490925060ff16905080158015906107c3575060ff81168810155b6108005760405162461bcd60e51b815260206004820152600e60248201526d31b7b9b4b3b732b91032b93937b960911b604482015260640161031e565b8184848151811061081357610813611cfd565b60200260200101906001600160a01b031690816001600160a01b0316815250505050808061084090611ca2565b9150506106c7565b5061085281611009565b98975050505050505050565b6108683382610a52565b50565b6000805461087a906001611a44565b6001600160801b0316905090565b6060600061089d8d600380546103c290611c45565b90506108ae8189898989898961067b565b9d9c50505050505050505050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906108f357508115155b949350505050565b610904826108bf565b156109515760405162461bcd60e51b815260206004820152601b60248201527f7369676e65722063616e6e6f74206265206120636f6e74726163740000000000604482015260640161031e565b6001600160a01b0382166000908152600160205260409020805460ff83811660ff1983161790925516801580159061098a575060ff8216155b156109c3576002805461ffff169060006109a383611c10565b91906101000a81548161ffff021916908361ffff16021790555050610a0c565b60ff81161580156109d7575060008260ff16115b15610a0c576002805461ffff169060006109f083611c80565b91906101000a81548161ffff021916908361ffff160217905550505b60405160ff831681526001600160a01b038416907f7f00bf87056fc9622b70d830cce34aa24d6c12881ebbc71d3bf22d0c5ae295b79060200160405180910390a2505050565b6001600160a01b03811660009081526001602052604090205460ff1615610a7857600080fd5b6001600160a01b038216600090815260016020526040902054610a9f90829060ff166108fb565b6103418260006108fb565b6040805160098082526101408201909252600091829190816020015b6060815260200190600190039081610ac6579050509050610aef886001600160801b03166110dd565b81600081518110610b0257610b02611cfd565b60200260200101819052508681600181518110610b2157610b21611cfd565b6020026020010181905250610b376152086110dd565b81600281518110610b4a57610b4a611cfd565b602002602001018190525085604051602001610b7e919060609190911b6bffffffffffffffffffffffff1916815260140190565b60405160208183030381529060405281600381518110610ba057610ba0611cfd565b6020026020010181905250610bb4856110dd565b81600481518110610bc757610bc7611cfd565b602002602001018190525083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250508351849250600591508110610c1d57610c1d611cfd565b6020026020010181905250610c31466110dd565b81600681518110610c4457610c44611cfd565b6020026020010181905250610c5960006110dd565b81600781518110610c6c57610c6c611cfd565b602002602001018190525060005b6008811015610cd557610ca5828281518110610c9857610c98611cfd565b60200260200101516111ac565b828281518110610cb757610cb7611cfd565b60200260200101819052508080610ccd90611ca2565b915050610c7a565b5080600781518110610ce957610ce9611cfd565b602002602001015181600881518110610d0457610d04611cfd565b6020026020010181905250610d18816111fc565b805190602001209150509695505050505050565b6060825160001480610d425750610d42846108bf565b610d4b57600080fd5b600080856001600160a01b03168486604051610d6791906119e0565b60006040518083038185875af1925050503d8060008114610da4576040519150601f19603f3d011682016040523d82523d6000602084013e610da9565b606091505b50915091508115610dbd5791506105e39050565b8060405162461bcd60e51b815260040161031e9190611a31565b60005480608081901c610dea8285610f6f565b15610e4757610e42846001610dff8583611ba5565b610e099190611ba5565b6001600160801b0319600185811b6ffffffffffffffffffffffffffffffffe16176001600160801b039283161b60801b16911617600055565b610675565b610e5b8282866001600160801b0316610fb4565b156100cd57610e42826001610e708783611ba5565b610e7a9190611ba5565b6001600160801b03166001901b836001600160801b0316176001600160801b031960809190911b166001600160801b0390911617600055565b60006004821015610ec657506000610f69565b601883836003818110610edb57610edb611cfd565b909101356001600160f81b03191690911c9050601084846002818110610f0357610f03611cfd565b909101356001600160f81b03191690911c9050600885856001818110610f2b57610f2b611cfd565b909101356001600160f81b03191690911c90508585600081610f4f57610f4f611cfd565b9050013560f81c60f81b6001600160f81b03191617171790505b92915050565b6000826001600160801b0316826001600160801b03161180156105e35750610fa160646001600160801b038516611a6f565b826001600160801b031611159392505050565b600080610fca836001600160801b038716611bcd565b9050600081118015610fdd575060808111155b801561100057506001600160801b038416610ff9600183611bcd565b6001901b16155b95945050505050565b60005b8151811015610341576000611022826001611a6f565b90505b82518110156110ca5782818151811061104057611040611cfd565b60200260200101516001600160a01b031683838151811061106357611063611cfd565b60200260200101516001600160a01b031614156110b85760405162461bcd60e51b81526020600482015260136024820152726475706c6963617465207369676e617475726560681b604482015260640161031e565b806110c281611ca2565b915050611025565b50806110d581611ca2565b91505061100c565b6060600060015b8084106111005760081b816110f881611ca2565b9250506110e4565b508260008267ffffffffffffffff81111561111d5761111d611d13565b6040519080825280601f01601f191660200182016040528015611147576020820181803683370190505b509050825b80156111a35760f883901b82611163600184611bcd565b8151811061117357611173611cfd565b60200101906001600160f81b031916908160001a90535060089290921c918061119b81611c2e565b91505061114c565b50949350505050565b606080825160011480156111db57506080836000815181106111d0576111d0611cfd565b016020015160f81c11155b156111e7575081610f69565b6105e36111f684516080611220565b846113d7565b6060600061120983611454565b90506105e361121a825160c0611220565b826113d7565b606080603884101561128a57604080516001808252818301909252906020820181803683370190505090506112558385611a6f565b601f1a60f81b8160008151811061126e5761126e611cfd565b60200101906001600160f81b031916908160001a9053506105e3565b600060015b6112998187611a87565b156112bf57816112a881611ca2565b92506112b8905061010082611b86565b905061128f565b6112ca826001611a6f565b67ffffffffffffffff8111156112e2576112e2611d13565b6040519080825280601f01601f19166020018201604052801561130c576020820181803683370190505b5092506113198583611a6f565b611324906037611a6f565b601f1a60f81b8360008151811061133d5761133d611cfd565b60200101906001600160f81b031916908160001a905350600190505b8181116113ce5761010061136d8284611bcd565b61137990610100611ade565b6113839088611a87565b61138d9190611cbd565b601f1a60f81b8382815181106113a5576113a5611cfd565b60200101906001600160f81b031916908160001a905350806113c681611ca2565b915050611359565b50509392505050565b6060806040519050835180825260208201818101602087015b818310156114085780518352602092830192016113f0565b50855184518101855292509050808201602086015b8183101561143557805183526020928301920161141d565b508651929092011591909101601f01601f191660405250905092915050565b606081516000141561147457505060408051600081526020810190915290565b6000805b83518110156114bb5783818151811061149357611493611cfd565b602002602001015151826114a79190611a6f565b9150806114b381611ca2565b915050611478565b60008267ffffffffffffffff8111156114d6576114d6611d13565b6040519080825280601f01601f191660200182016040528015611500576020820181803683370190505b50600092509050602081015b85518310156111a357600086848151811061152957611529611cfd565b60200260200101519050600060208201905061154783828451611584565b87858151811061155957611559611cfd565b6020026020010151518361156d9190611a6f565b92505050828061157c90611ca2565b93505061150c565b8282825b602081106115c0578151835261159f602084611a6f565b92506115ac602083611a6f565b91506115b9602082611bcd565b9050611588565b600060016115cf836020611bcd565b6115db90610100611ade565b6115e59190611bcd565b925184518416931916929092179092525050505050565b80356001600160a01b038116811461161357600080fd5b919050565b60008083601f84011261162a57600080fd5b50813567ffffffffffffffff81111561164257600080fd5b6020830191508360208260051b850101111561165d57600080fd5b9250929050565b60008083601f84011261167657600080fd5b50813567ffffffffffffffff81111561168e57600080fd5b60208301915083602082850101111561165d57600080fd5b80356001600160801b038116811461161357600080fd5b803560ff8116811461161357600080fd5b6000602082840312156116e057600080fd5b6105e3826115fc565b600080604083850312156116fc57600080fd5b611705836115fc565b9150611713602084016115fc565b90509250929050565b6000806000806060858703121561173257600080fd5b61173b856115fc565b935060208501359250604085013567ffffffffffffffff81111561175e57600080fd5b61176a87828801611664565b95989497509550505050565b6000806040838503121561178957600080fd5b611792836115fc565b9150611713602084016116bd565b60008060008060008060006080888a0312156117bb57600080fd5b87359650602088013567ffffffffffffffff808211156117da57600080fd5b6117e68b838c01611618565b909850965060408a01359150808211156117ff57600080fd5b61180b8b838c01611618565b909650945060608a013591508082111561182457600080fd5b506118318a828b01611618565b989b979a50959850939692959293505050565b60006020828403121561185657600080fd5b6105e3826116a6565b600080600080600080600080600080600060e08c8e03121561188057600080fd5b6118898c6116a6565b9a5061189760208d016115fc565b995060408c0135985067ffffffffffffffff8060608e013511156118ba57600080fd5b6118ca8e60608f01358f01611664565b909950975060808d01358110156118e057600080fd5b6118f08e60808f01358f01611618565b909750955060a08d013581101561190657600080fd5b6119168e60a08f01358f01611618565b909550935060c08d013581101561192c57600080fd5b5061193d8d60c08e01358e01611618565b81935080925050509295989b509295989b9093969950565b60006020828403121561196757600080fd5b6105e3826116bd565b600081518084526020808501945080840160005b838110156119a95781516001600160a01b031687529582019590820190600101611984565b509495945050505050565b600081518084526119cc816020860160208601611be4565b601f01601f19169290920160200192915050565b600082516119f2818460208701611be4565b9190910192915050565b6020815260006105e36020830184611970565b63ffffffff60e01b831681526040602082015260006108f36040830184611970565b6020815260006105e360208301846119b4565b60006001600160801b03808316818516808303821115611a6657611a66611cd1565b01949350505050565b60008219821115611a8257611a82611cd1565b500190565b600082611a9657611a96611ce7565b500490565b600181815b80851115611ad6578160001904821115611abc57611abc611cd1565b80851615611ac957918102915b93841c9390800290611aa0565b509250929050565b60006105e38383600082611af457506001610f69565b81611b0157506000610f69565b8160018114611b175760028114611b2157611b3d565b6001915050610f69565b60ff841115611b3257611b32611cd1565b50506001821b610f69565b5060208310610133831016604e8410600b8410161715611b60575081810a610f69565b611b6a8383611a9b565b8060001904821115611b7e57611b7e611cd1565b029392505050565b6000816000190483118215151615611ba057611ba0611cd1565b500290565b60006001600160801b0383811690831681811015611bc557611bc5611cd1565b039392505050565b600082821015611bdf57611bdf611cd1565b500390565b60005b83811015611bff578181015183820152602001611be7565b838111156106755750506000910152565b600061ffff821680611c2457611c24611cd1565b6000190192915050565b600081611c3d57611c3d611cd1565b506000190190565b600181811c90821680611c5957607f821691505b60208210811415611c7a57634e487b7160e01b600052602260045260246000fd5b50919050565b600061ffff80831681811415611c9857611c98611cd1565b6001019392505050565b6000600019821415611cb657611cb6611cd1565b5060010190565b600082611ccc57611ccc611ce7565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220ebf746d6b9d1b506c053306e73883a01e8e8b0ce95b433e3eeaf75546b624ee164736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkExecution(address,uint256,bytes)": {
        "notice": "Checks if the execution of a transaction would succeed if it was properly signed."
      },
      "checkSignatures(uint128,address,uint256,bytes,uint8[],bytes32[],bytes32[])": {
        "notice": "Checks if the provided signatures suffice to sign the transaction and if the nonce is correct."
      },
      "isFree(uint128)": {
        "notice": "Returns whether the provided nonce can be used. For the 100 nonces in the interval [nextNonce(), nextNonce + 99], this is always true. For the nonces in the interval [nextNonce() - 129, nextNonce() - 1], this is true for the nonces that have not been used yet."
      },
      "nextNonce()": {
        "notice": "The next recommended nonce, which is the highest nonce ever used plus one."
      },
      "setSigner(address,uint8)": {
        "notice": "Call this method through execute"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11297,
        "contract": "src/multisig/MultiSig.sol:MultiSig",
        "label": "compound",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3362,
        "contract": "src/multisig/MultiSig.sol:MultiSig",
        "label": "signers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 3364,
        "contract": "src/multisig/MultiSig.sol:MultiSig",
        "label": "signerCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 3366,
        "contract": "src/multisig/MultiSig.sol:MultiSig",
        "label": "contractId",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}