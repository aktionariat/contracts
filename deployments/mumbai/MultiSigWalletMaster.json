{
  "address": "0x4F32bb4703E56DbDaa892F671d63Faa2D8423e42",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "Address_NotTransferNorContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Initializable_AlreadyInitalized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "Multisig_DuplicateSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Multisig_InsufficientSigners",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "Multisig_InvalidDestination",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "Multisig_InvalidSignDataOrInsufficientCosigner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "Multisig_InvalidSigner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Multisig_SignatureMissing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Multisig_UnauthorizedSender",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SentEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "signaturesNeeded",
          "type": "uint8"
        }
      ],
      "name": "SignerChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "signers",
          "type": "address[]"
        }
      ],
      "name": "Transacted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_INCREASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "checkExecution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "nonce",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "checkSignatures",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractId",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "nonce",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "nonce",
          "type": "uint128"
        }
      ],
      "name": "isFree",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "signaturesNeeded",
          "type": "uint8"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signerCount",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signers",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "toBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "transactionHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint8[]",
          "name": "v",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "verifySignatures",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9bba990b8b3cb6493c6827d100367f3b750277e8e5ecc459c4aacf3cb78e7152",
  "receipt": {
    "to": null,
    "from": "0x447ffD9a116efb3D77f47802cc4869C3730f723C",
    "contractAddress": "0x4F32bb4703E56DbDaa892F671d63Faa2D8423e42",
    "transactionIndex": 36,
    "gasUsed": "1831494",
    "logsBloom": "0x
    "blockHash": "0x3db4eaf31fd0515fb40348aac9d583fd28ec405b5e24f4bd14b533264b1e243e",
    "transactionHash": "0x9bba990b8b3cb6493c6827d100367f3b750277e8e5ecc459c4aacf3cb78e7152",
    "logs": [
      {
        "transactionIndex": 36,
        "blockNumber": 41013024,
        "transactionHash": "0x9bba990b8b3cb6493c6827d100367f3b750277e8e5ecc459c4aacf3cb78e7152",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000447ffd9a116efb3d77f47802cc4869c3730f723c",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000009c299e3eada0000000000000000000000000000000000000000000000000002abb4ff1eb0ea270000000000000000000000000000000000000000000002650fab42ee43f3e21200000000000000000000000000000000000000000000000002a1f2653ac610270000000000000000000000000000000000000000000002650fb5058827debc12",
        "logIndex": 114,
        "blockHash": "0x3db4eaf31fd0515fb40348aac9d583fd28ec405b5e24f4bd14b533264b1e243e"
      }
    ],
    "blockNumber": 41013024,
    "cumulativeGasUsed": "19863605",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "52da0c8ebd6b37bb8f91e29cfaaf8064",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Address_NotTransferNorContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Initializable_AlreadyInitalized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"Multisig_DuplicateSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Multisig_InsufficientSigners\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"Multisig_InvalidDestination\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"Multisig_InvalidSignDataOrInsufficientCosigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"Multisig_InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Multisig_SignatureMissing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Multisig_UnauthorizedSender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SentEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"signaturesNeeded\",\"type\":\"uint8\"}],\"name\":\"SignerChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"}],\"name\":\"Transacted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_INCREASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"checkExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"checkSignatures\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"}],\"name\":\"isFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"signaturesNeeded\",\"type\":\"uint8\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"toBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"verifySignatures\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"Address_NotTransferNorContract(address)\":[{\"params\":{\"target\":\"Target address to call the function on.\"}}],\"Multisig_DuplicateSignature(address)\":[{\"params\":{\"from\":\"The address which has produced more than one signature. \"}}],\"Multisig_InvalidSignDataOrInsufficientCosigner(address)\":[{\"params\":{\"signer\":\"The ecrecover'd signer.\"}}],\"Multisig_InvalidSigner(address)\":[{\"params\":{\"signer\":\"The address of the invalid signer. \"}}],\"Multisig_UnauthorizedSender(address)\":[{\"params\":{\"sender\":\"The msg.sender of the transaction. \"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"Multisig_DuplicateSignature(address)\":[{\"notice\":\"Each signature data entry has to be from a unique address. \"}],\"Multisig_InsufficientSigners()\":[{\"notice\":\"The multisig needs to have > 0 signers. \"}],\"Multisig_InvalidDestination(address)\":[{\"notice\":\"Migration can't override current signer.  param destination The address to which the signer rights should be migrated. \"}],\"Multisig_InvalidSignDataOrInsufficientCosigner(address)\":[{\"notice\":\"Sinature data isn't valid for the transaction or insufficient signer have signed the transaction. \"}],\"Multisig_InvalidSigner(address)\":[{\"notice\":\"Signer is a contract or the 0x0 address. \"}],\"Multisig_SignatureMissing()\":[{\"notice\":\"Call needs to provide signature data. \"}],\"Multisig_UnauthorizedSender(address)\":[{\"notice\":\"Sender has to be single signer or the multisig itself. \"}]},\"kind\":\"user\",\"methods\":{\"checkExecution(address,uint256,bytes)\":{\"notice\":\"Checks if the execution of a transaction would succeed if it was properly signed.\"},\"checkSignatures(uint128,address,uint256,bytes,uint8[],bytes32[],bytes32[])\":{\"notice\":\"Checks if the provided signatures suffice to sign the transaction and if the nonce is correct.\"},\"isFree(uint128)\":{\"notice\":\"Returns whether the provided nonce can be used. For the 100 nonces in the interval [nextNonce(), nextNonce + 99], this is always true. For the nonces in the interval [nextNonce() - 129, nextNonce() - 1], this is true for the nonces that have not been used yet.\"},\"nextNonce()\":{\"notice\":\"The next recommended nonce, which is the highest nonce ever used plus one. The initial nonce is 129.\"},\"setSigner(address,uint8)\":{\"notice\":\"Call this method through execute\"}},\"notice\":\"Documented in ../../doc/multisig.md Version 4: include SentEth event\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/multisig/MultiSigWalletMaster.sol\":\"MultiSigWalletMaster\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/multisig/MultiSigWalletMaster.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: MIT\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\nimport \\\"./RLPEncode.sol\\\";\\nimport \\\"./Nonce.sol\\\";\\n\\n/**\\n * Documented in ../../doc/multisig.md\\n * Version 4: include SentEth event\\n */\\ncontract MultiSigWalletMaster is Nonce, Initializable {\\n\\n  // Version history\\n  // Version 4: added event for send value\\n  // Version 5: added version field and changed chain id\\n  uint8 public constant VERSION = 0x5;\\n\\n  mapping (address => uint8) public signers; // The addresses that can co-sign transactions and the number of signatures needed\\n\\n  uint16 public signerCount;\\n  bytes public contractId; // most likely unique id of this contract\\n\\n  event SignerChange(\\n    address indexed signer,\\n    uint8 signaturesNeeded\\n  );\\n\\n  event Transacted(\\n    address indexed toAddress,  // The address the transaction was sent to\\n    bytes4 selector, // selected operation\\n    address[] signers // Addresses of the signers used to initiate the transaction\\n  );\\n\\n  event Received(address indexed sender, uint amount);\\n  event SentEth(address indexed target, uint amount);\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n\\t//////////////////////////////////////////////////////////////*/\\n  /// Call needs to provide signature data. \\n  error Multisig_SignatureMissing();\\n  /// Sinature data isn't valid for the transaction or insufficient signer have signed the transaction. \\n  /// @param signer The ecrecover'd signer.\\n  error Multisig_InvalidSignDataOrInsufficientCosigner(address signer);\\n  /// Each signature data entry has to be from a unique address. \\n  /// @param from The address which has produced more than one signature. \\n  error Multisig_DuplicateSignature(address from);\\n  /// Signer is a contract or the 0x0 address. \\n  /// @param signer The address of the invalid signer. \\n  error Multisig_InvalidSigner(address signer);\\n  /// The multisig needs to have > 0 signers. \\n  error Multisig_InsufficientSigners();\\n  /// Sender has to be single signer or the multisig itself. \\n  /// @param sender The msg.sender of the transaction. \\n  error Multisig_UnauthorizedSender(address sender);\\n  /// Migration can't override current signer. \\n  /// param destination The address to which the signer rights should be migrated. \\n  error Multisig_InvalidDestination(address destination);\\n\\n  function initialize(address owner) external initializer {\\n    // We use the gas price field to get a unique id into our transactions.\\n    // Note that 32 bits do not guarantee that no one can generate a contract with the\\n    // same id, but it practically rules out that someone accidentally creates two\\n    // two multisig contracts with the same id, and that's all we need to prevent\\n    // replay-attacks.\\n    contractId = toBytes(uint32(uint160(address(this))));\\n    signerCount = 0;\\n    _setSigner(owner, 1); // set initial owner\\n  }\\n\\n  /**\\n   * It should be possible to store ether on this address.\\n   */\\n  receive() external payable {\\n    emit Received(msg.sender, msg.value);\\n  }\\n\\n  /**\\n   * Checks if the provided signatures suffice to sign the transaction and if the nonce is correct.\\n   */\\n  function checkSignatures(uint128 nonce, address to, uint value, bytes calldata data,\\n    uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external view returns (address[] memory) {\\n    bytes32 transactionHash = calculateTransactionHash(nonce, contractId, to, value, data);\\n    return verifySignatures(transactionHash, v, r, s);\\n  }\\n\\n  /**\\n   * Checks if the execution of a transaction would succeed if it was properly signed.\\n   */\\n  function checkExecution(address to, uint value, bytes calldata data) external {\\n    Address.functionCallWithValue(to, data, value);\\n    revert(\\\"Test passed. Reverting.\\\");\\n  }\\n\\n  function execute(uint128 nonce, address to, uint value, bytes calldata data, uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external returns (bytes memory) {\\n    bytes32 transactionHash = calculateTransactionHash(nonce, contractId, to, value, data);\\n    address[] memory found = verifySignatures(transactionHash, v, r, s);\\n    bytes memory returndata = Address.functionCallWithValue(to, data, value);\\n    flagUsed(nonce);\\n    emit Transacted(to, extractSelector(data), found);\\n    if (value > 0) {emit SentEth(to, value);}\\n    return returndata;\\n  }\\n\\n  function extractSelector(bytes calldata data) private pure returns (bytes4){\\n    if (data.length < 4){\\n      return bytes4(0);\\n    } else {\\n      return bytes4(data[0]) | (bytes4(data[1]) >> 8) | (bytes4(data[2]) >> 16) | (bytes4(data[3]) >> 24);\\n    }\\n  }\\n\\n  function toBytes (uint256 x) public pure returns (bytes memory result) {\\n    uint l = 0;\\n    uint xx = x;\\n    if (x >= 0x100000000000000000000000000000000) { x >>= 128; l += 16; }\\n    if (x >= 0x10000000000000000) { x >>= 64; l += 8; }\\n    if (x >= 0x100000000) { x >>= 32; l += 4; }\\n    if (x >= 0x10000) { x >>= 16; l += 2; }\\n    if (x >= 0x100) { x >>= 8; l += 1; }\\n    if (x > 0x0) { l += 1; }\\n    assembly {\\n      result := mload (0x40)\\n      mstore (0x40, add (result, add (l, 0x20)))\\n      mstore (add (result, l), xx)\\n      mstore (result, l)\\n    }\\n  }\\n\\n  // Note: does not work with contract creation\\n  function calculateTransactionHash(uint128 sequence, bytes memory id, address to, uint value, bytes calldata data)\\n    internal view returns (bytes32){\\n    bytes[] memory all = new bytes[](9);\\n    all[0] = toBytes(sequence); // sequence number instead of nonce\\n    all[1] = id; // contract id instead of gas price\\n    all[2] = bytes(\\\"\\\\x82\\\\x52\\\\x08\\\"); // 21000 gas limitation\\n    all[3] = abi.encodePacked (bytes1 (0x94), to);\\n    all[4] = toBytes(value);\\n    all[5] = data;\\n    all[6] = toBytes(block.chainid);\\n    all[7] = new bytes(0);\\n    for (uint i = 0; i<8; i++){\\n      if (i != 2 && i!= 3) {\\n        all[i] = RLPEncode.encodeBytes(all[i]);\\n      }\\n    }\\n    all[8] = all[7];\\n    return keccak256(RLPEncode.encodeList(all));\\n  }\\n\\n  function verifySignatures(bytes32 transactionHash, uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s)\\n    public view returns (address[] memory) {\\n    address[] memory found = new address[](r.length);\\n    if (r.length == 0 ) {\\n      revert Multisig_SignatureMissing();\\n    }\\n    for (uint i = 0; i < r.length; i++) {\\n      address signer = ecrecover(transactionHash, v[i], r[i], s[i]);\\n      uint8 signaturesNeeded = signers[signer];\\n      if (signaturesNeeded == 0 || signaturesNeeded > r.length) {\\n        revert Multisig_InvalidSignDataOrInsufficientCosigner(signer);\\n      }\\n      found[i] = signer;\\n    }\\n    requireNoDuplicates(found);\\n    return found;\\n  }\\n\\n  function requireNoDuplicates(address[] memory found) private pure {\\n    for (uint i = 0; i < found.length; i++) {\\n      for (uint j = i+1; j < found.length; j++) {\\n        if (found[i] == found[j]) {\\n          revert Multisig_DuplicateSignature(found[i]);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Call this method through execute\\n   */\\n  function setSigner(address signer, uint8 signaturesNeeded) external authorized {\\n    _setSigner(signer, signaturesNeeded);\\n    if (signerCount == 0) {\\n      revert Multisig_InsufficientSigners();\\n    }\\n  }\\n\\n  function migrate(address destination) external {\\n    _migrate(msg.sender, destination);\\n  }\\n\\n  function migrate(address source, address destination) external authorized {\\n    _migrate(source, destination);\\n  }\\n\\n  function _migrate(address source, address destination) private {\\n    // do not overwrite existing signer!\\n    if (signers[destination] > 0 ) {\\n      revert Multisig_InvalidDestination(destination);\\n    }\\n    _setSigner(destination, signers[source]);\\n    _setSigner(source, 0);\\n  }\\n\\n  function _setSigner(address signer, uint8 signaturesNeeded) private {\\n    if (Address.isContract(signer) || signer == address(0x0)) {\\n      revert Multisig_InvalidSigner(signer);\\n    }\\n    uint8 prevValue = signers[signer];\\n    signers[signer] = signaturesNeeded;\\n    if (prevValue > 0 && signaturesNeeded == 0){\\n      signerCount--;\\n    } else if (prevValue == 0 && signaturesNeeded > 0){\\n      signerCount++;\\n    }\\n    emit SignerChange(signer, signaturesNeeded);\\n  }\\n\\n  modifier authorized() {\\n    if (address(this) != msg.sender && signers[msg.sender] != 1) {\\n      revert Multisig_UnauthorizedSender(msg.sender);\\n    }\\n    _;\\n  }\\n\\n}\",\"keccak256\":\"0x19784becd152b5cf78b7951c0a53b5168c07c59af0f17cb1c51da97cbaa8a1c7\",\"license\":\"MIT\"},\"src/multisig/Nonce.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\ncontract Nonce {\\n\\n    uint256 public constant MAX_INCREASE = 100;\\n    \\n    uint256 private compound;\\n    \\n    constructor(){\\n        setBoth(128, 0);\\n    }\\n    \\n    /**\\n     * The next recommended nonce, which is the highest nonce ever used plus one.\\n     * The initial nonce is 129.\\n     */\\n    function nextNonce() external view returns (uint128){\\n        return getMax() + 1;\\n    }\\n\\n    /**\\n     * Returns whether the provided nonce can be used.\\n     * For the 100 nonces in the interval [nextNonce(), nextNonce + 99], this is always true.\\n     * For the nonces in the interval [nextNonce() - 129, nextNonce() - 1], this is true for the nonces that have not been used yet.\\n     */ \\n    function isFree(uint128 nonce) external view returns (bool){\\n        uint128 max = getMax();\\n        return isValidHighNonce(max, nonce) || isValidLowNonce(max, getRegister(), nonce);\\n    }\\n\\n    /**\\n     * Flags the given nonce as used.\\n     * Reverts if the provided nonce is not free.\\n     */\\n    function flagUsed(uint128 nonce) internal {\\n        uint256 comp = compound;\\n        uint128 max = uint128(comp);\\n        uint128 reg = uint128(comp >> 128);\\n        if (isValidHighNonce(max, nonce)){\\n            setBoth(nonce, ((reg << 1) | 0x1) << (nonce - max - 1));\\n        } else if (isValidLowNonce(max, reg, nonce)){\\n            setBoth(max, uint128(reg | 0x1 << (max - nonce - 1)));\\n        } else {\\n            revert(\\\"used\\\");\\n        }\\n    }\\n    \\n    function getMax() private view returns (uint128) {\\n        return uint128(compound);\\n    }\\n    \\n    function getRegister() private view returns (uint128) {\\n        return uint128(compound >> 128);\\n    }\\n    \\n    function setBoth(uint128 max, uint128 reg) private {\\n        compound = uint256(reg) << 128 | max;\\n    }\\n\\n    function isValidHighNonce(uint128 max, uint128 nonce) private pure returns (bool){\\n        return nonce > max && nonce <= max + MAX_INCREASE;\\n    }\\n\\n    function isValidLowNonce(uint128 max, uint128 reg, uint128 nonce) private pure returns (bool){\\n        uint256 diff = max - nonce;\\n        return diff > 0 && diff <= 128 && ((0x1 << (diff - 1)) & reg == 0);\\n    }\\n    \\n}\",\"keccak256\":\"0xa4a710e240881889df352cb42fd3399b464d66013ebefdc631a0229c6b39da1d\",\"license\":\"LicenseRef-Aktionariat\"},\"src/multisig/RLPEncode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n/**\\n * @title RLPEncode\\n * @dev A simple RLP encoding library.\\n * @author Bakaoh\\n */\\nlibrary RLPEncode {\\n    /*\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @dev RLP encodes a byte string.\\n     * @param self The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function encodeBytes(bytes memory self) internal pure returns (bytes memory) {\\n        bytes memory encoded;\\n        if (self.length == 1 && uint8(self[0]) < 128) {\\n            encoded = self;\\n        } else {\\n            encoded = abi.encodePacked(encodeLength(self.length, 128), self);\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev RLP encodes a list of RLP encoded byte byte strings.\\n     * @param self The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function encodeList(bytes[] memory self) internal pure returns (bytes memory) {\\n        bytes memory list = flatten(self);\\n        return abi.encodePacked(encodeLength(list.length, 192), list);\\n    }\\n\\n    /*\\n     * Private functions\\n     */\\n\\n    /**\\n     * @dev Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param len The length of the string or the payload.\\n     * @param offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function encodeLength(uint len, uint offset) private pure returns (bytes memory) {\\n        bytes memory encoded;\\n        if (len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = bytes32(len + offset)[31];\\n        } else {\\n            uint lenLen;\\n            uint i = 1;\\n            while (len >= i) {\\n                lenLen++;\\n                i <<= 8;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = bytes32(lenLen + offset + 55)[31];\\n            for(i = 1; i <= lenLen; i++) {\\n                encoded[i] = bytes32((len / (256**(lenLen-i))) % 256)[31];\\n            }\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function memcpy(uint _dest, uint _src, uint _len) private pure {\\n        uint dest = _dest;\\n        uint src = _src;\\n        uint len = _len;\\n\\n        for(; len >= 32; len -= 32) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint mask = type(uint).max >> (len << 3);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * @dev Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function flatten(bytes[] memory _list) private pure returns (bytes memory) {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint len;\\n        uint i;\\n        for (i = 0; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint flattenedPtr;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { flattenedPtr := add(flattened, 0x20) }\\n\\n        for(i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n            \\n            uint listPtr;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly { listPtr := add(item, 0x20)}\\n\\n            memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += item.length;\\n        }\\n\\n        return flattened;\\n    }\\n\\n}\",\"keccak256\":\"0x9b20150359fe4f8fe048881114ba275d2f96ae73c2ca5fcfac1101fd34d9f7a1\",\"license\":\"MIT\"},\"src/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\n// and modified it.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Address {\\n\\n    /// @param target Target address to call the function on.\\n    error Address_NotTransferNorContract(address target);\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n        return account.code.length > 0;\\n    }\\n    \\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 weiValue) internal returns (bytes memory) {\\n        if (data.length != 0 && !isContract(target)) {\\n            revert Address_NotTransferNorContract(target);\\n        }\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else if (returndata.length > 0) {\\n            assembly{\\n                revert (add (returndata, 0x20), mload (returndata))\\n            }\\n        } else {\\n           revert(\\\"failed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xb95d45875550203c1afb7dfc9c99ce62c77496c36e96f3adfaad2d42cb3380a2\",\"license\":\"MIT\"},\"src/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    error Initializable_AlreadyInitalized();\\n\\n    /**\\n     * @dev Modifier to protect the initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        if (_initialized) {\\n            revert Initializable_AlreadyInitalized();\\n        }\\n        _;\\n        _initialized = true;\\n    }\\n\\n}\",\"keccak256\":\"0x1e5313ca9baca269b5525c963d04aeb4b8e972e5ce7eba4f4521264b80b09240\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506080600055611fc5806100256000396000f3fe6080604052600436106100f75760003560e01c8063b5fe51631161008a578063ce5494bb11610059578063ce5494bb14610315578063d69c3d3014610335578063ecec0dfd14610362578063ffa1ad741461038257600080fd5b8063b5fe516314610278578063b6e404de146102a8578063c4d66de8146102c8578063cb6367d1146102e857600080fd5b8063775a8f5e116100c6578063775a8f5e146101f25780637ca548c6146102125780637cedbb80146102405780638291286c1461026357600080fd5b80630f43d678146101385780631068361f1461015a57806348753d001461017a578063736c0d5b146101b057600080fd5b366101335760405134815233907f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f885258749060200160405180910390a2005b600080fd5b34801561014457600080fd5b50610158610153366004611795565b610397565b005b34801561016657600080fd5b506101586101753660046117c8565b610414565b34801561018657600080fd5b5061019a610195366004611897565b610461565b6040516101a791906119b1565b60405180910390f35b3480156101bc57600080fd5b506101e06101cb3660046119e4565b60026020526000908152604090205460ff1681565b60405160ff90911681526020016101a7565b3480156101fe57600080fd5b5061019a61020d3660046119ff565b610616565b34801561021e57600080fd5b5060035461022d9061ffff1681565b60405161ffff90911681526020016101a7565b34801561024c57600080fd5b50610255606481565b6040519081526020016101a7565b34801561026f57600080fd5b5061019a6106ec565b34801561028457600080fd5b50610298610293366004611a18565b61077a565b60405190151581526020016101a7565b3480156102b457600080fd5b506101586102c3366004611a33565b6107b5565b3480156102d457600080fd5b506101586102e33660046119e4565b610840565b3480156102f457600080fd5b50610308610303366004611a8d565b6108a6565b6040516101a79190611b75565b34801561032157600080fd5b506101586103303660046119e4565b610a94565b34801561034157600080fd5b5061034a610aa1565b6040516001600160801b0390911681526020016101a7565b34801561036e57600080fd5b5061030861037d366004611897565b610ab5565b34801561038e57600080fd5b506101e0600581565b3033148015906103ba57503360009081526002602052604090205460ff16600114155b156103df57604051639584e9d960e01b81523360048201526024015b60405180910390fd5b6103e98282610aec565b60035461ffff1660000361041057604051632cfcf84f60e01b815260040160405180910390fd5b5050565b30331480159061043757503360009081526002602052604090205460ff16600114155b1561045757604051639584e9d960e01b81523360048201526024016103d6565b6104108282610c35565b606060006104fd8d6004805461047690611b88565b80601f01602080910402602001604051908101604052809291908181526020018280546104a290611b88565b80156104ef5780601f106104c4576101008083540402835291602001916104ef565b820191906000526020600020905b8154815290600101906020018083116104d257829003601f168201915b50505050508e8e8e8e610cac565b90506000610510828a8a8a8a8a8a6108a6565b905060006105638e8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508f610f65565b905061056e8f61105c565b8d6001600160a01b03167f64ada3f9bcd41ebd407b399dc401184273a19bc294825172626af05a15c95d256105a38e8e611166565b846040516105b2929190611bc2565b60405180910390a28c15610604578d6001600160a01b03167fe520273e4aa4a339e37bc204a23e5b9efd94c81719a6a4aed539c0f769e0f4cb8e6040516105fb91815260200190565b60405180910390a25b9e9d5050505050505050505050505050565b6060600082600160801b811061063b5760809390931c92610638601083611c02565b91505b6801000000000000000084106106605760409390931c9261065d600883611c02565b91505b64010000000084106106815760209390931c9261067e600483611c02565b91505b6201000084106106a05760109390931c9261069d600283611c02565b91505b61010084106106be5760089390931c926106bb600183611c02565b91505b83156106d2576106cf600183611c02565b91505b604080518381016020810190925291905290815292915050565b600480546106f990611b88565b80601f016020809104026020016040519081016040528092919081815260200182805461072590611b88565b80156107725780601f1061074757610100808354040283529160200191610772565b820191906000526020600020905b81548152906001019060200180831161075557829003601f168201915b505050505081565b60008061078660005490565b90506107928184611222565b806107ae57506107ae816107a860005460801c90565b85611267565b9392505050565b6107f78483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250610f65915050565b5060405162461bcd60e51b815260206004820152601760248201527f54657374207061737365642e20526576657274696e672e00000000000000000060448201526064016103d6565b60015460ff161561086457604051630550a61760e31b815260040160405180910390fd5b6108733063ffffffff16610616565b6004906108809082611c7a565b506003805461ffff19169055610897816001610aec565b506001805460ff191681179055565b606060008467ffffffffffffffff8111156108c3576108c3611c15565b6040519080825280602002602001820160405280156108ec578160200160208202803683370190505b509050600085900361091157604051630955614d60e11b815260040160405180910390fd5b60005b85811015610a7e57600060018b8b8b8581811061093357610933611d3a565b90506020020160208101906109489190611d50565b8a8a8681811061095a5761095a611d3a565b9050602002013589898781811061097357610973611d3a565b90506020020135604051600081526020016040526040516109b0949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa1580156109d2573d6000803e3d6000fd5b505060408051601f1901516001600160a01b03811660009081526002602052919091205490925060ff169050801580610a0d575060ff811688105b15610a365760405163c7a5f4cd60e01b81526001600160a01b03831660048201526024016103d6565b81848481518110610a4957610a49611d3a565b60200260200101906001600160a01b031690816001600160a01b03168152505050508080610a7690611d6b565b915050610914565b50610a88816112bc565b98975050505050505050565b610a9e3382610c35565b50565b60008054610ab0906001611d84565b905090565b60606000610aca8d6004805461047690611b88565b9050610adb818989898989896108a6565b9d9c50505050505050505050505050565b6001600160a01b0382163b151580610b0b57506001600160a01b038216155b15610b34576040516372156ebf60e01b81526001600160a01b03831660048201526024016103d6565b6001600160a01b0382166000908152600260205260409020805460ff83811660ff19831617909255168015801590610b6d575060ff8216155b15610ba6576003805461ffff16906000610b8683611da4565b91906101000a81548161ffff021916908361ffff16021790555050610bef565b60ff8116158015610bba575060008260ff16115b15610bef576003805461ffff16906000610bd383611dc2565b91906101000a81548161ffff021916908361ffff160217905550505b60405160ff831681526001600160a01b038416907f7f00bf87056fc9622b70d830cce34aa24d6c12881ebbc71d3bf22d0c5ae295b79060200160405180910390a2505050565b6001600160a01b03811660009081526002602052604090205460ff1615610c7a576040516303c25a2b60e31b81526001600160a01b03821660048201526024016103d6565b6001600160a01b038216600090815260026020526040902054610ca190829060ff16610aec565b610410826000610aec565b6040805160098082526101408201909252600091829190816020015b6060815260200190600190039081610cc8579050509050610cf1886001600160801b0316610616565b81600081518110610d0457610d04611d3a565b60200260200101819052508681600181518110610d2357610d23611d3a565b602002602001018190525060405180604001604052806003815260200162104a4160eb1b81525081600281518110610d5d57610d5d611d3a565b602090810291909101810191909152604051602560fa1b918101919091526bffffffffffffffffffffffff19606088901b16602182015260350160405160208183030381529060405281600381518110610db957610db9611d3a565b6020026020010181905250610dcd85610616565b81600481518110610de057610de0611d3a565b602002602001018190525083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250508351849250600591508110610e3657610e36611d3a565b6020026020010181905250610e4a46610616565b81600681518110610e5d57610e5d611d3a565b60209081029190910181019190915260408051600081529182019052815182906007908110610e8e57610e8e611d3a565b602002602001018190525060005b6008811015610f0e5780600214158015610eb7575080600314155b15610efc57610ede828281518110610ed157610ed1611d3a565b6020026020010151611394565b828281518110610ef057610ef0611d3a565b60200260200101819052505b80610f0681611d6b565b915050610e9c565b5080600781518110610f2257610f22611d3a565b602002602001015181600881518110610f3d57610f3d611d3a565b6020026020010181905250610f5181611403565b805190602001209150509695505050505050565b60608251600014158015610f8157506001600160a01b0384163b155b15610faa57604051639eb1341360e01b81526001600160a01b03851660048201526024016103d6565b600080856001600160a01b03168486604051610fc69190611de3565b60006040518083038185875af1925050503d8060008114611003576040519150601f19603f3d011682016040523d82523d6000602084013e611008565b606091505b5091509150811561101c5791506107ae9050565b80511561102b57805160208201fd5b60405162461bcd60e51b815260206004820152600660248201526519985a5b195960d21b60448201526064016103d6565b60005480608081901c61106f8285611222565b156110cc576110c78460016110848583611dff565b61108e9190611dff565b6001600160801b0319600185811b6ffffffffffffffffffffffffffffffffe16176001600160801b039283161b60801b16911617600055565b611160565b6110d7828286611267565b1561112f576110c78260016110ec8783611dff565b6110f69190611dff565b6001600160801b03166001901b836001600160801b0316176001600160801b031960809190911b166001600160801b0390911617600055565b60405162461bcd60e51b81526004016103d6906020808252600490820152631d5cd95960e21b604082015260600190565b50505050565b600060048210156111795750600061121c565b60188383600381811061118e5761118e611d3a565b909101356001600160f81b03191690911c90506010848460028181106111b6576111b6611d3a565b909101356001600160f81b03191690911c90506008858560018181106111de576111de611d3a565b909101356001600160f81b03191690911c9050858560008161120257611202611d3a565b9050013560f81c60f81b6001600160f81b03191617171790505b92915050565b6000826001600160801b0316826001600160801b03161180156107ae575061125460646001600160801b038516611c02565b826001600160801b031611159392505050565b6000806112748386611dff565b6001600160801b03169050600081118015611290575060808111155b80156112b357506001600160801b0384166112ac600183611e1f565b6001901b16155b95945050505050565b60005b81518110156104105760006112d5826001611c02565b90505b8251811015611381578281815181106112f3576112f3611d3a565b60200260200101516001600160a01b031683838151811061131657611316611d3a565b60200260200101516001600160a01b03160361136f5782828151811061133e5761133e611d3a565b602002602001015160405163ecf7e84160e01b81526004016103d691906001600160a01b0391909116815260200190565b8061137981611d6b565b9150506112d8565b508061138c81611d6b565b9150506112bf565b606080825160011480156113c257506080836000815181106113b8576113b8611d3a565b016020015160f81c105b156113ce57508161121c565b6113da83516080611447565b836040516020016113ec929190611e32565b604051602081830303815290604052905092915050565b60606000611410836115ea565b905061141e815160c0611447565b81604051602001611430929190611e32565b604051602081830303815290604052915050919050565b60608060388410156114b1576040805160018082528183019092529060208201818036833701905050905061147c8385611c02565b601f1a60f81b8160008151811061149557611495611d3a565b60200101906001600160f81b031916908160001a9053506107ae565b600060015b8086106114d257816114c781611d6b565b92505060081b6114b6565b6114dd826001611c02565b67ffffffffffffffff8111156114f5576114f5611c15565b6040519080825280601f01601f19166020018201604052801561151f576020820181803683370190505b50925061152c8583611c02565b611537906037611c02565b601f1a60f81b8360008151811061155057611550611d3a565b60200101906001600160f81b031916908160001a905350600190505b8181116115e1576101006115808284611e1f565b61158c90610100611f45565b6115969088611f67565b6115a09190611f7b565b601f1a60f81b8382815181106115b8576115b8611d3a565b60200101906001600160f81b031916908160001a905350806115d981611d6b565b91505061156c565b50509392505050565b6060815160000361160e5760408051600080825260208201909252905b5092915050565b6000805b83518110156116555783818151811061162d5761162d611d3a565b602002602001015151826116419190611c02565b91508061164d81611d6b565b915050611612565b60008267ffffffffffffffff81111561167057611670611c15565b6040519080825280601f01601f19166020018201604052801561169a576020820181803683370190505b50600092509050602081015b85518310156117045760008684815181106116c3576116c3611d3a565b6020026020010151905060006020820190506116e18382845161170d565b81516116ed9084611c02565b9250505082806116fc90611d6b565b9350506116a6565b50949350505050565b8282825b602081106117495781518352611728602084611c02565b9250611735602083611c02565b9150611742602082611e1f565b9050611711565b9051825160001960039390931b9290921c918216911916179052505050565b80356001600160a01b038116811461177f57600080fd5b919050565b803560ff8116811461177f57600080fd5b600080604083850312156117a857600080fd5b6117b183611768565b91506117bf60208401611784565b90509250929050565b600080604083850312156117db57600080fd5b6117e483611768565b91506117bf60208401611768565b80356001600160801b038116811461177f57600080fd5b60008083601f84011261181b57600080fd5b50813567ffffffffffffffff81111561183357600080fd5b60208301915083602082850101111561184b57600080fd5b9250929050565b60008083601f84011261186457600080fd5b50813567ffffffffffffffff81111561187c57600080fd5b6020830191508360208260051b850101111561184b57600080fd5b600080600080600080600080600080600060e08c8e0312156118b857600080fd5b6118c18c6117f2565b9a506118cf60208d01611768565b995060408c0135985067ffffffffffffffff8060608e013511156118f257600080fd5b6119028e60608f01358f01611809565b909950975060808d013581101561191857600080fd5b6119288e60808f01358f01611852565b909750955060a08d013581101561193e57600080fd5b61194e8e60a08f01358f01611852565b909550935060c08d013581101561196457600080fd5b506119758d60c08e01358e01611852565b81935080925050509295989b509295989b9093969950565b60005b838110156119a8578181015183820152602001611990565b50506000910152565b60208152600082518060208401526119d081604085016020870161198d565b601f01601f19169190910160400192915050565b6000602082840312156119f657600080fd5b6107ae82611768565b600060208284031215611a1157600080fd5b5035919050565b600060208284031215611a2a57600080fd5b6107ae826117f2565b60008060008060608587031215611a4957600080fd5b611a5285611768565b935060208501359250604085013567ffffffffffffffff811115611a7557600080fd5b611a8187828801611809565b95989497509550505050565b60008060008060008060006080888a031215611aa857600080fd5b87359650602088013567ffffffffffffffff80821115611ac757600080fd5b611ad38b838c01611852565b909850965060408a0135915080821115611aec57600080fd5b611af88b838c01611852565b909650945060608a0135915080821115611b1157600080fd5b50611b1e8a828b01611852565b989b979a50959850939692959293505050565b600081518084526020808501945080840160005b83811015611b6a5781516001600160a01b031687529582019590820190600101611b45565b509495945050505050565b6020815260006107ae6020830184611b31565b600181811c90821680611b9c57607f821691505b602082108103611bbc57634e487b7160e01b600052602260045260246000fd5b50919050565b63ffffffff60e01b83168152604060208201526000611be46040830184611b31565b949350505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561121c5761121c611bec565b634e487b7160e01b600052604160045260246000fd5b601f821115611c7557600081815260208120601f850160051c81016020861015611c525750805b601f850160051c820191505b81811015611c7157828155600101611c5e565b5050505b505050565b815167ffffffffffffffff811115611c9457611c94611c15565b611ca881611ca28454611b88565b84611c2b565b602080601f831160018114611cdd5760008415611cc55750858301515b600019600386901b1c1916600185901b178555611c71565b600085815260208120601f198616915b82811015611d0c57888601518255948401946001909101908401611ced565b5085821015611d2a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611d6257600080fd5b6107ae82611784565b600060018201611d7d57611d7d611bec565b5060010190565b6001600160801b0381811683821601908082111561160757611607611bec565b600061ffff821680611db857611db8611bec565b6000190192915050565b600061ffff808316818103611dd957611dd9611bec565b6001019392505050565b60008251611df581846020870161198d565b9190910192915050565b6001600160801b0382811682821603908082111561160757611607611bec565b8181038181111561121c5761121c611bec565b60008351611e4481846020880161198d565b835190830190611e5881836020880161198d565b01949350505050565b600181815b80851115611e9c578160001904821115611e8257611e82611bec565b80851615611e8f57918102915b93841c9390800290611e66565b509250929050565b600082611eb35750600161121c565b81611ec05750600061121c565b8160018114611ed65760028114611ee057611efc565b600191505061121c565b60ff841115611ef157611ef1611bec565b50506001821b61121c565b5060208310610133831016604e8410600b8410161715611f1f575081810a61121c565b611f298383611e61565b8060001904821115611f3d57611f3d611bec565b029392505050565b60006107ae8383611ea4565b634e487b7160e01b600052601260045260246000fd5b600082611f7657611f76611f51565b500490565b600082611f8a57611f8a611f51565b50069056fea2646970667358221220a20c873ba66f541bbcd7429c65fab5b20b6444a5e54a7cc9fb2a55ad22f1def864736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c8063b5fe51631161008a578063ce5494bb11610059578063ce5494bb14610315578063d69c3d3014610335578063ecec0dfd14610362578063ffa1ad741461038257600080fd5b8063b5fe516314610278578063b6e404de146102a8578063c4d66de8146102c8578063cb6367d1146102e857600080fd5b8063775a8f5e116100c6578063775a8f5e146101f25780637ca548c6146102125780637cedbb80146102405780638291286c1461026357600080fd5b80630f43d678146101385780631068361f1461015a57806348753d001461017a578063736c0d5b146101b057600080fd5b366101335760405134815233907f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f885258749060200160405180910390a2005b600080fd5b34801561014457600080fd5b50610158610153366004611795565b610397565b005b34801561016657600080fd5b506101586101753660046117c8565b610414565b34801561018657600080fd5b5061019a610195366004611897565b610461565b6040516101a791906119b1565b60405180910390f35b3480156101bc57600080fd5b506101e06101cb3660046119e4565b60026020526000908152604090205460ff1681565b60405160ff90911681526020016101a7565b3480156101fe57600080fd5b5061019a61020d3660046119ff565b610616565b34801561021e57600080fd5b5060035461022d9061ffff1681565b60405161ffff90911681526020016101a7565b34801561024c57600080fd5b50610255606481565b6040519081526020016101a7565b34801561026f57600080fd5b5061019a6106ec565b34801561028457600080fd5b50610298610293366004611a18565b61077a565b60405190151581526020016101a7565b3480156102b457600080fd5b506101586102c3366004611a33565b6107b5565b3480156102d457600080fd5b506101586102e33660046119e4565b610840565b3480156102f457600080fd5b50610308610303366004611a8d565b6108a6565b6040516101a79190611b75565b34801561032157600080fd5b506101586103303660046119e4565b610a94565b34801561034157600080fd5b5061034a610aa1565b6040516001600160801b0390911681526020016101a7565b34801561036e57600080fd5b5061030861037d366004611897565b610ab5565b34801561038e57600080fd5b506101e0600581565b3033148015906103ba57503360009081526002602052604090205460ff16600114155b156103df57604051639584e9d960e01b81523360048201526024015b60405180910390fd5b6103e98282610aec565b60035461ffff1660000361041057604051632cfcf84f60e01b815260040160405180910390fd5b5050565b30331480159061043757503360009081526002602052604090205460ff16600114155b1561045757604051639584e9d960e01b81523360048201526024016103d6565b6104108282610c35565b606060006104fd8d6004805461047690611b88565b80601f01602080910402602001604051908101604052809291908181526020018280546104a290611b88565b80156104ef5780601f106104c4576101008083540402835291602001916104ef565b820191906000526020600020905b8154815290600101906020018083116104d257829003601f168201915b50505050508e8e8e8e610cac565b90506000610510828a8a8a8a8a8a6108a6565b905060006105638e8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508f610f65565b905061056e8f61105c565b8d6001600160a01b03167f64ada3f9bcd41ebd407b399dc401184273a19bc294825172626af05a15c95d256105a38e8e611166565b846040516105b2929190611bc2565b60405180910390a28c15610604578d6001600160a01b03167fe520273e4aa4a339e37bc204a23e5b9efd94c81719a6a4aed539c0f769e0f4cb8e6040516105fb91815260200190565b60405180910390a25b9e9d5050505050505050505050505050565b6060600082600160801b811061063b5760809390931c92610638601083611c02565b91505b6801000000000000000084106106605760409390931c9261065d600883611c02565b91505b64010000000084106106815760209390931c9261067e600483611c02565b91505b6201000084106106a05760109390931c9261069d600283611c02565b91505b61010084106106be5760089390931c926106bb600183611c02565b91505b83156106d2576106cf600183611c02565b91505b604080518381016020810190925291905290815292915050565b600480546106f990611b88565b80601f016020809104026020016040519081016040528092919081815260200182805461072590611b88565b80156107725780601f1061074757610100808354040283529160200191610772565b820191906000526020600020905b81548152906001019060200180831161075557829003601f168201915b505050505081565b60008061078660005490565b90506107928184611222565b806107ae57506107ae816107a860005460801c90565b85611267565b9392505050565b6107f78483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250610f65915050565b5060405162461bcd60e51b815260206004820152601760248201527f54657374207061737365642e20526576657274696e672e00000000000000000060448201526064016103d6565b60015460ff161561086457604051630550a61760e31b815260040160405180910390fd5b6108733063ffffffff16610616565b6004906108809082611c7a565b506003805461ffff19169055610897816001610aec565b506001805460ff191681179055565b606060008467ffffffffffffffff8111156108c3576108c3611c15565b6040519080825280602002602001820160405280156108ec578160200160208202803683370190505b509050600085900361091157604051630955614d60e11b815260040160405180910390fd5b60005b85811015610a7e57600060018b8b8b8581811061093357610933611d3a565b90506020020160208101906109489190611d50565b8a8a8681811061095a5761095a611d3a565b9050602002013589898781811061097357610973611d3a565b90506020020135604051600081526020016040526040516109b0949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa1580156109d2573d6000803e3d6000fd5b505060408051601f1901516001600160a01b03811660009081526002602052919091205490925060ff169050801580610a0d575060ff811688105b15610a365760405163c7a5f4cd60e01b81526001600160a01b03831660048201526024016103d6565b81848481518110610a4957610a49611d3a565b60200260200101906001600160a01b031690816001600160a01b03168152505050508080610a7690611d6b565b915050610914565b50610a88816112bc565b98975050505050505050565b610a9e3382610c35565b50565b60008054610ab0906001611d84565b905090565b60606000610aca8d6004805461047690611b88565b9050610adb818989898989896108a6565b9d9c50505050505050505050505050565b6001600160a01b0382163b151580610b0b57506001600160a01b038216155b15610b34576040516372156ebf60e01b81526001600160a01b03831660048201526024016103d6565b6001600160a01b0382166000908152600260205260409020805460ff83811660ff19831617909255168015801590610b6d575060ff8216155b15610ba6576003805461ffff16906000610b8683611da4565b91906101000a81548161ffff021916908361ffff16021790555050610bef565b60ff8116158015610bba575060008260ff16115b15610bef576003805461ffff16906000610bd383611dc2565b91906101000a81548161ffff021916908361ffff160217905550505b60405160ff831681526001600160a01b038416907f7f00bf87056fc9622b70d830cce34aa24d6c12881ebbc71d3bf22d0c5ae295b79060200160405180910390a2505050565b6001600160a01b03811660009081526002602052604090205460ff1615610c7a576040516303c25a2b60e31b81526001600160a01b03821660048201526024016103d6565b6001600160a01b038216600090815260026020526040902054610ca190829060ff16610aec565b610410826000610aec565b6040805160098082526101408201909252600091829190816020015b6060815260200190600190039081610cc8579050509050610cf1886001600160801b0316610616565b81600081518110610d0457610d04611d3a565b60200260200101819052508681600181518110610d2357610d23611d3a565b602002602001018190525060405180604001604052806003815260200162104a4160eb1b81525081600281518110610d5d57610d5d611d3a565b602090810291909101810191909152604051602560fa1b918101919091526bffffffffffffffffffffffff19606088901b16602182015260350160405160208183030381529060405281600381518110610db957610db9611d3a565b6020026020010181905250610dcd85610616565b81600481518110610de057610de0611d3a565b602002602001018190525083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250508351849250600591508110610e3657610e36611d3a565b6020026020010181905250610e4a46610616565b81600681518110610e5d57610e5d611d3a565b60209081029190910181019190915260408051600081529182019052815182906007908110610e8e57610e8e611d3a565b602002602001018190525060005b6008811015610f0e5780600214158015610eb7575080600314155b15610efc57610ede828281518110610ed157610ed1611d3a565b6020026020010151611394565b828281518110610ef057610ef0611d3a565b60200260200101819052505b80610f0681611d6b565b915050610e9c565b5080600781518110610f2257610f22611d3a565b602002602001015181600881518110610f3d57610f3d611d3a565b6020026020010181905250610f5181611403565b805190602001209150509695505050505050565b60608251600014158015610f8157506001600160a01b0384163b155b15610faa57604051639eb1341360e01b81526001600160a01b03851660048201526024016103d6565b600080856001600160a01b03168486604051610fc69190611de3565b60006040518083038185875af1925050503d8060008114611003576040519150601f19603f3d011682016040523d82523d6000602084013e611008565b606091505b5091509150811561101c5791506107ae9050565b80511561102b57805160208201fd5b60405162461bcd60e51b815260206004820152600660248201526519985a5b195960d21b60448201526064016103d6565b60005480608081901c61106f8285611222565b156110cc576110c78460016110848583611dff565b61108e9190611dff565b6001600160801b0319600185811b6ffffffffffffffffffffffffffffffffe16176001600160801b039283161b60801b16911617600055565b611160565b6110d7828286611267565b1561112f576110c78260016110ec8783611dff565b6110f69190611dff565b6001600160801b03166001901b836001600160801b0316176001600160801b031960809190911b166001600160801b0390911617600055565b60405162461bcd60e51b81526004016103d6906020808252600490820152631d5cd95960e21b604082015260600190565b50505050565b600060048210156111795750600061121c565b60188383600381811061118e5761118e611d3a565b909101356001600160f81b03191690911c90506010848460028181106111b6576111b6611d3a565b909101356001600160f81b03191690911c90506008858560018181106111de576111de611d3a565b909101356001600160f81b03191690911c9050858560008161120257611202611d3a565b9050013560f81c60f81b6001600160f81b03191617171790505b92915050565b6000826001600160801b0316826001600160801b03161180156107ae575061125460646001600160801b038516611c02565b826001600160801b031611159392505050565b6000806112748386611dff565b6001600160801b03169050600081118015611290575060808111155b80156112b357506001600160801b0384166112ac600183611e1f565b6001901b16155b95945050505050565b60005b81518110156104105760006112d5826001611c02565b90505b8251811015611381578281815181106112f3576112f3611d3a565b60200260200101516001600160a01b031683838151811061131657611316611d3a565b60200260200101516001600160a01b03160361136f5782828151811061133e5761133e611d3a565b602002602001015160405163ecf7e84160e01b81526004016103d691906001600160a01b0391909116815260200190565b8061137981611d6b565b9150506112d8565b508061138c81611d6b565b9150506112bf565b606080825160011480156113c257506080836000815181106113b8576113b8611d3a565b016020015160f81c105b156113ce57508161121c565b6113da83516080611447565b836040516020016113ec929190611e32565b604051602081830303815290604052905092915050565b60606000611410836115ea565b905061141e815160c0611447565b81604051602001611430929190611e32565b604051602081830303815290604052915050919050565b60608060388410156114b1576040805160018082528183019092529060208201818036833701905050905061147c8385611c02565b601f1a60f81b8160008151811061149557611495611d3a565b60200101906001600160f81b031916908160001a9053506107ae565b600060015b8086106114d257816114c781611d6b565b92505060081b6114b6565b6114dd826001611c02565b67ffffffffffffffff8111156114f5576114f5611c15565b6040519080825280601f01601f19166020018201604052801561151f576020820181803683370190505b50925061152c8583611c02565b611537906037611c02565b601f1a60f81b8360008151811061155057611550611d3a565b60200101906001600160f81b031916908160001a905350600190505b8181116115e1576101006115808284611e1f565b61158c90610100611f45565b6115969088611f67565b6115a09190611f7b565b601f1a60f81b8382815181106115b8576115b8611d3a565b60200101906001600160f81b031916908160001a905350806115d981611d6b565b91505061156c565b50509392505050565b6060815160000361160e5760408051600080825260208201909252905b5092915050565b6000805b83518110156116555783818151811061162d5761162d611d3a565b602002602001015151826116419190611c02565b91508061164d81611d6b565b915050611612565b60008267ffffffffffffffff81111561167057611670611c15565b6040519080825280601f01601f19166020018201604052801561169a576020820181803683370190505b50600092509050602081015b85518310156117045760008684815181106116c3576116c3611d3a565b6020026020010151905060006020820190506116e18382845161170d565b81516116ed9084611c02565b9250505082806116fc90611d6b565b9350506116a6565b50949350505050565b8282825b602081106117495781518352611728602084611c02565b9250611735602083611c02565b9150611742602082611e1f565b9050611711565b9051825160001960039390931b9290921c918216911916179052505050565b80356001600160a01b038116811461177f57600080fd5b919050565b803560ff8116811461177f57600080fd5b600080604083850312156117a857600080fd5b6117b183611768565b91506117bf60208401611784565b90509250929050565b600080604083850312156117db57600080fd5b6117e483611768565b91506117bf60208401611768565b80356001600160801b038116811461177f57600080fd5b60008083601f84011261181b57600080fd5b50813567ffffffffffffffff81111561183357600080fd5b60208301915083602082850101111561184b57600080fd5b9250929050565b60008083601f84011261186457600080fd5b50813567ffffffffffffffff81111561187c57600080fd5b6020830191508360208260051b850101111561184b57600080fd5b600080600080600080600080600080600060e08c8e0312156118b857600080fd5b6118c18c6117f2565b9a506118cf60208d01611768565b995060408c0135985067ffffffffffffffff8060608e013511156118f257600080fd5b6119028e60608f01358f01611809565b909950975060808d013581101561191857600080fd5b6119288e60808f01358f01611852565b909750955060a08d013581101561193e57600080fd5b61194e8e60a08f01358f01611852565b909550935060c08d013581101561196457600080fd5b506119758d60c08e01358e01611852565b81935080925050509295989b509295989b9093969950565b60005b838110156119a8578181015183820152602001611990565b50506000910152565b60208152600082518060208401526119d081604085016020870161198d565b601f01601f19169190910160400192915050565b6000602082840312156119f657600080fd5b6107ae82611768565b600060208284031215611a1157600080fd5b5035919050565b600060208284031215611a2a57600080fd5b6107ae826117f2565b60008060008060608587031215611a4957600080fd5b611a5285611768565b935060208501359250604085013567ffffffffffffffff811115611a7557600080fd5b611a8187828801611809565b95989497509550505050565b60008060008060008060006080888a031215611aa857600080fd5b87359650602088013567ffffffffffffffff80821115611ac757600080fd5b611ad38b838c01611852565b909850965060408a0135915080821115611aec57600080fd5b611af88b838c01611852565b909650945060608a0135915080821115611b1157600080fd5b50611b1e8a828b01611852565b989b979a50959850939692959293505050565b600081518084526020808501945080840160005b83811015611b6a5781516001600160a01b031687529582019590820190600101611b45565b509495945050505050565b6020815260006107ae6020830184611b31565b600181811c90821680611b9c57607f821691505b602082108103611bbc57634e487b7160e01b600052602260045260246000fd5b50919050565b63ffffffff60e01b83168152604060208201526000611be46040830184611b31565b949350505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561121c5761121c611bec565b634e487b7160e01b600052604160045260246000fd5b601f821115611c7557600081815260208120601f850160051c81016020861015611c525750805b601f850160051c820191505b81811015611c7157828155600101611c5e565b5050505b505050565b815167ffffffffffffffff811115611c9457611c94611c15565b611ca881611ca28454611b88565b84611c2b565b602080601f831160018114611cdd5760008415611cc55750858301515b600019600386901b1c1916600185901b178555611c71565b600085815260208120601f198616915b82811015611d0c57888601518255948401946001909101908401611ced565b5085821015611d2a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611d6257600080fd5b6107ae82611784565b600060018201611d7d57611d7d611bec565b5060010190565b6001600160801b0381811683821601908082111561160757611607611bec565b600061ffff821680611db857611db8611bec565b6000190192915050565b600061ffff808316818103611dd957611dd9611bec565b6001019392505050565b60008251611df581846020870161198d565b9190910192915050565b6001600160801b0382811682821603908082111561160757611607611bec565b8181038181111561121c5761121c611bec565b60008351611e4481846020880161198d565b835190830190611e5881836020880161198d565b01949350505050565b600181815b80851115611e9c578160001904821115611e8257611e82611bec565b80851615611e8f57918102915b93841c9390800290611e66565b509250929050565b600082611eb35750600161121c565b81611ec05750600061121c565b8160018114611ed65760028114611ee057611efc565b600191505061121c565b60ff841115611ef157611ef1611bec565b50506001821b61121c565b5060208310610133831016604e8410600b8410161715611f1f575081810a61121c565b611f298383611e61565b8060001904821115611f3d57611f3d611bec565b029392505050565b60006107ae8383611ea4565b634e487b7160e01b600052601260045260246000fd5b600082611f7657611f76611f51565b500490565b600082611f8a57611f8a611f51565b50069056fea2646970667358221220a20c873ba66f541bbcd7429c65fab5b20b6444a5e54a7cc9fb2a55ad22f1def864736f6c63430008150033",
  "devdoc": {
    "errors": {
      "Address_NotTransferNorContract(address)": [
        {
          "params": {
            "target": "Target address to call the function on."
          }
        }
      ],
      "Multisig_DuplicateSignature(address)": [
        {
          "params": {
            "from": "The address which has produced more than one signature. "
          }
        }
      ],
      "Multisig_InvalidSignDataOrInsufficientCosigner(address)": [
        {
          "params": {
            "signer": "The ecrecover'd signer."
          }
        }
      ],
      "Multisig_InvalidSigner(address)": [
        {
          "params": {
            "signer": "The address of the invalid signer. "
          }
        }
      ],
      "Multisig_UnauthorizedSender(address)": [
        {
          "params": {
            "sender": "The msg.sender of the transaction. "
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Multisig_DuplicateSignature(address)": [
        {
          "notice": "Each signature data entry has to be from a unique address. "
        }
      ],
      "Multisig_InsufficientSigners()": [
        {
          "notice": "The multisig needs to have > 0 signers. "
        }
      ],
      "Multisig_InvalidDestination(address)": [
        {
          "notice": "Migration can't override current signer.  param destination The address to which the signer rights should be migrated. "
        }
      ],
      "Multisig_InvalidSignDataOrInsufficientCosigner(address)": [
        {
          "notice": "Sinature data isn't valid for the transaction or insufficient signer have signed the transaction. "
        }
      ],
      "Multisig_InvalidSigner(address)": [
        {
          "notice": "Signer is a contract or the 0x0 address. "
        }
      ],
      "Multisig_SignatureMissing()": [
        {
          "notice": "Call needs to provide signature data. "
        }
      ],
      "Multisig_UnauthorizedSender(address)": [
        {
          "notice": "Sender has to be single signer or the multisig itself. "
        }
      ]
    },
    "kind": "user",
    "methods": {
      "checkExecution(address,uint256,bytes)": {
        "notice": "Checks if the execution of a transaction would succeed if it was properly signed."
      },
      "checkSignatures(uint128,address,uint256,bytes,uint8[],bytes32[],bytes32[])": {
        "notice": "Checks if the provided signatures suffice to sign the transaction and if the nonce is correct."
      },
      "isFree(uint128)": {
        "notice": "Returns whether the provided nonce can be used. For the 100 nonces in the interval [nextNonce(), nextNonce + 99], this is always true. For the nonces in the interval [nextNonce() - 129, nextNonce() - 1], this is true for the nonces that have not been used yet."
      },
      "nextNonce()": {
        "notice": "The next recommended nonce, which is the highest nonce ever used plus one. The initial nonce is 129."
      },
      "setSigner(address,uint8)": {
        "notice": "Call this method through execute"
      }
    },
    "notice": "Documented in ../../doc/multisig.md Version 4: include SentEth event",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8444,
        "contract": "src/multisig/MultiSigWalletMaster.sol:MultiSigWalletMaster",
        "label": "compound",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 11393,
        "contract": "src/multisig/MultiSigWalletMaster.sol:MultiSigWalletMaster",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 7575,
        "contract": "src/multisig/MultiSigWalletMaster.sol:MultiSigWalletMaster",
        "label": "signers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 7577,
        "contract": "src/multisig/MultiSigWalletMaster.sol:MultiSigWalletMaster",
        "label": "signerCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint16"
      },
      {
        "astId": 7579,
        "contract": "src/multisig/MultiSigWalletMaster.sol:MultiSigWalletMaster",
        "label": "contractId",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}