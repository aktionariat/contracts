{
  "address": "0xc54eF2F60f3f7d88A3Fa0061f8915A97C54E682E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pricePerShare",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votePeriod",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "contract IOffer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "contract IDraggable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pricePerShare",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votePeriod",
          "type": "uint256"
        }
      ],
      "name": "predictOfferAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa77bcbd5408897cdc39a39c216d0062a15d9e32c197e84777d57778b1c86e615",
  "receipt": {
    "to": null,
    "from": "0xCc59c42d05bd66fe22FBA27016f783af43f68fa7",
    "contractAddress": "0xc54eF2F60f3f7d88A3Fa0061f8915A97C54E682E",
    "transactionIndex": 1,
    "gasUsed": "1720835",
    "logsBloom": "0x
    "blockHash": "0xfbf5a512d6515cb37734ae4890292c38c466d809987004e07690920fed1094b5",
    "transactionHash": "0xa77bcbd5408897cdc39a39c216d0062a15d9e32c197e84777d57778b1c86e615",
    "logs": [],
    "blockNumber": 117753999,
    "cumulativeGasUsed": "1764686",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "b990f9c08255a0e5013de4b5b0baf045",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votePeriod\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract IOffer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"contract IDraggable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votePeriod\",\"type\":\"uint256\"}],\"name\":\"predictOfferAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/draggable/OfferFactory.sol\":\"OfferFactory\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/ERC20/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0x2224189bcdeb28cbadfdb8d126c278df60ec39875c7929e7ffa9e2055cded960\",\"license\":\"MIT\"},\"src/ERC20/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit is IERC20 {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\",\"keccak256\":\"0x5c11d6955bfd952d3a8d4956c211c04dbe7e5b8a36bb592f0a8722ec3fbc2d7a\",\"license\":\"MIT\"},\"src/draggable/IDraggable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\ninterface IDraggable {\\n    \\n    function wrapped() external view returns (IERC20);\\n    function unwrap(uint256 amount) external;\\n    function offer() external view returns (IOffer);\\n    function oracle() external view returns (address);\\n    function drag(address buyer, IERC20 currency) external;\\n    function notifyOfferEnded() external;\\n    function votingPower(address voter) external returns (uint256);\\n    function totalVotingTokens() external view returns (uint256);\\n    function notifyVoted(address voter) external;\\n    function setTerms(string calldata _terms) external;\\n\\n}\",\"keccak256\":\"0xe39205ed4cc48a2c5acbb187b20473e9ef478aaf3937f7a94857f03eefef3c61\",\"license\":\"MIT\"},\"src/draggable/IOffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ninterface IOffer {\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n  //////////////////////////////////////////////////////////////*/\\n\\t/// Invalid msg.sender.\\n\\t/// @param sender The msg.sender of the transaction.\\n\\terror Offer_InvalidSender(address sender);\\n\\t/// Offer needs to be still open.\\n\\terror Offer_AlreadyAccepted();\\n\\t/// Offer needs to be not accepted yet.\\n\\terror Offer_NotAccepted();\\n\\t/// Sender of the offer needs to have needed funds in his account.\\n\\terror Offer_NotWellFunded();\\n\\t/// New offer not valid. `newPrice` needs to be higher than `oldPrice`.\\n\\t/// @param oldPrice Price of the old offer.\\n\\t/// @param newPrice Price of the new offer.\\n\\terror Offer_OldOfferBetter(uint256 oldPrice, uint256 newPrice);\\n\\t/// Voting needs to be still open.\\n\\terror Offer_VotingEnded();\\n\\t/// Too many (External) reported votes. `reportedVotes` needs to be less or equal to `maxVotes`.\\n\\t/// @param maxVotes The max possible votes for the token.\\n\\t/// @param reportedVotes The external reported votes + circulating supply of the token.\\n\\terror Offer_TooManyVotes(uint256 maxVotes, uint256 reportedVotes);\\n\\t/// Competing offer needs to be in the same currency.\\n\\terror Offer_OfferInWrongCurrency();\\n\\t/// Offer got already killed.\\n\\terror Offer_IsKilled();\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Function Interfaces\\n\\t//////////////////////////////////////////////////////////////*/\\n\\n\\tfunction makeCompetingOffer(IOffer newOffer) external;\\n\\n\\t// if there is a token transfer while an offer is open, the votes get transfered too\\n\\tfunction notifyMoved(address from, address to, uint256 value) external;\\n\\n\\tfunction currency() external view returns (IERC20);\\n\\n\\tfunction price() external view returns (uint256);\\n\\n\\tfunction isWellFunded() external view returns (bool);\\n\\n\\tfunction voteYes() external;\\n\\n\\tfunction voteNo() external;\\n\\n\\tfunction isKilled() external view returns (bool);\\n}\",\"keccak256\":\"0x3a0f475a851e4950132ce2861723b609156e78ed76d3c12b807ee3349be5cbfd\",\"license\":\"MIT\"},\"src/draggable/IOfferFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\n\\ninterface IOfferFactory {\\n\\n\\tfunction create(\\n\\t\\tbytes32 salt, address buyer, uint256 pricePerShare,\\tIERC20 currency,\\tuint256 quorum,\\tuint256 votePeriod\\n\\t) external payable returns (IOffer);\\n}\",\"keccak256\":\"0x048511f24b8e4278df38ee6f5fb038d53a7964cc90761780fb1ebb2e7825a532\",\"license\":\"MIT\"},\"src/draggable/Offer.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IDraggable.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\n/**\\n * @title A public offer to acquire all tokens\\n * @author Luzius Meisser, luzius@aktionariat.com\\n */\\ncontract Offer is IOffer {\\n    using SafeERC20 for IERC20;\\n\\n    address private constant LICENSE_FEE_ADDRESS = 0x29Fe8914e76da5cE2d90De98a64d0055f199d06D;\\n\\n    uint256 private constant AQUISITION_GRACE_PERIOD = 30 days;     // buyer has thirty days to complete acquisition after voting ends\\n    \\n    uint256 private constant BPS_MUL = 10000;           // basis point multiplier to be used with quorum\\n\\n    uint256 public immutable quorum;                    // Percentage of votes needed to start drag-along process in BPS, i.e. 10'000 = 100%\\n\\n    IDraggable public immutable token;\\n    address public immutable buyer;                     // who made the offer\\n    \\n    IERC20 override public immutable currency;\\n    uint256 override public immutable price;            // the price offered per share\\n\\n    enum Vote { NONE, YES, NO }                         // Used internally, represents not voted yet or yes/no vote.\\n    mapping (address => Vote) private votes;            // Who votes what\\n    uint256 public yesVotes;                            // total number of yes votes, including external votes\\n    uint256 public noVotes;                             // total number of no votes, including external votes\\n    uint256 public noExternal;                          // number of external no votes reported by oracle\\n    uint256 public yesExternal;                         // number of external yes votes reported by oracle\\n\\n    uint256 public immutable voteEnd;                   // end of vote period in block time (seconds after 1.1.1970)\\n\\n    bool public isKilled;                                      // indicator that contract disabled (replaces selfdestruct)\\n    bool public isWE;\\n\\n    event VotesChanged(uint256 yesVotes, uint256 noVotes);\\n    event OfferCreated(address indexed buyer, IDraggable indexed token, uint256 pricePerShare, IERC20 indexed currency);\\n    event OfferEnded(address indexed buyer, bool executed, string message);\\n\\n    // Not checked here, but buyer should make sure it is well funded from the beginning\\n    constructor(\\n        address _buyer,\\n        IDraggable _token,\\n        uint256 _price,\\n        IERC20 _currency,\\n        uint256 _quorum,\\n        uint256 _votePeriod\\n    ) \\n        payable \\n    {\\n        buyer = _buyer;\\n        token = _token;\\n        currency = _currency;\\n        price = _price;\\n        quorum = _quorum;\\n        // rely on time stamp is ok, no exact time stamp needed\\n        // solhint-disable-next-line not-rely-on-time\\n        voteEnd = block.timestamp + _votePeriod;\\n        emit OfferCreated(_buyer, _token, _price, _currency);\\n        // License Fee to Aktionariat AG, also ensures that offer is serious.\\n        // Any circumvention of this license fee payment is a violation of the copyright terms.\\n        payable(LICENSE_FEE_ADDRESS).transfer(3 ether);\\n    }\\n\\n    modifier onlyBuyer {\\n        _checkSender(buyer);\\n        _;\\n    }\\n\\n    modifier onlyToken {\\n        _checkSender(address(token));\\n        _;\\n    }\\n\\n    modifier onlyOracle {\\n        _checkSender(token.oracle());\\n        _;\\n    }\\n\\n    modifier votingOpen {\\n        if (!isVotingOpen()) {\\n            revert Offer_VotingEnded();\\n        }\\n        _;\\n    }\\n\\n    function makeCompetingOffer(IOffer betterOffer) external override onlyToken {\\n        if (isAccepted()) {\\n            revert Offer_AlreadyAccepted();\\n        }\\n        uint256 newPrice = betterOffer.price();\\n        if (newPrice <= price) {\\n            revert Offer_OldOfferBetter(price, newPrice);\\n        }\\n        if (currency != betterOffer.currency()) {\\n            revert Offer_OfferInWrongCurrency();\\n        }\\n        if (!betterOffer.isWellFunded()) {\\n            revert Offer_NotWellFunded();\\n        }\\n        kill(false, \\\"replaced\\\");\\n    }\\n\\n    function hasExpired() internal view returns (bool) {\\n        // rely on time stamp is ok, no exact time stamp needed\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp > voteEnd + AQUISITION_GRACE_PERIOD; \\n    }\\n\\n    function contest() external {\\n        if (hasExpired()) {\\n            kill(false, \\\"expired\\\");\\n        } else if (isDeclined()) {\\n            kill(false, \\\"declined\\\");\\n        } else if (!isWellFunded()) {\\n            kill(false, \\\"lack of funds\\\");\\n        }\\n    }\\n\\n    function cancel() external onlyBuyer {\\n        kill(false, \\\"cancelled\\\");\\n    }\\n\\n    function execute() external onlyBuyer {\\n        if (isKilled) revert Offer_IsKilled();\\n        if (!isAccepted()) revert Offer_NotAccepted();\\n        uint256 totalPrice = getTotalPrice();\\n        currency.safeTransferFrom(buyer, address(token), totalPrice);\\n        token.drag(buyer, currency);\\n        kill(true, \\\"success\\\");\\n    }\\n\\n    function getTotalPrice() internal view returns (uint256) {\\n        IERC20 tok = IERC20(address(token));\\n        return (tok.totalSupply() - tok.balanceOf(buyer)) * price;\\n    }\\n\\n    function isWellFunded() public view override returns (bool) {\\n        uint256 buyerBalance = currency.balanceOf(buyer);\\n        uint256 totalPrice = getTotalPrice();\\n        return totalPrice <= buyerBalance;\\n    }\\n\\n    function isAccepted() public view returns (bool) {\\n        if (isVotingOpen()) {\\n            // is it already clear that more than the quorum requiered will vote yes even though the vote is not over yet?\\n            return yesVotes * BPS_MUL  >= quorum * token.totalVotingTokens();\\n        } else {\\n            // did more than the quorum requiered votes say 'yes'?\\n            return yesVotes * BPS_MUL >= quorum * (yesVotes + noVotes);\\n        }\\n    }\\n\\n    function isDeclined() public view returns (bool) {\\n        if (isVotingOpen()) {\\n            // is it already clear that 25% will vote no even though the vote is not over yet?\\n            uint256 supply = token.totalVotingTokens();\\n            return (supply - noVotes) * BPS_MUL < quorum * supply;\\n        } else {\\n            // did quorum% of all cast votes say 'no'?\\n            return BPS_MUL * yesVotes < quorum * (yesVotes + noVotes);\\n        }\\n    }\\n\\n    function notifyMoved(address from, address to, uint256 value) external override onlyToken {\\n        if (isVotingOpen()) {\\n            Vote fromVoting = votes[from];\\n            Vote toVoting = votes[to];\\n            update(fromVoting, toVoting, value);\\n        }\\n    }\\n\\n    function update(Vote previousVote, Vote newVote, uint256 votes_) internal {\\n        if (previousVote != newVote) {\\n            if (previousVote == Vote.NO) {\\n                noVotes -= votes_;\\n            } else if (previousVote == Vote.YES) {\\n                yesVotes -= votes_;\\n            }\\n            if (newVote == Vote.NO) {\\n                noVotes += votes_;\\n            } else if (newVote == Vote.YES) {\\n                yesVotes += votes_;\\n            }\\n            emit VotesChanged(yesVotes, noVotes);\\n        }\\n    }\\n\\n    function isVotingOpen() public view returns (bool) {\\n        // rely on time stamp is ok, no exact time stamp needed\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp <= voteEnd && !isKilled;\\n    }\\n\\n    /**\\n     * Function to allow the oracle to report the votes of external votes (e.g. shares tokenized on other blockchains).\\n     * This functions is idempotent and sets the number of external yes and no votes. So when more votes come in, the\\n     * oracle should always report the total number of yes and no votes. Abstentions are not counted.\\n     */\\n    function reportExternalVotes(uint256 yes, uint256 no) external onlyOracle votingOpen {\\n        uint256 maxVotes = token.totalVotingTokens();\\n        uint256 reportingVotes = yes + no + IERC20(address(token)).totalSupply();\\n        if (reportingVotes > maxVotes) {\\n            revert Offer_TooManyVotes(maxVotes, reportingVotes);\\n        }\\n        // adjust total votes taking into account that the oralce might have reported different counts before\\n        yesVotes = yesVotes - yesExternal + yes;\\n        noVotes = noVotes - noExternal + no;\\n        // remember how the oracle voted in case the oracle later reports updated numbers\\n        yesExternal = yes;\\n        noExternal = no;\\n    }\\n\\n    function voteYes() external override{\\n        vote(Vote.YES);\\n    }\\n\\n    function voteNo() external override{ \\n        vote(Vote.NO);\\n    }\\n\\n    function vote(Vote newVote) internal votingOpen {\\n        Vote previousVote = votes[msg.sender];\\n        votes[msg.sender] = newVote;\\n        if(previousVote == Vote.NONE){\\n            token.notifyVoted(msg.sender);\\n        }\\n        update(previousVote, newVote, token.votingPower(msg.sender));\\n    }\\n\\n    function hasVotedYes(address voter) external view returns (bool) {\\n        return votes[voter] == Vote.YES;\\n    }\\n\\n    function hasVotedNo(address voter) external view returns (bool) {\\n        return votes[voter] == Vote.NO;\\n    }\\n\\n    function kill(bool executed, string memory message) internal {\\n        isKilled = true;\\n        emit OfferEnded(buyer, executed, message);\\n        token.notifyOfferEnded();\\n        payable(buyer).call{value:address(this).balance}(\\\"\\\");       // buyer is responsible to be able to receive Ether, else he can block cancellation\\n    }\\n\\n    /**\\n     * Checks if msg.sender is an authorized address.\\n     * @param validSender The authorized address.\\n     */\\n    function _checkSender(address validSender) internal view {\\n        if (msg.sender != validSender) {\\n            revert Offer_InvalidSender(msg.sender);\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x884587372574b636fb5c3064340836849357c351efd8f96635c7dc1b6e68ca22\",\"license\":\"LicenseRef-Aktionariat\"},\"src/draggable/OfferFactory.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Offer.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\nimport \\\"./IOfferFactory.sol\\\";\\n\\ncontract OfferFactory is IOfferFactory{\\n\\n    // It must be possible to predict the address of the offer so one can pre-fund the allowance.\\n    function predictOfferAddress(bytes32 salt, address buyer, IDraggable token, uint256 pricePerShare, IERC20 currency, uint256 quorum, uint256 votePeriod) external view returns (address) {\\n        bytes32 initCodeHash = keccak256(abi.encodePacked(type(Offer).creationCode, abi.encode(buyer, token, pricePerShare, currency, quorum, votePeriod)));\\n        bytes32 hashResult = keccak256(abi.encodePacked(bytes1(0xff), address(this), salt, initCodeHash));\\n        return address(uint160(uint256(hashResult)));\\n    }\\n\\n    // Do not call directly, msg.sender must be the token to be acquired\\n    function create(bytes32 salt, address buyer, uint256 pricePerShare, IERC20 currency, uint256 quorum, uint256 votePeriod) override external payable returns (IOffer) {\\n        IOffer offer = new Offer{value: msg.value, salt: salt}(buyer, IDraggable(msg.sender), pricePerShare, currency, quorum, votePeriod);\\n        return offer;\\n    }\\n}\",\"keccak256\":\"0xb2e234680a7997511301cbab3e99196e9ec3dd258c60687802ab5f2e52874d3f\",\"license\":\"LicenseRef-Aktionariat\"},\"src/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\n// and modified it.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Address {\\n\\n    /// @param target Target address to call the function on.\\n    error Address_NotTransferNorContract(address target);\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n        return account.code.length > 0;\\n    }\\n    \\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 weiValue) internal returns (bytes memory) {\\n        if (data.length != 0 && !isContract(target)) {\\n            revert Address_NotTransferNorContract(target);\\n        }\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else if (returndata.length > 0) {\\n            assembly{\\n                revert (add (returndata, 0x20), mload (returndata))\\n            }\\n        } else {\\n           revert(\\\"failed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xb95d45875550203c1afb7dfc9c99ce62c77496c36e96f3adfaad2d42cb3380a2\",\"license\":\"MIT\"},\"src/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// coppied and adjusted from OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../ERC20/IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../ERC20/IERC20Permit.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        if (nonceAfter != nonceBefore + 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\",\"keccak256\":\"0xa162e550fe203915126fddc231c55d28dd3f16d39be22dd48c5fc7f5ccd6fd93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561000f575f80fd5b50611e668061001d5f395ff3fe608060405260043610610028575f3560e01c8063452784bc1461002c5780634dc5e43114610067575b5f80fd5b348015610037575f80fd5b5061004b6100463660046101bf565b61007a565b6040516001600160a01b03909116815260200160405180910390f35b61004b61007536600461022b565b61014a565b5f806040518060200161008c9061019b565b601f1982820381018352601f9091011660408190526100b9908a908a908a908a908a908a90602001610283565b60408051601f19818403018152908290526100d792916020016102ea565b60408051601f1981840301815282825280516020918201206001600160f81b0319828501523060601b6bffffffffffffffffffffffff19166021850152603584019c909c5260558084019c909c528151808403909c018c5260759092019052895199019890982098975050505050505050565b5f803488908833898989896040516101619061019b565b61017096959493929190610283565b82906040518091039083f59150508015801561018e573d5f803e3d5ffd5b5098975050505050505050565b611b2a8061030783390190565b6001600160a01b03811681146101bc575f80fd5b50565b5f805f805f805f60e0888a0312156101d5575f80fd5b8735965060208801356101e7816101a8565b955060408801356101f7816101a8565b945060608801359350608088013561020e816101a8565b9699959850939692959460a0840135945060c09093013592915050565b5f805f805f8060c08789031215610240575f80fd5b863595506020870135610252816101a8565b9450604087013593506060870135610269816101a8565b9598949750929560808101359460a0909101359350915050565b6001600160a01b0396871681529486166020860152604085019390935293166060830152608082019290925260a081019190915260c00190565b5f81515f5b818110156102dc57602081850181015186830152016102c2565b505f93019283525090919050565b5f6102fe6102f883866102bd565b846102bd565b94935050505056fe61014060405260405162001b2a38038062001b2a833981016040819052620000279162000108565b6001600160a01b0380871660c05285811660a052831660e052610100849052608082905262000057814262000174565b610120526040518481526001600160a01b0380851691878216918916907f4f05be72ad7f57c27e555ace8452f56d8b1e82c9e6e1cd4fd282f34518b7729a9060200160405180910390a46040517329fe8914e76da5ce2d90de98a64d0055f199d06d905f906729a2241af62c00009082818181858883f19350505050158015620000e3573d5f803e3d5ffd5b505050505050506200019a565b6001600160a01b038116811462000105575f80fd5b50565b5f805f805f8060c087890312156200011e575f80fd5b86516200012b81620000f0565b60208801519096506200013e81620000f0565b6040880151606089015191965094506200015881620000f0565b809350506080870151915060a087015190509295509295509295565b808201808211156200019457634e487b7160e01b5f52601160045260245ffd5b92915050565b60805160a05160c05160e0516101005161012051611861620002c95f395f81816102e501528181610ec301526114d501525f818161029001528181610cfd01528181610d310152610f5c01525f8181610327015281816103df0152818161060a015281816106b10152610dcf01525f8181610221015281816103b3015281816105850152818161062c0152818161068901528181610bfa01528181610f1001528181611261015261133201525f818161037a015281816104b10152818161064d015281816106d901528181610780015281816108a00152818161094b015281816109ce01528181610ae001528181610c4e01528181610f3a015281816110c80152818161114d01526112bb01525f81816101ac0152818161053501528181610806015261086201526118615ff3fe608060405234801561000f575f80fd5b5060043610610187575f3560e01c8063a035b1fe116100d9578063e3ac83da11610093578063f6c8c41e1161006e578063f6c8c41e14610351578063fa7f1bae14610364578063fb286c651461036c578063fc0c546a14610375575f80fd5b8063e3ac83da1461031a578063e5a6b10f14610322578063ea8a1af014610349575f80fd5b8063a035b1fe1461028b578063a5e0035a146102b2578063b5b47f42146102c4578063bd3bc1d3146102cd578063ddbe8f09146102e0578063e1a1810f14610307575f80fd5b80635051a5ec116101445780638f1b4c6f1161011f5780638f1b4c6f1461025b5780638fe8a1011461026e57806390cf581c1461027b5780639b4e88aa14610283575f80fd5b80635051a5ec1461020c57806361461954146102145780637150d8ae1461021c575f80fd5b806311a439a01461018b5780631703a018146101a7578063354e5629146101ce5780633f5e3e7f146101d757806341c12a70146101ef578063448ab4c6146101f9575b5f80fd5b61019460045481565b6040519081526020015b60405180910390f35b6101947f000000000000000000000000000000000000000000000000000000000000000081565b61019460035481565b6101df61039c565b604051901515815260200161019e565b6101f761045e565b005b6101df610207366004611684565b61046a565b6101df6104a1565b6101f7610580565b6102437f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161019e565b6101df610269366004611684565b61075d565b6005546101df9060ff1681565b6101f7610765565b6101df61076f565b6101947f000000000000000000000000000000000000000000000000000000000000000081565b6005546101df90610100900460ff1681565b61019460025481565b6101f76102db36600461169f565b61089b565b6101947f000000000000000000000000000000000000000000000000000000000000000081565b6101f76103153660046116bf565b610adb565b6101f7610b4d565b6102437f000000000000000000000000000000000000000000000000000000000000000081565b6101f7610bf5565b6101f761035f366004611684565b610c49565b6101df610ec0565b61019460015481565b6102437f000000000000000000000000000000000000000000000000000000000000000081565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f9182917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610424573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061044891906116fd565b90505f610453610ef9565b919091111592915050565b6104686002611042565b565b5f60015b6001600160a01b0383165f9081526020819052604090205460ff16600281111561049a5761049a611714565b1492915050565b5f6104aa610ec0565b15610570577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561050b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061052f91906116fd565b610559907f000000000000000000000000000000000000000000000000000000000000000061173c565b612710600154610569919061173c565b1015905090565b60025460015461052f9190611753565b6105a97f00000000000000000000000000000000000000000000000000000000000000006111bc565b60055460ff16156105cd5760405163284489e360e11b815260040160405180910390fd5b6105d56104a1565b6105f25760405163d652cf2960e01b815260040160405180910390fd5b5f6105fb610ef9565b90506106726001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000846111e7565b604051637e5bcd3f60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063fcb79a7e906044015f604051808303815f87803b15801561071a575f80fd5b505af115801561072c573d5f803e3d5ffd5b5050505061075a6001604051806040016040528060078152602001667375636365737360c81b815250611247565b50565b5f600261046e565b6104686001611042565b5f610778610ec0565b1561084c575f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107da573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107fe91906116fd565b905061082a817f000000000000000000000000000000000000000000000000000000000000000061173c565b6127106002548361083b9190611766565b610845919061173c565b1091505090565b60025460015461085c9190611753565b610886907f000000000000000000000000000000000000000000000000000000000000000061173c565b6001546108959061271061173c565b10905090565b6109237f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108fa573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061091e9190611779565b6111bc565b61092b610ec0565b610948576040516317189a8360e31b815260040160405180910390fd5b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109a5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109c991906116fd565b90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a28573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a4c91906116fd565b610a568486611753565b610a609190611753565b905081811115610a92576040516344ec605760e11b815260048101839052602481018290526044015b60405180910390fd5b83600454600154610aa39190611766565b610aad9190611753565b6001556003546002548491610ac191611766565b610acb9190611753565b6002555050600491909155600355565b610b047f00000000000000000000000000000000000000000000000000000000000000006111bc565b610b0c610ec0565b15610b48576001600160a01b038084165f9081526020819052604080822054928516825290205460ff9182169116610b4582828561138d565b50505b505050565b610b556114cb565b15610b83576104685f60405180604001604052806007815260200166195e1c1a5c995960ca1b815250611247565b610b8b61076f565b15610bba576104685f60405180604001604052806008815260200167191958db1a5b995960c21b815250611247565b610bc261039c565b610468576104685f6040518060400160405280600d81526020016c6c61636b206f662066756e647360981b815250611247565b610c1e7f00000000000000000000000000000000000000000000000000000000000000006111bc565b6104685f6040518060400160405280600981526020016818d85b98d95b1b195960ba1b815250611247565b610c727f00000000000000000000000000000000000000000000000000000000000000006111bc565b610c7a6104a1565b15610c9857604051635fea7a8560e11b815260040160405180910390fd5b5f816001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cd5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cf991906116fd565b90507f00000000000000000000000000000000000000000000000000000000000000008111610d6457604051633c0e47bd60e21b81527f0000000000000000000000000000000000000000000000000000000000000000600482015260248101829052604401610a89565b816001600160a01b031663e5a6b10f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610da0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610dc49190611779565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610e155760405163497b781f60e11b815260040160405180910390fd5b816001600160a01b0316633f5e3e7f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e51573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e759190611794565b610e92576040516375677ae960e01b815260040160405180910390fd5b610ebc5f604051806040016040528060088152602001671c995c1b1858d95960c21b815250611247565b5050565b5f7f00000000000000000000000000000000000000000000000000000000000000004211158015610ef4575060055460ff16155b905090565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000091908316906370a0823190602401602060405180830381865afa158015610fa4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fc891906116fd565b826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611004573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061102891906116fd565b6110329190611766565b61103c919061173c565b91505090565b61104a610ec0565b611067576040516317189a8360e31b815260040160405180910390fd5b335f908152602081905260409020805460ff811691839160ff1916600183600281111561109657611096611714565b02179055505f8160028111156110ae576110ae611714565b03611128576040516345c8a62b60e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906345c8a62b906024015f604051808303815f87803b158015611111575f80fd5b505af1158015611123573d5f803e3d5ffd5b505050505b60405163603a39fb60e11b8152336004820152610ebc90829084906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c07473f6906024016020604051808303815f875af1158015611193573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111b791906116fd565b61138d565b336001600160a01b0382161461075a5760405163d600708f60e01b8152336004820152602401610a89565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611241908590611500565b50505050565b6005805460ff191660011790556040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907fba01adb1638f647e6baa43cb5d8d3a05ed7e59ac18415bf4c64adba235c5b2b0906112b190859085906117d5565b60405180910390a27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166332bc320b6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015611311575f80fd5b505af1158015611323573d5f803e3d5ffd5b50506040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692504791505f81818185875af1925050503d805f8114610b45576040519150601f19603f3d011682016040523d82523d5f602084013e610b45565b81600281111561139f5761139f611714565b8360028111156113b1576113b1611714565b14610b485760028360028111156113ca576113ca611714565b036113eb578060025f8282546113e09190611766565b9091555061141b9050565b60018360028111156113ff576113ff611714565b0361141b578060015f8282546114159190611766565b90915550505b600282600281111561142f5761142f611714565b03611450578060025f8282546114459190611753565b909155506114809050565b600182600281111561146457611464611714565b03611480578060015f82825461147a9190611753565b90915550505b7f8fcc50c2c4edd06d51ae66e9e21ed76b32a1766c57f491788e1aa24a1b58c2566001546002546040516114be929190918252602082015260400190565b60405180910390a1505050565b5f6114f962278d007f0000000000000000000000000000000000000000000000000000000000000000611753565b4211905090565b5f6115146001600160a01b03841683611561565b905080515f141580156115385750808060200190518101906115369190611794565b155b15610b4857604051635274afe760e01b81526001600160a01b0384166004820152602401610a89565b606061156e83835f611577565b90505b92915050565b606082515f1415801561159257506001600160a01b0384163b155b156115bb57604051639eb1341360e01b81526001600160a01b0385166004820152602401610a89565b5f80856001600160a01b031684866040516115d69190611810565b5f6040518083038185875af1925050503d805f8114611610576040519150601f19603f3d011682016040523d82523d5f602084013e611615565b606091505b509150915081156116295791506116699050565b80511561163857805160208201fd5b60405162461bcd60e51b815260206004820152600660248201526519985a5b195960d21b6044820152606401610a89565b9392505050565b6001600160a01b038116811461075a575f80fd5b5f60208284031215611694575f80fd5b813561166981611670565b5f80604083850312156116b0575f80fd5b50508035926020909101359150565b5f805f606084860312156116d1575f80fd5b83356116dc81611670565b925060208401356116ec81611670565b929592945050506040919091013590565b5f6020828403121561170d575f80fd5b5051919050565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761157157611571611728565b8082018082111561157157611571611728565b8181038181111561157157611571611728565b5f60208284031215611789575f80fd5b815161166981611670565b5f602082840312156117a4575f80fd5b81518015158114611669575f80fd5b5f5b838110156117cd5781810151838201526020016117b5565b50505f910152565b8215158152604060208201525f82518060408401526117fb8160608501602087016117b3565b601f01601f1916919091016060019392505050565b5f82516118218184602087016117b3565b919091019291505056fea2646970667358221220ed6563a8befe1e223503eb9156252824dabfd3e2ebe8bed5e7b5159903fdd26e64736f6c63430008150033a264697066735822122092804ecd9a1ca053f5f49cacf0d6b9890065d8e48215daba21419417d454f6c464736f6c63430008150033",
  "deployedBytecode": "0x608060405260043610610028575f3560e01c8063452784bc1461002c5780634dc5e43114610067575b5f80fd5b348015610037575f80fd5b5061004b6100463660046101bf565b61007a565b6040516001600160a01b03909116815260200160405180910390f35b61004b61007536600461022b565b61014a565b5f806040518060200161008c9061019b565b601f1982820381018352601f9091011660408190526100b9908a908a908a908a908a908a90602001610283565b60408051601f19818403018152908290526100d792916020016102ea565b60408051601f1981840301815282825280516020918201206001600160f81b0319828501523060601b6bffffffffffffffffffffffff19166021850152603584019c909c5260558084019c909c528151808403909c018c5260759092019052895199019890982098975050505050505050565b5f803488908833898989896040516101619061019b565b61017096959493929190610283565b82906040518091039083f59150508015801561018e573d5f803e3d5ffd5b5098975050505050505050565b611b2a8061030783390190565b6001600160a01b03811681146101bc575f80fd5b50565b5f805f805f805f60e0888a0312156101d5575f80fd5b8735965060208801356101e7816101a8565b955060408801356101f7816101a8565b945060608801359350608088013561020e816101a8565b9699959850939692959460a0840135945060c09093013592915050565b5f805f805f8060c08789031215610240575f80fd5b863595506020870135610252816101a8565b9450604087013593506060870135610269816101a8565b9598949750929560808101359460a0909101359350915050565b6001600160a01b0396871681529486166020860152604085019390935293166060830152608082019290925260a081019190915260c00190565b5f81515f5b818110156102dc57602081850181015186830152016102c2565b505f93019283525090919050565b5f6102fe6102f883866102bd565b846102bd565b94935050505056fe61014060405260405162001b2a38038062001b2a833981016040819052620000279162000108565b6001600160a01b0380871660c05285811660a052831660e052610100849052608082905262000057814262000174565b610120526040518481526001600160a01b0380851691878216918916907f4f05be72ad7f57c27e555ace8452f56d8b1e82c9e6e1cd4fd282f34518b7729a9060200160405180910390a46040517329fe8914e76da5ce2d90de98a64d0055f199d06d905f906729a2241af62c00009082818181858883f19350505050158015620000e3573d5f803e3d5ffd5b505050505050506200019a565b6001600160a01b038116811462000105575f80fd5b50565b5f805f805f8060c087890312156200011e575f80fd5b86516200012b81620000f0565b60208801519096506200013e81620000f0565b6040880151606089015191965094506200015881620000f0565b809350506080870151915060a087015190509295509295509295565b808201808211156200019457634e487b7160e01b5f52601160045260245ffd5b92915050565b60805160a05160c05160e0516101005161012051611861620002c95f395f81816102e501528181610ec301526114d501525f818161029001528181610cfd01528181610d310152610f5c01525f8181610327015281816103df0152818161060a015281816106b10152610dcf01525f8181610221015281816103b3015281816105850152818161062c0152818161068901528181610bfa01528181610f1001528181611261015261133201525f818161037a015281816104b10152818161064d015281816106d901528181610780015281816108a00152818161094b015281816109ce01528181610ae001528181610c4e01528181610f3a015281816110c80152818161114d01526112bb01525f81816101ac0152818161053501528181610806015261086201526118615ff3fe608060405234801561000f575f80fd5b5060043610610187575f3560e01c8063a035b1fe116100d9578063e3ac83da11610093578063f6c8c41e1161006e578063f6c8c41e14610351578063fa7f1bae14610364578063fb286c651461036c578063fc0c546a14610375575f80fd5b8063e3ac83da1461031a578063e5a6b10f14610322578063ea8a1af014610349575f80fd5b8063a035b1fe1461028b578063a5e0035a146102b2578063b5b47f42146102c4578063bd3bc1d3146102cd578063ddbe8f09146102e0578063e1a1810f14610307575f80fd5b80635051a5ec116101445780638f1b4c6f1161011f5780638f1b4c6f1461025b5780638fe8a1011461026e57806390cf581c1461027b5780639b4e88aa14610283575f80fd5b80635051a5ec1461020c57806361461954146102145780637150d8ae1461021c575f80fd5b806311a439a01461018b5780631703a018146101a7578063354e5629146101ce5780633f5e3e7f146101d757806341c12a70146101ef578063448ab4c6146101f9575b5f80fd5b61019460045481565b6040519081526020015b60405180910390f35b6101947f000000000000000000000000000000000000000000000000000000000000000081565b61019460035481565b6101df61039c565b604051901515815260200161019e565b6101f761045e565b005b6101df610207366004611684565b61046a565b6101df6104a1565b6101f7610580565b6102437f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161019e565b6101df610269366004611684565b61075d565b6005546101df9060ff1681565b6101f7610765565b6101df61076f565b6101947f000000000000000000000000000000000000000000000000000000000000000081565b6005546101df90610100900460ff1681565b61019460025481565b6101f76102db36600461169f565b61089b565b6101947f000000000000000000000000000000000000000000000000000000000000000081565b6101f76103153660046116bf565b610adb565b6101f7610b4d565b6102437f000000000000000000000000000000000000000000000000000000000000000081565b6101f7610bf5565b6101f761035f366004611684565b610c49565b6101df610ec0565b61019460015481565b6102437f000000000000000000000000000000000000000000000000000000000000000081565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f9182917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610424573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061044891906116fd565b90505f610453610ef9565b919091111592915050565b6104686002611042565b565b5f60015b6001600160a01b0383165f9081526020819052604090205460ff16600281111561049a5761049a611714565b1492915050565b5f6104aa610ec0565b15610570577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561050b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061052f91906116fd565b610559907f000000000000000000000000000000000000000000000000000000000000000061173c565b612710600154610569919061173c565b1015905090565b60025460015461052f9190611753565b6105a97f00000000000000000000000000000000000000000000000000000000000000006111bc565b60055460ff16156105cd5760405163284489e360e11b815260040160405180910390fd5b6105d56104a1565b6105f25760405163d652cf2960e01b815260040160405180910390fd5b5f6105fb610ef9565b90506106726001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000846111e7565b604051637e5bcd3f60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063fcb79a7e906044015f604051808303815f87803b15801561071a575f80fd5b505af115801561072c573d5f803e3d5ffd5b5050505061075a6001604051806040016040528060078152602001667375636365737360c81b815250611247565b50565b5f600261046e565b6104686001611042565b5f610778610ec0565b1561084c575f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107da573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107fe91906116fd565b905061082a817f000000000000000000000000000000000000000000000000000000000000000061173c565b6127106002548361083b9190611766565b610845919061173c565b1091505090565b60025460015461085c9190611753565b610886907f000000000000000000000000000000000000000000000000000000000000000061173c565b6001546108959061271061173c565b10905090565b6109237f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108fa573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061091e9190611779565b6111bc565b61092b610ec0565b610948576040516317189a8360e31b815260040160405180910390fd5b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109a5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109c991906116fd565b90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a28573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a4c91906116fd565b610a568486611753565b610a609190611753565b905081811115610a92576040516344ec605760e11b815260048101839052602481018290526044015b60405180910390fd5b83600454600154610aa39190611766565b610aad9190611753565b6001556003546002548491610ac191611766565b610acb9190611753565b6002555050600491909155600355565b610b047f00000000000000000000000000000000000000000000000000000000000000006111bc565b610b0c610ec0565b15610b48576001600160a01b038084165f9081526020819052604080822054928516825290205460ff9182169116610b4582828561138d565b50505b505050565b610b556114cb565b15610b83576104685f60405180604001604052806007815260200166195e1c1a5c995960ca1b815250611247565b610b8b61076f565b15610bba576104685f60405180604001604052806008815260200167191958db1a5b995960c21b815250611247565b610bc261039c565b610468576104685f6040518060400160405280600d81526020016c6c61636b206f662066756e647360981b815250611247565b610c1e7f00000000000000000000000000000000000000000000000000000000000000006111bc565b6104685f6040518060400160405280600981526020016818d85b98d95b1b195960ba1b815250611247565b610c727f00000000000000000000000000000000000000000000000000000000000000006111bc565b610c7a6104a1565b15610c9857604051635fea7a8560e11b815260040160405180910390fd5b5f816001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cd5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cf991906116fd565b90507f00000000000000000000000000000000000000000000000000000000000000008111610d6457604051633c0e47bd60e21b81527f0000000000000000000000000000000000000000000000000000000000000000600482015260248101829052604401610a89565b816001600160a01b031663e5a6b10f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610da0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610dc49190611779565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610e155760405163497b781f60e11b815260040160405180910390fd5b816001600160a01b0316633f5e3e7f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e51573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e759190611794565b610e92576040516375677ae960e01b815260040160405180910390fd5b610ebc5f604051806040016040528060088152602001671c995c1b1858d95960c21b815250611247565b5050565b5f7f00000000000000000000000000000000000000000000000000000000000000004211158015610ef4575060055460ff16155b905090565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000091908316906370a0823190602401602060405180830381865afa158015610fa4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fc891906116fd565b826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611004573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061102891906116fd565b6110329190611766565b61103c919061173c565b91505090565b61104a610ec0565b611067576040516317189a8360e31b815260040160405180910390fd5b335f908152602081905260409020805460ff811691839160ff1916600183600281111561109657611096611714565b02179055505f8160028111156110ae576110ae611714565b03611128576040516345c8a62b60e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906345c8a62b906024015f604051808303815f87803b158015611111575f80fd5b505af1158015611123573d5f803e3d5ffd5b505050505b60405163603a39fb60e11b8152336004820152610ebc90829084906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c07473f6906024016020604051808303815f875af1158015611193573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111b791906116fd565b61138d565b336001600160a01b0382161461075a5760405163d600708f60e01b8152336004820152602401610a89565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611241908590611500565b50505050565b6005805460ff191660011790556040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907fba01adb1638f647e6baa43cb5d8d3a05ed7e59ac18415bf4c64adba235c5b2b0906112b190859085906117d5565b60405180910390a27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166332bc320b6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015611311575f80fd5b505af1158015611323573d5f803e3d5ffd5b50506040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692504791505f81818185875af1925050503d805f8114610b45576040519150601f19603f3d011682016040523d82523d5f602084013e610b45565b81600281111561139f5761139f611714565b8360028111156113b1576113b1611714565b14610b485760028360028111156113ca576113ca611714565b036113eb578060025f8282546113e09190611766565b9091555061141b9050565b60018360028111156113ff576113ff611714565b0361141b578060015f8282546114159190611766565b90915550505b600282600281111561142f5761142f611714565b03611450578060025f8282546114459190611753565b909155506114809050565b600182600281111561146457611464611714565b03611480578060015f82825461147a9190611753565b90915550505b7f8fcc50c2c4edd06d51ae66e9e21ed76b32a1766c57f491788e1aa24a1b58c2566001546002546040516114be929190918252602082015260400190565b60405180910390a1505050565b5f6114f962278d007f0000000000000000000000000000000000000000000000000000000000000000611753565b4211905090565b5f6115146001600160a01b03841683611561565b905080515f141580156115385750808060200190518101906115369190611794565b155b15610b4857604051635274afe760e01b81526001600160a01b0384166004820152602401610a89565b606061156e83835f611577565b90505b92915050565b606082515f1415801561159257506001600160a01b0384163b155b156115bb57604051639eb1341360e01b81526001600160a01b0385166004820152602401610a89565b5f80856001600160a01b031684866040516115d69190611810565b5f6040518083038185875af1925050503d805f8114611610576040519150601f19603f3d011682016040523d82523d5f602084013e611615565b606091505b509150915081156116295791506116699050565b80511561163857805160208201fd5b60405162461bcd60e51b815260206004820152600660248201526519985a5b195960d21b6044820152606401610a89565b9392505050565b6001600160a01b038116811461075a575f80fd5b5f60208284031215611694575f80fd5b813561166981611670565b5f80604083850312156116b0575f80fd5b50508035926020909101359150565b5f805f606084860312156116d1575f80fd5b83356116dc81611670565b925060208401356116ec81611670565b929592945050506040919091013590565b5f6020828403121561170d575f80fd5b5051919050565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761157157611571611728565b8082018082111561157157611571611728565b8181038181111561157157611571611728565b5f60208284031215611789575f80fd5b815161166981611670565b5f602082840312156117a4575f80fd5b81518015158114611669575f80fd5b5f5b838110156117cd5781810151838201526020016117b5565b50505f910152565b8215158152604060208201525f82518060408401526117fb8160608501602087016117b3565b601f01601f1916919091016060019392505050565b5f82516118218184602087016117b3565b919091019291505056fea2646970667358221220ed6563a8befe1e223503eb9156252824dabfd3e2ebe8bed5e7b5159903fdd26e64736f6c63430008150033a264697066735822122092804ecd9a1ca053f5f49cacf0d6b9890065d8e48215daba21419417d454f6c464736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}