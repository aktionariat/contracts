{
  "address": "0xd70Cd32bF9BA7F0355CF3fE55929FCe461e2b9e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "contract IQuoter",
          "name": "_quoter",
          "type": "address"
        },
        {
          "internalType": "contract ISwapRouter",
          "name": "swapRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "Address_NotTransferNorContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "PaymentHub_InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swappedAmount",
          "type": "uint256"
        }
      ],
      "name": "PaymentHub_SwapError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymentHub_TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oldForwarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newForwarder",
          "type": "address"
        }
      ],
      "name": "ForwarderChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20In",
          "type": "address"
        }
      ],
      "name": "approveERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newForwarder",
          "type": "address"
        }
      ],
      "name": "changeForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "exactOutput",
          "type": "bool"
        }
      ],
      "name": "getPriceERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountInBase",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        }
      ],
      "name": "getPriceInERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountInBase",
          "type": "uint256"
        },
        {
          "internalType": "contract IBrokerbot",
          "name": "brokerBot",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        }
      ],
      "name": "getPriceInEther",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "multiPay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "contract IBrokerbot[]",
          "name": "brokerbots",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        }
      ],
      "name": "multiPayAndNotify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBrokerbot",
          "name": "brokerbot",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountInBase",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        }
      ],
      "name": "payAndNotify",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "contract IBrokerbot",
          "name": "brokerbot",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        }
      ],
      "name": "payAndNotify",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMaximum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "erc20In",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "payFromERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBrokerbot",
          "name": "brokerbot",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountBase",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountInMaximum",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        }
      ],
      "name": "payFromERC20AndNotify",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountInBase",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        }
      ],
      "name": "payFromEther",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBrokerbot",
          "name": "brokerbot",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountBase",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        }
      ],
      "name": "payFromEtherAndNotify",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceInEther",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sharesOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "ercAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBrokerbot",
          "name": "brokerbot",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "shares",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToSell",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISwapRouter.ExactInputParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "unwrapWeth",
          "type": "bool"
        }
      ],
      "name": "sellSharesAndSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBrokerbot",
          "name": "brokerbot",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Permit",
          "name": "shares",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToSell",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "exFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PaymentHub.PermitInfo",
          "name": "permitInfo",
          "type": "tuple"
        }
      ],
      "name": "sellSharesWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBrokerbot",
          "name": "brokerbot",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Permit",
          "name": "shares",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToSell",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "exFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PaymentHub.PermitInfo",
          "name": "permitInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISwapRouter.ExactInputParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "unwrapWeth",
          "type": "bool"
        }
      ],
      "name": "sellSharesWithPermitAndSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferEther",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2480af40f9d7cf4534244ebc5c0c6e7ef42ee603b86aaf4e58406fb790a32787",
  "receipt": {
    "to": null,
    "from": "0xCc59c42d05bd66fe22FBA27016f783af43f68fa7",
    "contractAddress": "0xd70Cd32bF9BA7F0355CF3fE55929FCe461e2b9e0",
    "transactionIndex": 1,
    "gasUsed": "1982722",
    "logsBloom": "0x
    "blockHash": "0xdd035e06434a41b2c0aba24010458069a5bc5a60fa994b27ee9de6487136e1e3",
    "transactionHash": "0x2480af40f9d7cf4534244ebc5c0c6e7ef42ee603b86aaf4e58406fb790a32787",
    "logs": [],
    "blockNumber": 120655391,
    "cumulativeGasUsed": "2026573",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCc59c42d05bd66fe22FBA27016f783af43f68fa7",
    "0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6",
    "0xE592427A0AEce92De3Edee1F18E0157C05861564"
  ],
  "numDeployments": 4,
  "solcInputHash": "83db784ab1d5b7d9a29fe746b39de192",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"contract IQuoter\",\"name\":\"_quoter\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"swapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Address_NotTransferNorContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"PaymentHub_InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swappedAmount\",\"type\":\"uint256\"}],\"name\":\"PaymentHub_SwapError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentHub_TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newForwarder\",\"type\":\"address\"}],\"name\":\"ForwarderChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20In\",\"type\":\"address\"}],\"name\":\"approveERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newForwarder\",\"type\":\"address\"}],\"name\":\"changeForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"exactOutput\",\"type\":\"bool\"}],\"name\":\"getPriceERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"name\":\"getPriceInERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"contract IBrokerbot\",\"name\":\"brokerBot\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"name\":\"getPriceInEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiPay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IBrokerbot[]\",\"name\":\"brokerbots\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"multiPayAndNotify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBrokerbot\",\"name\":\"brokerbot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"payAndNotify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IBrokerbot\",\"name\":\"brokerbot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"payAndNotify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20In\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"payFromERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBrokerbot\",\"name\":\"brokerbot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"payFromERC20AndNotify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"name\":\"payFromEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBrokerbot\",\"name\":\"brokerbot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountBase\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"name\":\"payFromEtherAndNotify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInEther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"ercAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBrokerbot\",\"name\":\"brokerbot\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"shares\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"unwrapWeth\",\"type\":\"bool\"}],\"name\":\"sellSharesAndSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBrokerbot\",\"name\":\"brokerbot\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Permit\",\"name\":\"shares\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"exFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaymentHub.PermitInfo\",\"name\":\"permitInfo\",\"type\":\"tuple\"}],\"name\":\"sellSharesWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBrokerbot\",\"name\":\"brokerbot\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Permit\",\"name\":\"shares\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"exFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaymentHub.PermitInfo\",\"name\":\"permitInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"unwrapWeth\",\"type\":\"bool\"}],\"name\":\"sellSharesWithPermitAndSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"Address_NotTransferNorContract(address)\":[{\"params\":{\"target\":\"Target address to call the function on.\"}}],\"PaymentHub_InvalidSender(address)\":[{\"params\":{\"sender\":\"The msg.sender of this transaction.\"}}],\"PaymentHub_SwapError(uint256,uint256)\":[{\"params\":{\"amountBase\":\"Required amount.\",\"swappedAmount\":\"Swapped amount.\"}}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"approveERC20(address)\":{\"details\":\"This function needs to be called before using the PaymentHub the first time with a new ERC20 token.\",\"params\":{\"erc20In\":\"The erc20 addresse to approve.\"}},\"changeForwarder(address)\":{\"params\":{\"newForwarder\":\"The new trusted forwarder.\"}},\"getPriceERC20(uint256,bytes,bool)\":{\"params\":{\"amount\":\"The exact amount which you want get out (exactOutput) or you put in (exactInput).\",\"exactOutput\":\"True if exactOutput should be used or false if exactInput should be used.\",\"path\":\"The path of the swap (inreverse order for exactOutput).\"}},\"getPriceInERC20(uint256,bytes)\":{\"params\":{\"amountInBase\":\"The amount of the base currency for the exact output.\",\"path\":\"The encoded path of the swap from erc20 to base.\"},\"returns\":{\"_0\":\"amount quoted to pay\"}},\"getPriceInEther(uint256,address,bytes)\":{\"returns\":{\"_0\":\"The price in wei.\"}},\"payAndNotify(address,uint256,bytes)\":{\"details\":\"Equivalent to xchf.transferAndCall(brokerbot, amountInBase)\",\"params\":{\"amountInBase\":\"The amount of base currency used to buy shares.\",\"brokerbot\":\"The brokerbot to pay and receive the shares from.\",\"ref\":\"The reference data blob.\"},\"returns\":{\"_0\":\"The amount of shares bought\"}},\"payFromERC20(uint256,uint256,address,bytes,address)\":{\"details\":\"The calling address must approve this contract to spend its ERC20 for this function to succeed. As the amount of input ERC20 is variable, the calling address will need to approve for a slightly higher or infinit amount, anticipating some variance.\",\"params\":{\"amountInMaximum\":\"The maximum amount of ERC20 willing to be swapped for the specified amountOut of baseCurrency.\",\"amountOut\":\"The desired amount of baseCurrency.\",\"erc20In\":\"The address of the erc20 token to pay with.\",\"path\":\"The encoded path of the swap from erc20 to base.\",\"recipient\":\"The reciving address - brokerbot.\"},\"returns\":{\"amountIn\":\"The amountIn of ERC20 actually spent to receive the desired amountOut.\"}},\"payFromEtherAndNotify(address,uint256,bytes,bytes)\":{\"params\":{\"amountBase\":\"The amount of base currency used to buy shares.\",\"brokerbot\":\"The brokerbot to pay and receive the shares from.\",\"path\":\"The Uniswap path from ETH to base currency (uses exactOuput => reverse order)\",\"ref\":\"The reference data blob.\"},\"returns\":{\"priceInEther\":\"The amount of Ether spent.\",\"sharesOut\":\"The amount of shares bought.\"}},\"recover(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to transfer.\",\"ercAddress\":\"The erc20 address.\",\"to\":\"The address to transfer tokens to.\"}},\"sellSharesAndSwap(address,address,uint256,bytes,(bytes,address,uint256,uint256,uint256),bool)\":{\"params\":{\"amountToSell\":\"The amount of shares to sell.\",\"brokerbot\":\"The brokerbot of the shares to sell.\",\"params\":\"Information about the swap.\",\"ref\":\"Reference e.g. insider declaration and the type of sell.\",\"shares\":\"The (draggable)shares address.\"},\"returns\":{\"_0\":\"The output amount of the swap to the desired token.\"}},\"sellSharesWithPermit(address,address,address,address,uint256,bytes,(uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"amountToSell\":\"The amount the seller wants to sell.\",\"brokerbot\":\"The brokerbot to recive the shares.\",\"permitInfo\":\"Information about the permit.\",\"recipient\":\"The address of the recipient of the sell preceeds.\",\"ref\":\"Reference e.g. insider declaration and the type of sell.\",\"seller\":\"The address of the seller.\"},\"returns\":{\"_0\":\"The base currency amount for the selling of the shares.\"}},\"sellSharesWithPermitAndSwap(address,address,address,uint256,bytes,(uint256,uint256,uint8,bytes32,bytes32),(bytes,address,uint256,uint256,uint256),bool)\":{\"params\":{\"amountToSell\":\"The amount of shares to sell.\",\"brokerbot\":\"The brokerbot of the shares to sell.\",\"params\":\"Information about the swap.\",\"permitInfo\":\"Information about the permit.\",\"ref\":\"Reference e.g. insider declaration and the type of sell.\",\"seller\":\"The seller address.\",\"shares\":\"The (draggable)shares address.\"},\"returns\":{\"_0\":\"The output amount of the swap to the desired token.\"}},\"transferEther(address)\":{\"details\":\"Used with the mutlisigwallet.\",\"params\":{\"to\":\"The address to transfer ether to.\"}},\"withdrawEther(address,uint256)\":{\"params\":{\"to\":\"The address to transfer ether to.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"PaymentHub_InvalidSender(address)\":[{\"notice\":\"Sender not trusted.\"}],\"PaymentHub_SwapError(uint256,uint256)\":[{\"notice\":\"swap with less base token as required.\"}],\"PaymentHub_TransferFailed()\":[{\"notice\":\"Failguard when an erc20 transfer returns false. \"}]},\"kind\":\"user\",\"methods\":{\"approveERC20(address)\":{\"notice\":\"This function appoves infinite allowance for Uniswap, this is safe as the paymenthub should never hold any token (see also recover() ).\"},\"changeForwarder(address)\":{\"notice\":\"Change the trusted forwarder.\"},\"getPriceERC20(uint256,bytes,bool)\":{\"notice\":\"Get price for given amount and path swapped via uniswap. \"},\"getPriceInERC20(uint256,bytes)\":{\"notice\":\"Get price in ERC20 This is the method that the Brokerbot widget should use to quote the price to the user.\"},\"getPriceInEther(uint256,address,bytes)\":{\"notice\":\"Get price in Ether via swap path (no oracle on polygon) This is the method that the Brokerbot widget should use to quote the price to the user.\"},\"multiPayAndNotify(address,address[],uint256[],bytes)\":{\"notice\":\"Can (at least in theory) save some gas as the sender balance only is touched in one transaction.\"},\"payAndNotify(address,uint256,bytes)\":{\"notice\":\"Allows to make a base currency payment from the sender to the brokerbot, given an allowance to this contract.\"},\"payFromEther(address,uint256,bytes)\":{\"notice\":\"Convenience method to swap ether into base and pay a target address\"},\"payFromEtherAndNotify(address,uint256,bytes,bytes)\":{\"notice\":\"Pay with Ether to buy shares.\"},\"recover(address,address,uint256)\":{\"notice\":\"In case tokens have been accidentally sent directly to this contract. Only Forwarder can withdraw, else a MEV bot will intercept it.\"},\"sellSharesAndSwap(address,address,uint256,bytes,(bytes,address,uint256,uint256,uint256),bool)\":{\"notice\":\"With this function a user can sell shares and swap them to a desired token. The user has to approve the paymenthub before on the shares contract.\"},\"sellSharesWithPermit(address,address,address,address,uint256,bytes,(uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Sell shares with permit\"},\"sellSharesWithPermitAndSwap(address,address,address,uint256,bytes,(uint256,uint256,uint8,bytes32,bytes32),(bytes,address,uint256,uint256,uint256),bool)\":{\"notice\":\"With this function a user can sell shares with permit and swap them to a desired token.\"},\"transferEther(address)\":{\"notice\":\"Transfer ether to a given address.\"},\"withdrawEther(address,uint256)\":{\"notice\":\"Transfer ether to a given address. Only Forwarder can withdraw, else a MEV bot will intercept it.\"}},\"notice\":\"A hub for payments. This allows tokens that do not support ERC 677 to enjoy similar functionality, namely interacting with a token-handling smart contract in one transaction, without having to set an allowance first. Instead, an allowance needs to be set only once, namely for this contract. Further, it supports automatic conversion from Ether to the payment currency through Uniswap or the reception of Ether using the current exchange rate as found in the chainlink oracle.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/brokerbot/PaymentHub.sol\":\"PaymentHub\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/ERC20/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0x2224189bcdeb28cbadfdb8d126c278df60ec39875c7929e7ffa9e2055cded960\",\"license\":\"MIT\"},\"src/ERC20/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit is IERC20 {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\",\"keccak256\":\"0x5c11d6955bfd952d3a8d4956c211c04dbe7e5b8a36bb592f0a8722ec3fbc2d7a\",\"license\":\"MIT\"},\"src/brokerbot/IBrokerbot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../ERC20/IERC20Permit.sol\\\";\\n\\ninterface IBrokerbot {\\n\\n  function base() external view returns (IERC20);\\n\\n  function token() external view returns (IERC20Permit);\\n  \\n  function settings() external view returns (uint256);\\n\\n  // @return The amount of shares bought on buying or how much in the base currency is transfered on selling\\n  function processIncoming(IERC20 token_, address from, uint256 amount, bytes calldata ref) external payable returns (uint256);\\n\\n}\",\"keccak256\":\"0x705fb7f86f1197c5eab05358710d53a58a3a92c61a284fdcfa1a3620ff0aafa1\",\"license\":\"MIT\"},\"src/brokerbot/IUniswapV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from \\n// https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol\\n// https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ninterface IQuoter {\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n    \\n    // solhint-disable-next-line func-name-mixedcase\\n    function WETH9() external view returns (address);\\n}\\n\\ninterface ISwapRouter {\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n    \\n    function refundETH() external payable;\\n}\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xd1fe06efa70710c24624abbfe0ed5ab69a47e9d3ec70734ea6e813711ff69784\",\"license\":\"MIT\"},\"src/brokerbot/PaymentHub.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../ERC20/IERC20Permit.sol\\\";\\nimport \\\"./IUniswapV3.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"./IBrokerbot.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\n\\n/**\\n * A hub for payments. This allows tokens that do not support ERC 677 to enjoy similar functionality,\\n * namely interacting with a token-handling smart contract in one transaction, without having to set an allowance first.\\n * Instead, an allowance needs to be set only once, namely for this contract.\\n * Further, it supports automatic conversion from Ether to the payment currency through Uniswap or the reception of Ether\\n * using the current exchange rate as found in the chainlink oracle.\\n */\\ncontract PaymentHub {\\n\\n    using SafeERC20 for IERC20;\\n\\n    // Version history\\n    // Version 4: added path to pay with any ecr20 via uniswap\\n    // Version 5: added sell via permit\\n    // Version 6: added transferEther function\\n    // Version 7: added sell against eth and erc20, version, add permitinfo/swapinfo struct\\n    // Version 8: use SafeERC20 for transfers\\n    // Version 8a: remove unused vars, function for keep eth\\n    // Version 9: change payFromEther to include a swap path\\n    uint256 public constant VERSION = 9;\\n\\n    address public trustedForwarder;\\n\\n    uint24 private constant DEFAULT_FEE = 3000;\\n    IQuoter private immutable uniswapQuoter;\\n    ISwapRouter private immutable uniswapRouter;\\n\\n    struct PermitInfo {\\n        uint256 exFee;\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // event to when new forwarder is set\\n    event ForwarderChanged(address indexed _oldForwarder, address indexed _newForwarder);\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n    //////////////////////////////////////////////////////////////*/\\n    /// Failguard when an erc20 transfer returns false. \\n    error PaymentHub_TransferFailed();\\n    /// Sender not trusted.\\n    /// @param sender The msg.sender of this transaction.\\n    error PaymentHub_InvalidSender(address sender);\\n    /// swap with less base token as required.\\n    /// @param amountBase Required amount.\\n    /// @param swappedAmount Swapped amount.\\n    error PaymentHub_SwapError(uint256 amountBase, uint256 swappedAmount);\\n\\n    constructor(address _trustedForwarder, IQuoter _quoter, ISwapRouter swapRouter) {\\n        trustedForwarder = _trustedForwarder;\\n        uniswapQuoter = _quoter;\\n        uniswapRouter = swapRouter;\\n    }\\n\\n    modifier onlySellerAndForwarder(address seller) {\\n        if (msg.sender != trustedForwarder && msg.sender != seller) {\\n            revert PaymentHub_InvalidSender(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyForwarder() {\\n        if (msg.sender != trustedForwarder) {\\n            revert PaymentHub_InvalidSender(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Change the trusted forwarder.\\n     * @param newForwarder The new trusted forwarder.\\n     */\\n     function changeForwarder(address newForwarder) external onlyForwarder {\\n        trustedForwarder = newForwarder;\\n        emit ForwarderChanged(msg.sender, newForwarder);\\n    }\\n\\n    /**  \\n     * Get price in ERC20\\n     * This is the method that the Brokerbot widget should use to quote the price to the user.\\n     * @param amountInBase The amount of the base currency for the exact output.\\n     * @param path The encoded path of the swap from erc20 to base.\\n     * @return amount quoted to pay\\n     */\\n    function getPriceInERC20(uint256 amountInBase, bytes memory path) public returns (uint256) {\\n        return getPriceERC20(amountInBase, path, true);\\n    }\\n    \\n    /**\\n     * @notice Get price for given amount and path swapped via uniswap. \\n     * @param amount The exact amount which you want get out (exactOutput) or you put in (exactInput).\\n     * @param path The path of the swap (inreverse order for exactOutput).\\n     * @param exactOutput True if exactOutput should be used or false if exactInput should be used.\\n     */\\n    function getPriceERC20(uint256 amount, bytes memory path, bool exactOutput) public returns (uint256) {\\n        if (exactOutput) {\\n            return uniswapQuoter.quoteExactOutput(\\n                path,\\n                amount\\n            );\\n        } else {\\n            return uniswapQuoter.quoteExactInput(\\n                path,\\n                amount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Get price in Ether via swap path (no oracle on polygon)\\n     * This is the method that the Brokerbot widget should use to quote the price to the user.\\n     * @return The price in wei.\\n     */\\n    function getPriceInEther(uint256 amountInBase, IBrokerbot brokerBot, bytes calldata path) public returns (uint256) {\\n        return getPriceERC20(amountInBase, path, true);\\n    }\\n\\n    /**\\n     * Convenience method to swap ether into base and pay a target address\\n     */\\n    function payFromEther(address recipient, uint256 amountInBase, bytes memory path) public payable returns (uint256 amountIn) {\\n        ISwapRouter swapRouter = uniswapRouter;\\n        // The parameter path is encoded as (tokenOut, fee, tokenIn/tokenOut, fee, tokenIn)\\n        ISwapRouter.ExactOutputParams memory params =\\n            ISwapRouter.ExactOutputParams({\\n                path: path,\\n                recipient: recipient,\\n                // solhint-disable-next-line not-rely-on-time\\n                deadline: block.timestamp,\\n                amountOut: amountInBase,\\n                amountInMaximum: msg.value\\n            });\\n\\n        // Executes the swap, returning the amountIn actually spent.\\n        amountIn = swapRouter.exactOutput{value: msg.value}(params);\\n\\n        // For exact output swaps, the amountInMaximum may not have all been spent.\\n        // If the actual amount spent (amountIn) is less than the specified maximum amount, we must refund the msg.sender and approve the swapRouter to spend 0.\\n        if (amountIn < msg.value) {\\n            swapRouter.refundETH();\\n            (bool success, ) = msg.sender.call{value:msg.value - amountIn}(\\\"\\\"); // return change\\n            if (!success) {\\n                revert PaymentHub_TransferFailed();\\n            }\\n        }\\n    }\\n\\n    /// @dev The calling address must approve this contract to spend its ERC20 for this function to succeed. As the amount of input ERC20 is variable,\\n    /// the calling address will need to approve for a slightly higher or infinit amount, anticipating some variance.\\n    /// @param amountOut The desired amount of baseCurrency.\\n    /// @param amountInMaximum The maximum amount of ERC20 willing to be swapped for the specified amountOut of baseCurrency.\\n    /// @param erc20In The address of the erc20 token to pay with.\\n    /// @param path The encoded path of the swap from erc20 to base.\\n    /// @param recipient The reciving address - brokerbot.\\n    /// @return amountIn The amountIn of ERC20 actually spent to receive the desired amountOut.\\n    function payFromERC20(uint256 amountOut, uint256 amountInMaximum, address erc20In, bytes memory path, address recipient) public returns (uint256 amountIn) {\\n        ISwapRouter swapRouter = uniswapRouter;\\n        // Transfer the specified `amountInMaximum` to this contract.\\n        IERC20(erc20In).safeTransferFrom(msg.sender, address(this), amountInMaximum);\\n\\n        // The parameter path is encoded as (tokenOut, fee, tokenIn/tokenOut, fee, tokenIn)\\n        ISwapRouter.ExactOutputParams memory params =\\n            ISwapRouter.ExactOutputParams({\\n                path: path,\\n                recipient: recipient,\\n                // solhint-disable-next-line not-rely-on-time\\n                deadline: block.timestamp,\\n                amountOut: amountOut,\\n                amountInMaximum: amountInMaximum\\n            });\\n\\n        // Executes the swap, returning the amountIn actually spent.\\n        amountIn = swapRouter.exactOutput(params);\\n\\n        // If the swap did not require the full amountInMaximum to achieve the exact amountOut then we refund msg.sender and approve the router to spend 0.\\n        if (amountIn < amountInMaximum) {\\n            IERC20(erc20In).safeTransfer(msg.sender, amountInMaximum - amountIn);\\n        }\\n    }\\n\\n    ///This function appoves infinite allowance for Uniswap, this is safe as the paymenthub should never hold any token (see also recover() ).\\n    ///@dev This function needs to be called before using the PaymentHub the first time with a new ERC20 token.\\n    ///@param erc20In The erc20 addresse to approve.\\n    function approveERC20(address erc20In) external {\\n        IERC20(erc20In).approve(address(uniswapRouter), type(uint256).max);\\n    }\\n\\n    function multiPay(IERC20 token, address[] calldata recipients, uint256[] calldata amounts) public {\\n        for (uint i=0; i<recipients.length; i++) {\\n            IERC20(token).safeTransferFrom(msg.sender, recipients[i], amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * Can (at least in theory) save some gas as the sender balance only is touched in one transaction.\\n     */\\n    function multiPayAndNotify(IERC20 token, IBrokerbot[] calldata brokerbots, uint256[] calldata amounts, bytes calldata ref) external {\\n        for (uint i=0; i<brokerbots.length; i++) {\\n            payAndNotify(token, brokerbots[i], amounts[i], ref);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows to make a base currency payment from the sender to the brokerbot, given an allowance to this contract.\\n     * @dev Equivalent to xchf.transferAndCall(brokerbot, amountInBase)\\n     * @param brokerbot The brokerbot to pay and receive the shares from.\\n     * @param amountInBase The amount of base currency used to buy shares.\\n     * @param ref The reference data blob.\\n     * @return The amount of shares bought\\n     */\\n    function payAndNotify(IBrokerbot brokerbot, uint256 amountInBase, bytes calldata ref) external returns (uint256) {\\n        return payAndNotify(brokerbot.base(), brokerbot, amountInBase, ref);\\n    }\\n\\n    function payAndNotify(IERC20 token, IBrokerbot brokerbot, uint256 amount, bytes calldata ref) public returns (uint256) {\\n        token.safeTransferFrom(msg.sender, address(brokerbot), amount);\\n        return brokerbot.processIncoming(token, msg.sender, amount, ref);\\n    }\\n\\n    /**\\n     * @notice Pay with Ether to buy shares.\\n     * @param brokerbot The brokerbot to pay and receive the shares from.\\n     * @param amountBase The amount of base currency used to buy shares.\\n     * @param ref The reference data blob.\\n     * @param path The Uniswap path from ETH to base currency (uses exactOuput => reverse order)\\n     * @return priceInEther The amount of Ether spent.\\n     * @return sharesOut The amount of shares bought.\\n     */\\n    function payFromEtherAndNotify(IBrokerbot brokerbot, uint256 amountBase, bytes calldata ref, bytes memory path) external payable returns (uint256 priceInEther, uint256 sharesOut) {\\n        IERC20 base = brokerbot.base();\\n        uint256 balanceBefore = IERC20(base).balanceOf(address(brokerbot));\\n        priceInEther = payFromEther(address(brokerbot), amountBase, path);\\n        uint256 balanceAfter = IERC20(base).balanceOf(address(brokerbot));\\n        if (amountBase != (balanceAfter - balanceBefore)) { // check that the swap was successful with correct currency\\n            revert PaymentHub_SwapError(amountBase, balanceAfter - balanceBefore);\\n        }    \\n        sharesOut = brokerbot.processIncoming(base, msg.sender, amountBase, ref); // not sending msg.value as this is already done in payFromEther function\\n    }\\n\\n    /***\\n     * @notice Pay from any ERC20 token (which has Uniswapv3 ERC20-ETH pool) and send swapped base currency to brokerbot.\\n     * @notice The needed amount needs to be approved at the ERC20 contract beforehand\\n     * @param brokerbot The brokerbot to pay and receive the shares from.\\n     * @param amountBase The amount of base currency used to buy shares.\\n     * @param erc20 The address of the ERC20 token to pay.\\n     * @param amountInMaximum The maximum amount of the ERC20 to pay (should include some slippage).\\n     * @param path The encoded path of the swap from erc20 to base currency.\\n     * @param ref Reference data blob.\\n     * @return amountIn The amount erc20 spent to buy shares.\\n     * @return amountOut The amount of shares received by the brokerbot.\\n     */\\n    function payFromERC20AndNotify(IBrokerbot brokerbot, uint256 amountBase, address erc20, uint256 amountInMaximum, bytes memory path, bytes calldata ref) external returns (uint256 amountIn, uint256 amountOut) {\\n        IERC20 base = brokerbot.base();\\n        uint256 balanceBefore = IERC20(base).balanceOf(address(brokerbot));\\n        amountIn = payFromERC20(amountBase, amountInMaximum, erc20, path, address(brokerbot));\\n        uint256 balanceAfter = IERC20(base).balanceOf(address(brokerbot));\\n        if (amountBase != (balanceAfter - balanceBefore)) {\\n            revert PaymentHub_SwapError(amountBase, balanceAfter - balanceBefore);\\n        }        \\n        amountOut = brokerbot.processIncoming(base, msg.sender, balanceAfter - balanceBefore, ref);\\n    }\\n\\n    /**\\n     * @notice Sell shares with permit\\n     * @param brokerbot The brokerbot to recive the shares.\\n     * @param seller The address of the seller.\\n     * @param recipient The address of the recipient of the sell preceeds.\\n     * @param amountToSell The amount the seller wants to sell.\\n     * @param ref Reference e.g. insider declaration and the type of sell.\\n     * @param permitInfo Information about the permit.\\n     * @return The base currency amount for the selling of the shares.\\n     */\\n    function sellSharesWithPermit(IBrokerbot brokerbot, IERC20Permit shares, address seller, address recipient, uint256 amountToSell, bytes calldata ref, PermitInfo calldata permitInfo) public onlySellerAndForwarder(seller) returns (uint256) {\\n        // Call permit to set allowance\\n        shares.permit(seller, address(this), amountToSell, permitInfo.deadline, permitInfo.v, permitInfo.r,permitInfo.s);\\n        // process sell\\n        if (permitInfo.exFee > 0){\\n            uint256 proceeds = _sellShares(brokerbot, shares, seller, address(this), amountToSell, ref);\\n            IERC20 currency = brokerbot.base();\\n            currency.safeTransfer(msg.sender, permitInfo.exFee);\\n            currency.safeTransfer(recipient, proceeds - permitInfo.exFee);\\n            return proceeds - permitInfo.exFee;\\n        } else {\\n            return _sellShares(brokerbot, shares, seller, recipient, amountToSell, ref);\\n        }\\n    }\\n\\n    /**\\n     * @notice With this function a user can sell shares with permit and swap them to a desired token.\\n     * @param brokerbot The brokerbot of the shares to sell.\\n     * @param shares The (draggable)shares address.\\n     * @param seller The seller address.\\n     * @param amountToSell The amount of shares to sell.\\n     * @param ref Reference e.g. insider declaration and the type of sell.\\n     * @param permitInfo Information about the permit.\\n     * @param params Information about the swap.\\n     * @return The output amount of the swap to the desired token.\\n     */\\n    function sellSharesWithPermitAndSwap(IBrokerbot brokerbot, IERC20Permit shares, address seller,  uint256 amountToSell, bytes calldata ref, PermitInfo calldata permitInfo, ISwapRouter.ExactInputParams memory params, bool unwrapWeth) external onlySellerAndForwarder(seller) returns (uint256) {\\n        params.amountIn = sellSharesWithPermit(brokerbot, shares, seller, address(this), amountToSell, ref, permitInfo);\\n        return _swap(params, unwrapWeth);\\n    }\\n\\n    /**\\n     * @notice With this function a user can sell shares and swap them to a desired token. The user has to approve the paymenthub before on the shares contract.\\n     * @param brokerbot The brokerbot of the shares to sell.\\n     * @param shares The (draggable)shares address.\\n     * @param amountToSell The amount of shares to sell.\\n     * @param ref Reference e.g. insider declaration and the type of sell.\\n     * @param params Information about the swap.\\n     * @return The output amount of the swap to the desired token.\\n     */\\n    function sellSharesAndSwap(IBrokerbot brokerbot, IERC20 shares, uint256 amountToSell,  bytes calldata ref, ISwapRouter.ExactInputParams memory params, bool unwrapWeth) external returns (uint256) {\\n        params.amountIn = _sellShares(brokerbot, shares, msg.sender, address(this), amountToSell, ref);\\n        return _swap(params, unwrapWeth);\\n    }\\n\\n    /**\\n     * @notice Transfers shares to brokerbot and executes the selling.\\n     * @param brokerbot The brokerbot of the shares to sell.\\n     * @param shares The (draggable)shares address.\\n     * @param seller The seller address.\\n     * @param recipient The recipient of the base currency tokens. (this can be a 3rd party to off-ramp or the paymenthub itself if a swap will be done direct after)\\n     * @param amountToSell The amount of shares to sell.\\n     * @param ref Reference e.g. insider declaration and the type of sell.\\n     * @return The base currency amount for the selling of the shares.\\n     */ \\n    function _sellShares(IBrokerbot brokerbot, IERC20 shares, address seller, address recipient, uint256 amountToSell, bytes calldata ref ) internal returns (uint256) {\\n        // send shares token to brokerbot\\n        shares.safeTransferFrom(seller, address(brokerbot), amountToSell);\\n        // process sell on brokerbot\\n        return brokerbot.processIncoming(shares, recipient, amountToSell, ref);\\n    }\\n\\n    /**\\n     * @notice Swap (base currency) token according to given path and unwrap weth if needed.\\n     * @param params Information about the swap (includes path).\\n     * @return amountOut The output amount of the swap to the desired token.\\n     */\\n    function _swap(ISwapRouter.ExactInputParams memory params, bool unwrapWeth) internal returns(uint256 amountOut) {\\n        // if weth should be unwrapped, swap recipient is this contract and eth is send to seller\\n        if (unwrapWeth){\\n            address seller = params.recipient;\\n            params.recipient = address(this);\\n            amountOut = _swapToERC20(params);\\n            IWETH9(uniswapQuoter.WETH9()).withdraw(amountOut);\\n            (bool success, ) = payable(seller).call{value:amountOut}(\\\"\\\");\\n            if (!success) revert PaymentHub_TransferFailed();\\n        } else {\\n            amountOut = _swapToERC20(params);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calls the Uniswap router to swap tokens according to given path.\\n     * @param params Information about the swap (includes path).\\n     * @return amountOut The output amount of the swap to the desired token.\\n     */\\n    function _swapToERC20(ISwapRouter.ExactInputParams memory params) internal returns(uint256 amountOut) {\\n        amountOut = uniswapRouter.exactInput(params);\\n        if (amountOut < params.amountOutMinimum){\\n            revert PaymentHub_SwapError(params.amountOutMinimum, amountOut);\\n        }\\n    }\\n\\n    /**\\n     * @notice In case tokens have been accidentally sent directly to this contract. Only Forwarder can withdraw, else a MEV bot will intercept it.\\n     * @param ercAddress The erc20 address.\\n     * @param to The address to transfer tokens to.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function recover(IERC20 ercAddress, address to, uint256 amount) external onlyForwarder {\\n        ercAddress.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer ether to a given address. Only Forwarder can withdraw, else a MEV bot will intercept it.\\n     * @param to The address to transfer ether to.\\n     */\\n    function withdrawEther(address to, uint256 amount) external onlyForwarder {\\n        (bool success, ) = payable(to).call{value:amount}(\\\"\\\");\\n        if (!success) {\\n            revert PaymentHub_TransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer ether to a given address.\\n     * @dev Used with the mutlisigwallet.\\n     * @param to The address to transfer ether to.\\n     */\\n    function transferEther(address to) external payable {\\n        (bool success, ) = payable(to).call{value:msg.value}(\\\"\\\");\\n        if (!success) {\\n            revert PaymentHub_TransferFailed();\\n        }\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {\\n        // Important to receive ETH refund from Uniswap\\n    }\\n}\\n\",\"keccak256\":\"0xeec6c626113c05a8184399686ee6ca86b7a42fa09038fb40283c6647cfe1c619\",\"license\":\"LicenseRef-Aktionariat\"},\"src/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\n// and modified it.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Address {\\n\\n    /// @param target Target address to call the function on.\\n    error Address_NotTransferNorContract(address target);\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n        return account.code.length > 0;\\n    }\\n    \\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 weiValue) internal returns (bytes memory) {\\n        if (data.length != 0 && !isContract(target)) {\\n            revert Address_NotTransferNorContract(target);\\n        }\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else if (returndata.length > 0) {\\n            assembly{\\n                revert (add (returndata, 0x20), mload (returndata))\\n            }\\n        } else {\\n           revert(\\\"failed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xb95d45875550203c1afb7dfc9c99ce62c77496c36e96f3adfaad2d42cb3380a2\",\"license\":\"MIT\"},\"src/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n//\\n// Modifications:\\n// - Replaced Context._msgSender() with msg.sender\\n// - Made leaner\\n// - Extracted interface\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor (address initialOwner) {\\n        owner = initialOwner;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"not owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x1104f456d1ee340a1674c34f132578b599d8fd1a8e12e57d5a7691de1191caca\",\"license\":\"MIT\"},\"src/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// coppied and adjusted from OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../ERC20/IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../ERC20/IERC20Permit.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        if (nonceAfter != nonceBefore + 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\",\"keccak256\":\"0xa162e550fe203915126fddc231c55d28dd3f16d39be22dd48c5fc7f5ccd6fd93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801562000010575f80fd5b506040516200237338038062002373833981016040819052620000339162000076565b5f80546001600160a01b0319166001600160a01b039485161790559082166080521660a052620000c7565b6001600160a01b038116811462000073575f80fd5b50565b5f805f6060848603121562000089575f80fd5b835162000096816200005e565b6020850151909350620000a9816200005e565b6040850151909250620000bc816200005e565b809150509250925092565b60805160a0516122676200010c5f395f81816103fe01528181610ff601528181611134015261159801525f8181610e6101528181610ef601526113c601526122675ff3fe608060405260043610610129575f3560e01c806359c57ee2116100a857806388e3b76a1161006d57806388e3b76a1461032e578063d3b3ca771461034d578063d49271481461036c578063d64d4ba51461038b578063fb4daeec146103aa578063ffa1ad74146103bd575f80fd5b806359c57ee2146102885780635daf206a146102a75780636b55e991146102c6578063753f9447146102d95780637da0a877146102f8575f80fd5b80631ec82cb8116100ee5780631ec82cb8146101e4578063415a218714610203578063435fd56d14610222578063522f68151461024a578063568f325414610269575f80fd5b8063078aa9641461013457806311e8701c1461016657806317f565d2146101875780631c9af2e3146101a65780631da5f315146101c5575f80fd5b3661013057005b5f80fd5b34801561013f575f80fd5b5061015361014e3660046117df565b6103d1565b6040519081526020015b60405180910390f35b348015610171575f80fd5b50610185610180366004611839565b6103e7565b005b348015610192575f80fd5b506101536101a1366004611898565b61047b565b3480156101b1575f80fd5b506101856101c036600461192f565b6104f1565b3480156101d0575f80fd5b506101536101df3660046119c1565b610573565b3480156101ef575f80fd5b506101856101fe366004611a64565b610750565b34801561020e575f80fd5b5061018561021d366004611839565b610795565b610235610230366004611aa2565b61080b565b6040805192835260208301919091520161015d565b348015610255575f80fd5b50610185610264366004611b21565b610a17565b348015610274575f80fd5b50610185610283366004611b4b565b610ab3565b348015610293575f80fd5b506101536102a2366004611bef565b610b25565b3480156102b2575f80fd5b506102356102c1366004611c2e565b610b68565b6101856102d4366004611839565b610d5f565b3480156102e4575f80fd5b506101536102f3366004611d4a565b610dcf565b348015610303575f80fd5b505f54610316906001600160a01b031681565b6040516001600160a01b03909116815260200161015d565b348015610339575f80fd5b50610153610348366004611e17565b610e43565b348015610358575f80fd5b50610153610367366004611e6d565b610f34565b348015610377575f80fd5b50610153610386366004611ec9565b610fc8565b348015610396575f80fd5b506101536103a5366004611f6e565b610ff3565b6101536103b8366004611fe0565b6110f3565b3480156103c8575f80fd5b50610153600981565b5f6103de83836001610e43565b90505b92915050565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f19602483015282169063095ea7b3906044016020604051808303815f875af1158015610453573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104779190612034565b5050565b5f6104e8856001600160a01b0316635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104bb573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104df919061204f565b86868686610f34565b95945050505050565b5f5b8381101561056b57610559338686848181106105115761051161206a565b90506020020160208101906105269190611839565b8585858181106105385761053861206a565b90506020020135896001600160a01b0316611280909392919063ffffffff16565b8061056381612092565b9150506104f3565b505050505050565b5f805487906001600160a01b031633148015906105995750336001600160a01b03821614155b156105be576040516340b3b69360e11b81523360048201526024015b60405180910390fd5b6001600160a01b03891663d505accf89308960208801356105e560608a0160408b016120aa565b6040516001600160e01b031960e088901b1681526001600160a01b0395861660048201529490931660248501526044840191909152606483015260ff166084820152606086013560a4820152608086013560c482015260e4015f604051808303815f87803b158015610655575f80fd5b505af1158015610667573d5f803e3d5ffd5b5050508335159050610731575f6106838b8b8b308b8b8b6112ed565b90505f8b6001600160a01b0316635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106c2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106e6919061204f565b90506106fd6001600160a01b038216338735611377565b61071d8961070c8735856120ca565b6001600160a01b0384169190611377565b6107288535836120ca565b93505050610743565b6107408a8a8a8a8a8a8a6112ed565b91505b5098975050505050505050565b5f546001600160a01b0316331461077c576040516340b3b69360e11b81523360048201526024016105b5565b6107906001600160a01b0384168383611377565b505050565b5f546001600160a01b031633146107c1576040516340b3b69360e11b81523360048201526024016105b5565b5f80546001600160a01b0319166001600160a01b0383169081178255604051909133917f6b1afd5bf12dcac0f44e8afd235c6681297d3124624a7a7a0d34abd84b7986259190a350565b5f805f876001600160a01b0316635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561084a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061086e919061204f565b6040516370a0823160e01b81526001600160a01b038a811660048301529192505f918316906370a0823190602401602060405180830381865afa1580156108b7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108db91906120dd565b90506108e88989876110f3565b6040516370a0823160e01b81526001600160a01b038b811660048301529195505f918416906370a0823190602401602060405180830381865afa158015610931573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061095591906120dd565b905061096182826120ca565b8914610994578861097283836120ca565b604051630a720dfb60e01b8152600481019290925260248201526044016105b5565b60405163349b2e2960e11b81526001600160a01b038b16906369365c52906109c890869033908e908e908e906004016120f4565b6020604051808303815f875af11580156109e4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a0891906120dd565b93505050509550959350505050565b5f546001600160a01b03163314610a43576040516340b3b69360e11b81523360048201526024016105b5565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114610a8c576040519150601f19603f3d011682016040523d82523d5f602084013e610a91565b606091505b50509050806107905760405163f82a0ab760e01b815260040160405180910390fd5b5f5b85811015610b1b57610b0888888884818110610ad357610ad361206a565b9050602002016020810190610ae89190611839565b878785818110610afa57610afa61206a565b905060200201358686610f34565b5080610b1381612092565b915050610ab5565b5050505050505050565b5f6104e88584848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525060019250610e43915050565b5f805f896001600160a01b0316635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ba7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bcb919061204f565b6040516370a0823160e01b81526001600160a01b038c811660048301529192505f918316906370a0823190602401602060405180830381865afa158015610c14573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c3891906120dd565b9050610c478a898b8a8f610ff3565b6040516370a0823160e01b81526001600160a01b038d811660048301529195505f918416906370a0823190602401602060405180830381865afa158015610c90573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cb491906120dd565b9050610cc082826120ca565b8b14610cd1578a61097283836120ca565b6001600160a01b038c166369365c528433610cec86866120ca565b8b8b6040518663ffffffff1660e01b8152600401610d0e9594939291906120f4565b6020604051808303815f875af1158015610d2a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d4e91906120dd565b935050505097509795505050505050565b5f816001600160a01b0316346040515f6040518083038185875af1925050503d805f8114610da8576040519150601f19603f3d011682016040523d82523d5f602084013e610dad565b606091505b50509050806104775760405163f82a0ab760e01b815260040160405180910390fd5b5f805488906001600160a01b03163314801590610df55750336001600160a01b03821614155b15610e15576040516340b3b69360e11b81523360048201526024016105b5565b610e258b8b8b308c8c8c8c610573565b6060850152610e3484846113a8565b9b9a5050505050505050505050565b5f8115610edf57604051632f80bb1d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632f80bb1d90610e989086908890600401612193565b6020604051808303815f875af1158015610eb4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ed891906120dd565b9050610f2d565b60405163cdca175360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cdca175390610e989086908890600401612193565b9392505050565b5f610f4a6001600160a01b038716338787611280565b60405163349b2e2960e11b81526001600160a01b038616906369365c5290610f7e90899033908990899089906004016120f4565b6020604051808303815f875af1158015610f9a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fbe91906120dd565b9695505050505050565b5f610fd8888833308a8a8a6112ed565b6060840152610fe783836113a8565b98975050505050505050565b5f7f000000000000000000000000000000000000000000000000000000000000000061102a6001600160a01b038616333089611280565b6040805160a0810182528581526001600160a01b0380861660208301524282840152606082018a9052608082018990529151631e51809360e31b8152909183169063f28c04989061107f908490600401612204565b6020604051808303815f875af115801561109b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110bf91906120dd565b9250868310156110e8576110e8336110d7858a6120ca565b6001600160a01b0389169190611377565b505095945050505050565b6040805160a0810182528281526001600160a01b03808616602083015242828401526060820185905234608083018190529251631e51809360e31b81525f937f0000000000000000000000000000000000000000000000000000000000000000939284169163f28c0498919061116d908590600401612204565b60206040518083038185885af1158015611189573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906111ae91906120dd565b92503483101561127757816001600160a01b03166312210e8a6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156111f0575f80fd5b505af1158015611202573d5f803e3d5ffd5b505f9250339150611215905085346120ca565b6040515f81818185875af1925050503d805f811461124e576040519150601f19603f3d011682016040523d82523d5f602084013e611253565b606091505b50509050806112755760405163f82a0ab760e01b815260040160405180910390fd5b505b50509392505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526112e79186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061151e565b50505050565b5f6113036001600160a01b038816878a87611280565b60405163349b2e2960e11b81526001600160a01b038916906369365c5290611337908a9089908990899089906004016120f4565b6020604051808303815f875af1158015611353573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fe791906120dd565b6040516001600160a01b0383811660248301526044820183905261079091859182169063a9059cbb906064016112b5565b5f811561151557602083018051309091526113c28461157f565b91507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634aa4a4fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611420573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611444919061204f565b6001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b815260040161147191815260200190565b5f604051808303815f87803b158015611488575f80fd5b505af115801561149a573d5f803e3d5ffd5b505050505f816001600160a01b0316836040515f6040518083038185875af1925050503d805f81146114e7576040519150601f19603f3d011682016040523d82523d5f602084013e6114ec565b606091505b505090508061150e5760405163f82a0ab760e01b815260040160405180910390fd5b50506103e1565b6103de8361157f565b5f6115326001600160a01b03841683611649565b905080515f141580156115565750808060200190518101906115549190612034565b155b1561079057604051635274afe760e01b81526001600160a01b03841660048201526024016105b5565b60405163c04b8d5960e01b81525f906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c04b8d59906115cd908590600401612204565b6020604051808303815f875af11580156115e9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061160d91906120dd565b90508160800151811015611644576080820151604051630a720dfb60e01b81526004810191909152602481018290526044016105b5565b919050565b60606103de83835f606082515f1415801561166c57506001600160a01b0384163b155b1561169557604051639eb1341360e01b81526001600160a01b03851660048201526024016105b5565b5f80856001600160a01b031684866040516116b09190612216565b5f6040518083038185875af1925050503d805f81146116ea576040519150601f19603f3d011682016040523d82523d5f602084013e6116ef565b606091505b50915091508115611703579150610f2d9050565b80511561171257805160208201fd5b60405162461bcd60e51b815260206004820152600660248201526519985a5b195960d21b60448201526064016105b5565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112611766575f80fd5b81356001600160401b038082111561178057611780611743565b604051601f8301601f19908116603f011681019082821181831017156117a8576117a8611743565b816040528381528660208588010111156117c0575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f80604083850312156117f0575f80fd5b8235915060208301356001600160401b0381111561180c575f80fd5b61181885828601611757565b9150509250929050565b6001600160a01b0381168114611836575f80fd5b50565b5f60208284031215611849575f80fd5b8135610f2d81611822565b5f8083601f840112611864575f80fd5b5081356001600160401b0381111561187a575f80fd5b602083019150836020828501011115611891575f80fd5b9250929050565b5f805f80606085870312156118ab575f80fd5b84356118b681611822565b93506020850135925060408501356001600160401b038111156118d7575f80fd5b6118e387828801611854565b95989497509550505050565b5f8083601f8401126118ff575f80fd5b5081356001600160401b03811115611915575f80fd5b6020830191508360208260051b8501011115611891575f80fd5b5f805f805f60608688031215611943575f80fd5b853561194e81611822565b945060208601356001600160401b0380821115611969575f80fd5b61197589838a016118ef565b9096509450604088013591508082111561198d575f80fd5b5061199a888289016118ef565b969995985093965092949392505050565b5f60a082840312156119bb575f80fd5b50919050565b5f805f805f805f80610160898b0312156119d9575f80fd5b88356119e481611822565b975060208901356119f481611822565b96506040890135611a0481611822565b95506060890135611a1481611822565b94506080890135935060a08901356001600160401b03811115611a35575f80fd5b611a418b828c01611854565b9094509250611a5590508a60c08b016119ab565b90509295985092959890939650565b5f805f60608486031215611a76575f80fd5b8335611a8181611822565b92506020840135611a9181611822565b929592945050506040919091013590565b5f805f805f60808688031215611ab6575f80fd5b8535611ac181611822565b94506020860135935060408601356001600160401b0380821115611ae3575f80fd5b611aef89838a01611854565b90955093506060880135915080821115611b07575f80fd5b50611b1488828901611757565b9150509295509295909350565b5f8060408385031215611b32575f80fd5b8235611b3d81611822565b946020939093013593505050565b5f805f805f805f6080888a031215611b61575f80fd5b8735611b6c81611822565b965060208801356001600160401b0380821115611b87575f80fd5b611b938b838c016118ef565b909850965060408a0135915080821115611bab575f80fd5b611bb78b838c016118ef565b909650945060608a0135915080821115611bcf575f80fd5b50611bdc8a828b01611854565b989b979a50959850939692959293505050565b5f805f8060608587031215611c02575f80fd5b843593506020850135611c1481611822565b925060408501356001600160401b038111156118d7575f80fd5b5f805f805f805f60c0888a031215611c44575f80fd5b8735611c4f81611822565b9650602088013595506040880135611c6681611822565b94506060880135935060808801356001600160401b0380821115611c88575f80fd5b611c948b838c01611757565b945060a08a0135915080821115611bcf575f80fd5b5f60a08284031215611cb9575f80fd5b60405160a081016001600160401b038282108183111715611cdc57611cdc611743565b816040528293508435915080821115611cf3575f80fd5b50611d0085828601611757565b8252506020830135611d1181611822565b806020830152506040830135604082015260608301356060820152608083013560808201525092915050565b8015158114611836575f80fd5b5f805f805f805f805f6101808a8c031215611d63575f80fd5b8935611d6e81611822565b985060208a0135611d7e81611822565b975060408a0135611d8e81611822565b965060608a0135955060808a01356001600160401b0380821115611db0575f80fd5b611dbc8d838e01611854565b9097509550859150611dd18d60a08e016119ab565b94506101408c0135915080821115611de7575f80fd5b50611df48c828d01611ca9565b9250506101608a0135611e0681611d3d565b809150509295985092959850929598565b5f805f60608486031215611e29575f80fd5b8335925060208401356001600160401b03811115611e45575f80fd5b611e5186828701611757565b9250506040840135611e6281611d3d565b809150509250925092565b5f805f805f60808688031215611e81575f80fd5b8535611e8c81611822565b94506020860135611e9c81611822565b93506040860135925060608601356001600160401b03811115611ebd575f80fd5b61199a88828901611854565b5f805f805f805f60c0888a031215611edf575f80fd5b8735611eea81611822565b96506020880135611efa81611822565b95506040880135945060608801356001600160401b0380821115611f1c575f80fd5b611f288b838c01611854565b909650945060808a0135915080821115611f40575f80fd5b50611f4d8a828b01611ca9565b92505060a0880135611f5e81611d3d565b8091505092959891949750929550565b5f805f805f60a08688031215611f82575f80fd5b85359450602086013593506040860135611f9b81611822565b925060608601356001600160401b03811115611fb5575f80fd5b611fc188828901611757565b9250506080860135611fd281611822565b809150509295509295909350565b5f805f60608486031215611ff2575f80fd5b8335611ffd81611822565b92506020840135915060408401356001600160401b0381111561201e575f80fd5b61202a86828701611757565b9150509250925092565b5f60208284031215612044575f80fd5b8151610f2d81611d3d565b5f6020828403121561205f575f80fd5b8151610f2d81611822565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f600182016120a3576120a361207e565b5060010190565b5f602082840312156120ba575f80fd5b813560ff81168114610f2d575f80fd5b818103818111156103e1576103e161207e565b5f602082840312156120ed575f80fd5b5051919050565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290525f828460a08401375f60a0848401015260a0601f19601f85011683010190509695505050505050565b5f5b83811015612160578181015183820152602001612148565b50505f910152565b5f815180845261217f816020860160208601612146565b601f01601f19169290920160200192915050565b604081525f6121a56040830185612168565b90508260208301529392505050565b5f815160a084526121c860a0850182612168565b6020848101516001600160a01b031690860152604080850151908601526060808501519086015260809384015193909401929092525090919050565b602081525f6103de60208301846121b4565b5f8251612227818460208701612146565b919091019291505056fea26469706673582212200286387ea9537ccad2bbadb0f57699cb514ee8960934a3574f9afb424dbdfddf64736f6c63430008150033",
  "deployedBytecode": "0x608060405260043610610129575f3560e01c806359c57ee2116100a857806388e3b76a1161006d57806388e3b76a1461032e578063d3b3ca771461034d578063d49271481461036c578063d64d4ba51461038b578063fb4daeec146103aa578063ffa1ad74146103bd575f80fd5b806359c57ee2146102885780635daf206a146102a75780636b55e991146102c6578063753f9447146102d95780637da0a877146102f8575f80fd5b80631ec82cb8116100ee5780631ec82cb8146101e4578063415a218714610203578063435fd56d14610222578063522f68151461024a578063568f325414610269575f80fd5b8063078aa9641461013457806311e8701c1461016657806317f565d2146101875780631c9af2e3146101a65780631da5f315146101c5575f80fd5b3661013057005b5f80fd5b34801561013f575f80fd5b5061015361014e3660046117df565b6103d1565b6040519081526020015b60405180910390f35b348015610171575f80fd5b50610185610180366004611839565b6103e7565b005b348015610192575f80fd5b506101536101a1366004611898565b61047b565b3480156101b1575f80fd5b506101856101c036600461192f565b6104f1565b3480156101d0575f80fd5b506101536101df3660046119c1565b610573565b3480156101ef575f80fd5b506101856101fe366004611a64565b610750565b34801561020e575f80fd5b5061018561021d366004611839565b610795565b610235610230366004611aa2565b61080b565b6040805192835260208301919091520161015d565b348015610255575f80fd5b50610185610264366004611b21565b610a17565b348015610274575f80fd5b50610185610283366004611b4b565b610ab3565b348015610293575f80fd5b506101536102a2366004611bef565b610b25565b3480156102b2575f80fd5b506102356102c1366004611c2e565b610b68565b6101856102d4366004611839565b610d5f565b3480156102e4575f80fd5b506101536102f3366004611d4a565b610dcf565b348015610303575f80fd5b505f54610316906001600160a01b031681565b6040516001600160a01b03909116815260200161015d565b348015610339575f80fd5b50610153610348366004611e17565b610e43565b348015610358575f80fd5b50610153610367366004611e6d565b610f34565b348015610377575f80fd5b50610153610386366004611ec9565b610fc8565b348015610396575f80fd5b506101536103a5366004611f6e565b610ff3565b6101536103b8366004611fe0565b6110f3565b3480156103c8575f80fd5b50610153600981565b5f6103de83836001610e43565b90505b92915050565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f19602483015282169063095ea7b3906044016020604051808303815f875af1158015610453573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104779190612034565b5050565b5f6104e8856001600160a01b0316635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104bb573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104df919061204f565b86868686610f34565b95945050505050565b5f5b8381101561056b57610559338686848181106105115761051161206a565b90506020020160208101906105269190611839565b8585858181106105385761053861206a565b90506020020135896001600160a01b0316611280909392919063ffffffff16565b8061056381612092565b9150506104f3565b505050505050565b5f805487906001600160a01b031633148015906105995750336001600160a01b03821614155b156105be576040516340b3b69360e11b81523360048201526024015b60405180910390fd5b6001600160a01b03891663d505accf89308960208801356105e560608a0160408b016120aa565b6040516001600160e01b031960e088901b1681526001600160a01b0395861660048201529490931660248501526044840191909152606483015260ff166084820152606086013560a4820152608086013560c482015260e4015f604051808303815f87803b158015610655575f80fd5b505af1158015610667573d5f803e3d5ffd5b5050508335159050610731575f6106838b8b8b308b8b8b6112ed565b90505f8b6001600160a01b0316635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106c2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106e6919061204f565b90506106fd6001600160a01b038216338735611377565b61071d8961070c8735856120ca565b6001600160a01b0384169190611377565b6107288535836120ca565b93505050610743565b6107408a8a8a8a8a8a8a6112ed565b91505b5098975050505050505050565b5f546001600160a01b0316331461077c576040516340b3b69360e11b81523360048201526024016105b5565b6107906001600160a01b0384168383611377565b505050565b5f546001600160a01b031633146107c1576040516340b3b69360e11b81523360048201526024016105b5565b5f80546001600160a01b0319166001600160a01b0383169081178255604051909133917f6b1afd5bf12dcac0f44e8afd235c6681297d3124624a7a7a0d34abd84b7986259190a350565b5f805f876001600160a01b0316635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561084a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061086e919061204f565b6040516370a0823160e01b81526001600160a01b038a811660048301529192505f918316906370a0823190602401602060405180830381865afa1580156108b7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108db91906120dd565b90506108e88989876110f3565b6040516370a0823160e01b81526001600160a01b038b811660048301529195505f918416906370a0823190602401602060405180830381865afa158015610931573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061095591906120dd565b905061096182826120ca565b8914610994578861097283836120ca565b604051630a720dfb60e01b8152600481019290925260248201526044016105b5565b60405163349b2e2960e11b81526001600160a01b038b16906369365c52906109c890869033908e908e908e906004016120f4565b6020604051808303815f875af11580156109e4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a0891906120dd565b93505050509550959350505050565b5f546001600160a01b03163314610a43576040516340b3b69360e11b81523360048201526024016105b5565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114610a8c576040519150601f19603f3d011682016040523d82523d5f602084013e610a91565b606091505b50509050806107905760405163f82a0ab760e01b815260040160405180910390fd5b5f5b85811015610b1b57610b0888888884818110610ad357610ad361206a565b9050602002016020810190610ae89190611839565b878785818110610afa57610afa61206a565b905060200201358686610f34565b5080610b1381612092565b915050610ab5565b5050505050505050565b5f6104e88584848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525060019250610e43915050565b5f805f896001600160a01b0316635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ba7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bcb919061204f565b6040516370a0823160e01b81526001600160a01b038c811660048301529192505f918316906370a0823190602401602060405180830381865afa158015610c14573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c3891906120dd565b9050610c478a898b8a8f610ff3565b6040516370a0823160e01b81526001600160a01b038d811660048301529195505f918416906370a0823190602401602060405180830381865afa158015610c90573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cb491906120dd565b9050610cc082826120ca565b8b14610cd1578a61097283836120ca565b6001600160a01b038c166369365c528433610cec86866120ca565b8b8b6040518663ffffffff1660e01b8152600401610d0e9594939291906120f4565b6020604051808303815f875af1158015610d2a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d4e91906120dd565b935050505097509795505050505050565b5f816001600160a01b0316346040515f6040518083038185875af1925050503d805f8114610da8576040519150601f19603f3d011682016040523d82523d5f602084013e610dad565b606091505b50509050806104775760405163f82a0ab760e01b815260040160405180910390fd5b5f805488906001600160a01b03163314801590610df55750336001600160a01b03821614155b15610e15576040516340b3b69360e11b81523360048201526024016105b5565b610e258b8b8b308c8c8c8c610573565b6060850152610e3484846113a8565b9b9a5050505050505050505050565b5f8115610edf57604051632f80bb1d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632f80bb1d90610e989086908890600401612193565b6020604051808303815f875af1158015610eb4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ed891906120dd565b9050610f2d565b60405163cdca175360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cdca175390610e989086908890600401612193565b9392505050565b5f610f4a6001600160a01b038716338787611280565b60405163349b2e2960e11b81526001600160a01b038616906369365c5290610f7e90899033908990899089906004016120f4565b6020604051808303815f875af1158015610f9a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fbe91906120dd565b9695505050505050565b5f610fd8888833308a8a8a6112ed565b6060840152610fe783836113a8565b98975050505050505050565b5f7f000000000000000000000000000000000000000000000000000000000000000061102a6001600160a01b038616333089611280565b6040805160a0810182528581526001600160a01b0380861660208301524282840152606082018a9052608082018990529151631e51809360e31b8152909183169063f28c04989061107f908490600401612204565b6020604051808303815f875af115801561109b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110bf91906120dd565b9250868310156110e8576110e8336110d7858a6120ca565b6001600160a01b0389169190611377565b505095945050505050565b6040805160a0810182528281526001600160a01b03808616602083015242828401526060820185905234608083018190529251631e51809360e31b81525f937f0000000000000000000000000000000000000000000000000000000000000000939284169163f28c0498919061116d908590600401612204565b60206040518083038185885af1158015611189573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906111ae91906120dd565b92503483101561127757816001600160a01b03166312210e8a6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156111f0575f80fd5b505af1158015611202573d5f803e3d5ffd5b505f9250339150611215905085346120ca565b6040515f81818185875af1925050503d805f811461124e576040519150601f19603f3d011682016040523d82523d5f602084013e611253565b606091505b50509050806112755760405163f82a0ab760e01b815260040160405180910390fd5b505b50509392505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526112e79186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061151e565b50505050565b5f6113036001600160a01b038816878a87611280565b60405163349b2e2960e11b81526001600160a01b038916906369365c5290611337908a9089908990899089906004016120f4565b6020604051808303815f875af1158015611353573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fe791906120dd565b6040516001600160a01b0383811660248301526044820183905261079091859182169063a9059cbb906064016112b5565b5f811561151557602083018051309091526113c28461157f565b91507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634aa4a4fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611420573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611444919061204f565b6001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b815260040161147191815260200190565b5f604051808303815f87803b158015611488575f80fd5b505af115801561149a573d5f803e3d5ffd5b505050505f816001600160a01b0316836040515f6040518083038185875af1925050503d805f81146114e7576040519150601f19603f3d011682016040523d82523d5f602084013e6114ec565b606091505b505090508061150e5760405163f82a0ab760e01b815260040160405180910390fd5b50506103e1565b6103de8361157f565b5f6115326001600160a01b03841683611649565b905080515f141580156115565750808060200190518101906115549190612034565b155b1561079057604051635274afe760e01b81526001600160a01b03841660048201526024016105b5565b60405163c04b8d5960e01b81525f906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c04b8d59906115cd908590600401612204565b6020604051808303815f875af11580156115e9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061160d91906120dd565b90508160800151811015611644576080820151604051630a720dfb60e01b81526004810191909152602481018290526044016105b5565b919050565b60606103de83835f606082515f1415801561166c57506001600160a01b0384163b155b1561169557604051639eb1341360e01b81526001600160a01b03851660048201526024016105b5565b5f80856001600160a01b031684866040516116b09190612216565b5f6040518083038185875af1925050503d805f81146116ea576040519150601f19603f3d011682016040523d82523d5f602084013e6116ef565b606091505b50915091508115611703579150610f2d9050565b80511561171257805160208201fd5b60405162461bcd60e51b815260206004820152600660248201526519985a5b195960d21b60448201526064016105b5565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112611766575f80fd5b81356001600160401b038082111561178057611780611743565b604051601f8301601f19908116603f011681019082821181831017156117a8576117a8611743565b816040528381528660208588010111156117c0575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f80604083850312156117f0575f80fd5b8235915060208301356001600160401b0381111561180c575f80fd5b61181885828601611757565b9150509250929050565b6001600160a01b0381168114611836575f80fd5b50565b5f60208284031215611849575f80fd5b8135610f2d81611822565b5f8083601f840112611864575f80fd5b5081356001600160401b0381111561187a575f80fd5b602083019150836020828501011115611891575f80fd5b9250929050565b5f805f80606085870312156118ab575f80fd5b84356118b681611822565b93506020850135925060408501356001600160401b038111156118d7575f80fd5b6118e387828801611854565b95989497509550505050565b5f8083601f8401126118ff575f80fd5b5081356001600160401b03811115611915575f80fd5b6020830191508360208260051b8501011115611891575f80fd5b5f805f805f60608688031215611943575f80fd5b853561194e81611822565b945060208601356001600160401b0380821115611969575f80fd5b61197589838a016118ef565b9096509450604088013591508082111561198d575f80fd5b5061199a888289016118ef565b969995985093965092949392505050565b5f60a082840312156119bb575f80fd5b50919050565b5f805f805f805f80610160898b0312156119d9575f80fd5b88356119e481611822565b975060208901356119f481611822565b96506040890135611a0481611822565b95506060890135611a1481611822565b94506080890135935060a08901356001600160401b03811115611a35575f80fd5b611a418b828c01611854565b9094509250611a5590508a60c08b016119ab565b90509295985092959890939650565b5f805f60608486031215611a76575f80fd5b8335611a8181611822565b92506020840135611a9181611822565b929592945050506040919091013590565b5f805f805f60808688031215611ab6575f80fd5b8535611ac181611822565b94506020860135935060408601356001600160401b0380821115611ae3575f80fd5b611aef89838a01611854565b90955093506060880135915080821115611b07575f80fd5b50611b1488828901611757565b9150509295509295909350565b5f8060408385031215611b32575f80fd5b8235611b3d81611822565b946020939093013593505050565b5f805f805f805f6080888a031215611b61575f80fd5b8735611b6c81611822565b965060208801356001600160401b0380821115611b87575f80fd5b611b938b838c016118ef565b909850965060408a0135915080821115611bab575f80fd5b611bb78b838c016118ef565b909650945060608a0135915080821115611bcf575f80fd5b50611bdc8a828b01611854565b989b979a50959850939692959293505050565b5f805f8060608587031215611c02575f80fd5b843593506020850135611c1481611822565b925060408501356001600160401b038111156118d7575f80fd5b5f805f805f805f60c0888a031215611c44575f80fd5b8735611c4f81611822565b9650602088013595506040880135611c6681611822565b94506060880135935060808801356001600160401b0380821115611c88575f80fd5b611c948b838c01611757565b945060a08a0135915080821115611bcf575f80fd5b5f60a08284031215611cb9575f80fd5b60405160a081016001600160401b038282108183111715611cdc57611cdc611743565b816040528293508435915080821115611cf3575f80fd5b50611d0085828601611757565b8252506020830135611d1181611822565b806020830152506040830135604082015260608301356060820152608083013560808201525092915050565b8015158114611836575f80fd5b5f805f805f805f805f6101808a8c031215611d63575f80fd5b8935611d6e81611822565b985060208a0135611d7e81611822565b975060408a0135611d8e81611822565b965060608a0135955060808a01356001600160401b0380821115611db0575f80fd5b611dbc8d838e01611854565b9097509550859150611dd18d60a08e016119ab565b94506101408c0135915080821115611de7575f80fd5b50611df48c828d01611ca9565b9250506101608a0135611e0681611d3d565b809150509295985092959850929598565b5f805f60608486031215611e29575f80fd5b8335925060208401356001600160401b03811115611e45575f80fd5b611e5186828701611757565b9250506040840135611e6281611d3d565b809150509250925092565b5f805f805f60808688031215611e81575f80fd5b8535611e8c81611822565b94506020860135611e9c81611822565b93506040860135925060608601356001600160401b03811115611ebd575f80fd5b61199a88828901611854565b5f805f805f805f60c0888a031215611edf575f80fd5b8735611eea81611822565b96506020880135611efa81611822565b95506040880135945060608801356001600160401b0380821115611f1c575f80fd5b611f288b838c01611854565b909650945060808a0135915080821115611f40575f80fd5b50611f4d8a828b01611ca9565b92505060a0880135611f5e81611d3d565b8091505092959891949750929550565b5f805f805f60a08688031215611f82575f80fd5b85359450602086013593506040860135611f9b81611822565b925060608601356001600160401b03811115611fb5575f80fd5b611fc188828901611757565b9250506080860135611fd281611822565b809150509295509295909350565b5f805f60608486031215611ff2575f80fd5b8335611ffd81611822565b92506020840135915060408401356001600160401b0381111561201e575f80fd5b61202a86828701611757565b9150509250925092565b5f60208284031215612044575f80fd5b8151610f2d81611d3d565b5f6020828403121561205f575f80fd5b8151610f2d81611822565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f600182016120a3576120a361207e565b5060010190565b5f602082840312156120ba575f80fd5b813560ff81168114610f2d575f80fd5b818103818111156103e1576103e161207e565b5f602082840312156120ed575f80fd5b5051919050565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290525f828460a08401375f60a0848401015260a0601f19601f85011683010190509695505050505050565b5f5b83811015612160578181015183820152602001612148565b50505f910152565b5f815180845261217f816020860160208601612146565b601f01601f19169290920160200192915050565b604081525f6121a56040830185612168565b90508260208301529392505050565b5f815160a084526121c860a0850182612168565b6020848101516001600160a01b031690860152604080850151908601526060808501519086015260809384015193909401929092525090919050565b602081525f6103de60208301846121b4565b5f8251612227818460208701612146565b919091019291505056fea26469706673582212200286387ea9537ccad2bbadb0f57699cb514ee8960934a3574f9afb424dbdfddf64736f6c63430008150033",
  "devdoc": {
    "errors": {
      "Address_NotTransferNorContract(address)": [
        {
          "params": {
            "target": "Target address to call the function on."
          }
        }
      ],
      "PaymentHub_InvalidSender(address)": [
        {
          "params": {
            "sender": "The msg.sender of this transaction."
          }
        }
      ],
      "PaymentHub_SwapError(uint256,uint256)": [
        {
          "params": {
            "amountBase": "Required amount.",
            "swappedAmount": "Swapped amount."
          }
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "approveERC20(address)": {
        "details": "This function needs to be called before using the PaymentHub the first time with a new ERC20 token.",
        "params": {
          "erc20In": "The erc20 addresse to approve."
        }
      },
      "changeForwarder(address)": {
        "params": {
          "newForwarder": "The new trusted forwarder."
        }
      },
      "getPriceERC20(uint256,bytes,bool)": {
        "params": {
          "amount": "The exact amount which you want get out (exactOutput) or you put in (exactInput).",
          "exactOutput": "True if exactOutput should be used or false if exactInput should be used.",
          "path": "The path of the swap (inreverse order for exactOutput)."
        }
      },
      "getPriceInERC20(uint256,bytes)": {
        "params": {
          "amountInBase": "The amount of the base currency for the exact output.",
          "path": "The encoded path of the swap from erc20 to base."
        },
        "returns": {
          "_0": "amount quoted to pay"
        }
      },
      "getPriceInEther(uint256,address,bytes)": {
        "returns": {
          "_0": "The price in wei."
        }
      },
      "payAndNotify(address,uint256,bytes)": {
        "details": "Equivalent to xchf.transferAndCall(brokerbot, amountInBase)",
        "params": {
          "amountInBase": "The amount of base currency used to buy shares.",
          "brokerbot": "The brokerbot to pay and receive the shares from.",
          "ref": "The reference data blob."
        },
        "returns": {
          "_0": "The amount of shares bought"
        }
      },
      "payFromERC20(uint256,uint256,address,bytes,address)": {
        "details": "The calling address must approve this contract to spend its ERC20 for this function to succeed. As the amount of input ERC20 is variable, the calling address will need to approve for a slightly higher or infinit amount, anticipating some variance.",
        "params": {
          "amountInMaximum": "The maximum amount of ERC20 willing to be swapped for the specified amountOut of baseCurrency.",
          "amountOut": "The desired amount of baseCurrency.",
          "erc20In": "The address of the erc20 token to pay with.",
          "path": "The encoded path of the swap from erc20 to base.",
          "recipient": "The reciving address - brokerbot."
        },
        "returns": {
          "amountIn": "The amountIn of ERC20 actually spent to receive the desired amountOut."
        }
      },
      "payFromEtherAndNotify(address,uint256,bytes,bytes)": {
        "params": {
          "amountBase": "The amount of base currency used to buy shares.",
          "brokerbot": "The brokerbot to pay and receive the shares from.",
          "path": "The Uniswap path from ETH to base currency (uses exactOuput => reverse order)",
          "ref": "The reference data blob."
        },
        "returns": {
          "priceInEther": "The amount of Ether spent.",
          "sharesOut": "The amount of shares bought."
        }
      },
      "recover(address,address,uint256)": {
        "params": {
          "amount": "The amount of tokens to transfer.",
          "ercAddress": "The erc20 address.",
          "to": "The address to transfer tokens to."
        }
      },
      "sellSharesAndSwap(address,address,uint256,bytes,(bytes,address,uint256,uint256,uint256),bool)": {
        "params": {
          "amountToSell": "The amount of shares to sell.",
          "brokerbot": "The brokerbot of the shares to sell.",
          "params": "Information about the swap.",
          "ref": "Reference e.g. insider declaration and the type of sell.",
          "shares": "The (draggable)shares address."
        },
        "returns": {
          "_0": "The output amount of the swap to the desired token."
        }
      },
      "sellSharesWithPermit(address,address,address,address,uint256,bytes,(uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "amountToSell": "The amount the seller wants to sell.",
          "brokerbot": "The brokerbot to recive the shares.",
          "permitInfo": "Information about the permit.",
          "recipient": "The address of the recipient of the sell preceeds.",
          "ref": "Reference e.g. insider declaration and the type of sell.",
          "seller": "The address of the seller."
        },
        "returns": {
          "_0": "The base currency amount for the selling of the shares."
        }
      },
      "sellSharesWithPermitAndSwap(address,address,address,uint256,bytes,(uint256,uint256,uint8,bytes32,bytes32),(bytes,address,uint256,uint256,uint256),bool)": {
        "params": {
          "amountToSell": "The amount of shares to sell.",
          "brokerbot": "The brokerbot of the shares to sell.",
          "params": "Information about the swap.",
          "permitInfo": "Information about the permit.",
          "ref": "Reference e.g. insider declaration and the type of sell.",
          "seller": "The seller address.",
          "shares": "The (draggable)shares address."
        },
        "returns": {
          "_0": "The output amount of the swap to the desired token."
        }
      },
      "transferEther(address)": {
        "details": "Used with the mutlisigwallet.",
        "params": {
          "to": "The address to transfer ether to."
        }
      },
      "withdrawEther(address,uint256)": {
        "params": {
          "to": "The address to transfer ether to."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PaymentHub_InvalidSender(address)": [
        {
          "notice": "Sender not trusted."
        }
      ],
      "PaymentHub_SwapError(uint256,uint256)": [
        {
          "notice": "swap with less base token as required."
        }
      ],
      "PaymentHub_TransferFailed()": [
        {
          "notice": "Failguard when an erc20 transfer returns false. "
        }
      ]
    },
    "kind": "user",
    "methods": {
      "approveERC20(address)": {
        "notice": "This function appoves infinite allowance for Uniswap, this is safe as the paymenthub should never hold any token (see also recover() )."
      },
      "changeForwarder(address)": {
        "notice": "Change the trusted forwarder."
      },
      "getPriceERC20(uint256,bytes,bool)": {
        "notice": "Get price for given amount and path swapped via uniswap. "
      },
      "getPriceInERC20(uint256,bytes)": {
        "notice": "Get price in ERC20 This is the method that the Brokerbot widget should use to quote the price to the user."
      },
      "getPriceInEther(uint256,address,bytes)": {
        "notice": "Get price in Ether via swap path (no oracle on polygon) This is the method that the Brokerbot widget should use to quote the price to the user."
      },
      "multiPayAndNotify(address,address[],uint256[],bytes)": {
        "notice": "Can (at least in theory) save some gas as the sender balance only is touched in one transaction."
      },
      "payAndNotify(address,uint256,bytes)": {
        "notice": "Allows to make a base currency payment from the sender to the brokerbot, given an allowance to this contract."
      },
      "payFromEther(address,uint256,bytes)": {
        "notice": "Convenience method to swap ether into base and pay a target address"
      },
      "payFromEtherAndNotify(address,uint256,bytes,bytes)": {
        "notice": "Pay with Ether to buy shares."
      },
      "recover(address,address,uint256)": {
        "notice": "In case tokens have been accidentally sent directly to this contract. Only Forwarder can withdraw, else a MEV bot will intercept it."
      },
      "sellSharesAndSwap(address,address,uint256,bytes,(bytes,address,uint256,uint256,uint256),bool)": {
        "notice": "With this function a user can sell shares and swap them to a desired token. The user has to approve the paymenthub before on the shares contract."
      },
      "sellSharesWithPermit(address,address,address,address,uint256,bytes,(uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Sell shares with permit"
      },
      "sellSharesWithPermitAndSwap(address,address,address,uint256,bytes,(uint256,uint256,uint8,bytes32,bytes32),(bytes,address,uint256,uint256,uint256),bool)": {
        "notice": "With this function a user can sell shares with permit and swap them to a desired token."
      },
      "transferEther(address)": {
        "notice": "Transfer ether to a given address."
      },
      "withdrawEther(address,uint256)": {
        "notice": "Transfer ether to a given address. Only Forwarder can withdraw, else a MEV bot will intercept it."
      }
    },
    "notice": "A hub for payments. This allows tokens that do not support ERC 677 to enjoy similar functionality, namely interacting with a token-handling smart contract in one transaction, without having to set an allowance first. Instead, an allowance needs to be set only once, namely for this contract. Further, it supports automatic conversion from Ether to the payment currency through Uniswap or the reception of Ether using the current exchange rate as found in the chainlink oracle.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2863,
        "contract": "src/brokerbot/PaymentHub.sol:PaymentHub",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}