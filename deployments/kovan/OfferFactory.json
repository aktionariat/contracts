{
  "address": "0x250a54Eb1F6871DBD98222b7f23eA8b6D5241a42",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pricePerShare",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votePeriod",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "contract IOffer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "contract IDraggable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pricePerShare",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votePeriod",
          "type": "uint256"
        }
      ],
      "name": "predictOfferAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf38a450270b31ee2872e3c4349a47b582288690137e6cc64d19fc6a2a655d1f5",
  "receipt": {
    "to": null,
    "from": "0x39E5351E6CE3c4B19B8b0a2F5C82c511782457BE",
    "contractAddress": "0x250a54Eb1F6871DBD98222b7f23eA8b6D5241a42",
    "transactionIndex": 1,
    "gasUsed": "1770196",
    "logsBloom": "0x
    "blockHash": "0x0e7dba2626c64557800bd2f2edc8b6bb848f4be89b02585e94b5f4669ca7e561",
    "transactionHash": "0xf38a450270b31ee2872e3c4349a47b582288690137e6cc64d19fc6a2a655d1f5",
    "logs": [],
    "blockNumber": 29824836,
    "cumulativeGasUsed": "1791196",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ce23c5851e66c855b8a25710ae38b12c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votePeriod\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract IOffer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"contract IDraggable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votePeriod\",\"type\":\"uint256\"}],\"name\":\"predictOfferAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/draggable/OfferFactory.sol\":\"OfferFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/ERC20/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0x2224189bcdeb28cbadfdb8d126c278df60ec39875c7929e7ffa9e2055cded960\",\"license\":\"MIT\"},\"src/draggable/IDraggable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\ninterface IDraggable {\\n    \\n    function oracle() external view returns (address);\\n    function drag(address buyer, IERC20 currency) external;\\n    function notifyOfferEnded() external;\\n    function votingPower(address voter) external returns (uint256);\\n    function totalVotingTokens() external view returns (uint256);\\n    function notifyVoted(address voter) external;\\n\\n}\",\"keccak256\":\"0xf2c6e6dfbd3d1694b17def3b3daee91a418ec17fcf49a8d7ba525058894b60ad\",\"license\":\"MIT\"},\"src/draggable/IOffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ninterface IOffer {\\n\\tfunction makeCompetingOffer(IOffer newOffer) external;\\n\\n\\t// if there is a token transfer while an offer is open, the votes get transfered too\\n\\tfunction notifyMoved(address from, address to, uint256 value) external;\\n\\n\\tfunction currency() external view returns (IERC20);\\n\\n\\tfunction price() external view returns (uint256);\\n\\n\\tfunction isWellFunded() external view returns (bool);\\n}\",\"keccak256\":\"0xac6f70c3e8b5cbae464cbf39ffcd16035bd77104982695ef255bd11418bf8826\",\"license\":\"MIT\"},\"src/draggable/IOfferFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\n\\ninterface IOfferFactory {\\n\\n\\tfunction create(\\n\\t\\tbytes32 salt, address buyer, uint256 pricePerShare,\\tIERC20 currency,\\tuint256 quorum,\\tuint256 votePeriod\\n\\t) external payable returns (IOffer);\\n}\",\"keccak256\":\"0x048511f24b8e4278df38ee6f5fb038d53a7964cc90761780fb1ebb2e7825a532\",\"license\":\"MIT\"},\"src/draggable/Offer.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2020 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IDraggable.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\n/**\\n * @title A public offer to acquire all tokens\\n * @author Luzius Meisser, luzius@aktionariat.com\\n */\\n\\ncontract Offer is IOffer {\\n\\n    address private constant LICENSE_FEE_ADDRESS = 0x29Fe8914e76da5cE2d90De98a64d0055f199d06D;\\n\\n    uint256 private constant AQUISITION_GRACE_PERIOD = 30 days;     // buyer has thirty days to complete acquisition after voting ends\\n    \\n    uint256 private constant BPS_MUL = 10000;           // basis point multiplier to be used with quorum\\n\\n    uint256 public immutable quorum;                    // Percentage of votes needed to start drag-along process in BPS, i.e. 10'000 = 100%\\n\\n    IDraggable public immutable token;\\n    address public immutable buyer;                     // who made the offer\\n    \\n    IERC20 override public immutable currency;\\n    uint256 override public immutable price;            // the price offered per share\\n\\n    enum Vote { NONE, YES, NO }                         // Used internally, represents not voted yet or yes/no vote.\\n    mapping (address => Vote) private votes;            // Who votes what\\n    uint256 public yesVotes;                            // total number of yes votes, including external votes\\n    uint256 public noVotes;                             // total number of no votes, including external votes\\n    uint256 public noExternal;                          // number of external no votes reported by oracle\\n    uint256 public yesExternal;                         // number of external yes votes reported by oracle\\n\\n    uint256 public immutable voteEnd;                   // end of vote period in block time (seconds after 1.1.1970)\\n\\n    event VotesChanged(uint256 yesVotes, uint256 noVotes);\\n    event OfferCreated(address indexed buyer, IDraggable indexed token, uint256 pricePerShare, IERC20 indexed currency);\\n    event OfferEnded(address indexed buyer, bool indexed success, string message);\\n\\n    // Not checked here, but buyer should make sure it is well funded from the beginning\\n    constructor(\\n        address _buyer,\\n        IDraggable _token,\\n        uint256 _price,\\n        IERC20 _currency,\\n        uint256 _quorum,\\n        uint256 _votePeriod\\n    ) \\n        payable \\n    {\\n        buyer = _buyer;\\n        token = _token;\\n        currency = _currency;\\n        price = _price;\\n        quorum = _quorum;\\n        // rely on time stamp is ok, no exact time stamp needed\\n        // solhint-disable-next-line not-rely-on-time\\n        voteEnd = block.timestamp + _votePeriod;\\n        emit OfferCreated(_buyer, _token, _price, _currency);\\n        // License Fee to Aktionariat AG, also ensures that offer is serious.\\n        // Any circumvention of this license fee payment is a violation of the copyright terms.\\n        payable(LICENSE_FEE_ADDRESS).transfer(3 ether);\\n    }\\n\\n    function makeCompetingOffer(IOffer betterOffer) external override {\\n        require(msg.sender == address(token), \\\"invalid caller\\\");\\n        require(!isAccepted(), \\\"old already accepted\\\");\\n        require(currency == betterOffer.currency() && betterOffer.price() > price, \\\"old offer better\\\");\\n        require(betterOffer.isWellFunded(), \\\"not funded\\\");\\n        kill(false, \\\"replaced\\\");\\n    }\\n\\n    function hasExpired() internal view returns (bool) {\\n        // rely on time stamp is ok, no exact time stamp needed\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp > voteEnd + AQUISITION_GRACE_PERIOD; \\n    }\\n\\n    function contest() external {\\n        if (hasExpired()) {\\n            kill(false, \\\"expired\\\");\\n        } else if (isDeclined()) {\\n            kill(false, \\\"declined\\\");\\n        } else if (!isWellFunded()) {\\n            kill(false, \\\"lack of funds\\\");\\n        }\\n    }\\n\\n    function cancel() external {\\n        require(msg.sender == buyer, \\\"invalid caller\\\");\\n        kill(false, \\\"cancelled\\\");\\n    }\\n\\n    function execute() external {\\n        require(msg.sender == buyer, \\\"not buyer\\\");\\n        require(isAccepted(), \\\"not accepted\\\");\\n        uint256 totalPrice = getTotalPrice();\\n        require(currency.transferFrom(buyer, address(token), totalPrice), \\\"transfer failed\\\");\\n        token.drag(buyer, currency);\\n        kill(true, \\\"success\\\");\\n    }\\n\\n    function getTotalPrice() internal view returns (uint256) {\\n        IERC20 tok = IERC20(address(token));\\n        return (tok.totalSupply() - tok.balanceOf(buyer)) * price;\\n    }\\n\\n    function isWellFunded() public view override returns (bool) {\\n        uint256 buyerBalance = currency.balanceOf(buyer);\\n        uint256 totalPrice = getTotalPrice();\\n        return totalPrice <= buyerBalance;\\n    }\\n\\n    function isAccepted() public view returns (bool) {\\n        if (isVotingOpen()) {\\n            // is it already clear that more than the quorum requiered will vote yes even though the vote is not over yet?\\n            return yesVotes * BPS_MUL  >= quorum * token.totalVotingTokens();\\n        } else {\\n            // did more than the quorum requiered votes say 'yes'?\\n            return yesVotes * BPS_MUL >= quorum * (yesVotes + noVotes);\\n        }\\n    }\\n\\n    function isDeclined() public view returns (bool) {\\n        if (isVotingOpen()) {\\n            // is it already clear that 25% will vote no even though the vote is not over yet?\\n            uint256 supply = token.totalVotingTokens();\\n            return (supply - noVotes) * BPS_MUL < quorum * supply;\\n        } else {\\n            // did quorum% of all cast votes say 'no'?\\n            return BPS_MUL * yesVotes < quorum * (yesVotes + noVotes);\\n        }\\n    }\\n\\n    function notifyMoved(address from, address to, uint256 value) external override {\\n        require(msg.sender == address(token), \\\"invalid caller\\\");\\n        if (isVotingOpen()) {\\n            Vote fromVoting = votes[from];\\n            Vote toVoting = votes[to];\\n            update(fromVoting, toVoting, value);\\n        }\\n    }\\n\\n    function update(Vote previousVote, Vote newVote, uint256 votes_) internal {\\n        if (previousVote != newVote) {\\n            if (previousVote == Vote.NO) {\\n                noVotes -= votes_;\\n            } else if (previousVote == Vote.YES) {\\n                yesVotes -= votes_;\\n            }\\n            if (newVote == Vote.NO) {\\n                noVotes += votes_;\\n            } else if (newVote == Vote.YES) {\\n                yesVotes += votes_;\\n            }\\n            emit VotesChanged(yesVotes, noVotes);\\n        }\\n    }\\n\\n    function isVotingOpen() public view returns (bool) {\\n        // rely on time stamp is ok, no exact time stamp needed\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp <= voteEnd;\\n    }\\n\\n    modifier votingOpen() {\\n        require(isVotingOpen(), \\\"vote ended\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Function to allow the oracle to report the votes of external votes (e.g. shares tokenized on other blockchains).\\n     * This functions is idempotent and sets the number of external yes and no votes. So when more votes come in, the\\n     * oracle should always report the total number of yes and no votes. Abstentions are not counted.\\n     */\\n    function reportExternalVotes(uint256 yes, uint256 no) external {\\n        require(msg.sender == token.oracle(), \\\"not oracle\\\");\\n        require(yes + no + IERC20(address(token)).totalSupply() <= token.totalVotingTokens(), \\\"too many votes\\\");\\n        // adjust total votes taking into account that the oralce might have reported different counts before\\n        yesVotes = yesVotes - yesExternal + yes;\\n        noVotes = noVotes - noExternal + no;\\n        // remember how the oracle voted in case the oracle later reports updated numbers\\n        yesExternal = yes;\\n        noExternal = no;\\n    }\\n\\n    function voteYes() external {\\n        vote(Vote.YES);\\n    }\\n\\n    function voteNo() external { \\n        vote(Vote.NO);\\n    }\\n\\n    function vote(Vote newVote) internal votingOpen() {\\n        Vote previousVote = votes[msg.sender];\\n        votes[msg.sender] = newVote;\\n        if(previousVote == Vote.NONE){\\n            token.notifyVoted(msg.sender);\\n        }\\n        update(previousVote, newVote, token.votingPower(msg.sender));\\n    }\\n\\n    function hasVotedYes(address voter) external view returns (bool) {\\n        return votes[voter] == Vote.YES;\\n    }\\n\\n    function hasVotedNo(address voter) external view returns (bool) {\\n        return votes[voter] == Vote.NO;\\n    }\\n\\n    function kill(bool success, string memory message) internal {\\n        emit OfferEnded(buyer, success, message);\\n        token.notifyOfferEnded();\\n        selfdestruct(payable(buyer));\\n    }\\n\\n}\",\"keccak256\":\"0xf0a547f1a7bc3cf1ab57cd268cae3f7442268ac213d8bcd8a09dc48a80842680\",\"license\":\"LicenseRef-Aktionariat\"},\"src/draggable/OfferFactory.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2020 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Offer.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\nimport \\\"./IOfferFactory.sol\\\";\\n\\ncontract OfferFactory is IOfferFactory{\\n\\n    // It must be possible to predict the address of the offer so one can pre-fund the allowance.\\n    function predictOfferAddress(bytes32 salt, address buyer, IDraggable token, uint256 pricePerShare, IERC20 currency, uint256 quorum, uint256 votePeriod) external view returns (address) {\\n        bytes32 initCodeHash = keccak256(abi.encodePacked(type(Offer).creationCode, abi.encode(buyer, token, pricePerShare, currency, quorum, votePeriod)));\\n        bytes32 hashResult = keccak256(abi.encodePacked(bytes1(0xff), address(this), salt, initCodeHash));\\n        return address(uint160(uint256(hashResult)));\\n    }\\n\\n    // Do not call directly, msg.sender must be the token to be acquired\\n    function create(bytes32 salt, address buyer, uint256 pricePerShare, IERC20 currency, uint256 quorum, uint256 votePeriod) override external payable returns (IOffer) {\\n        IOffer offer = new Offer{value: msg.value, salt: salt}(buyer, IDraggable(msg.sender), pricePerShare, currency, quorum, votePeriod);\\n        return offer;\\n    }\\n}\",\"keccak256\":\"0x3b57e219ea638816d7f883228b046342001475c8765c5445f2f3e2d4d350ebc2\",\"license\":\"LicenseRef-Aktionariat\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611f5a806100206000396000f3fe6080604052600436106100295760003560e01c8063452784bc1461002e5780634dc5e4311461006a575b600080fd5b34801561003a57600080fd5b5061004e6100493660046101af565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e610078366004610220565b61014e565b60008060405180602001610090906101a2565b601f1982820381018352601f9091011660408190526100bd908a908a908a908a908a908a906020016102d4565b60408051601f19818403018152908290526100db92916020016102b7565b60408051601f1981840301815282825280516020918201206001600160f81b0319828501523060601b6bffffffffffffffffffffffff19166021850152603584019c909c5260558084019c909c528151808403909c018c5260759092019052895199019890982098975050505050505050565b600080348890883389898989604051610166906101a2565b610175969594939291906102d4565b82906040518091039083f591505080158015610195573d6000803e3d6000fd5b5098975050505050505050565b611bfe8061032783390190565b600080600080600080600060e0888a0312156101ca57600080fd5b8735965060208801356101dc8161030e565b955060408801356101ec8161030e565b94506060880135935060808801356102038161030e565b9699959850939692959460a0840135945060c09093013592915050565b60008060008060008060c0878903121561023957600080fd5b86359550602087013561024b8161030e565b94506040870135935060608701356102628161030e565b9598949750929560808101359460a0909101359350915050565b6000815160005b8181101561029d5760208185018101518683015201610283565b818111156102ac576000828601525b509290920192915050565b60006102cc6102c6838661027c565b8461027c565b949350505050565b6001600160a01b0396871681529486166020860152604085019390935293166060830152608082019290925260a081019190915260c00190565b6001600160a01b038116811461032357600080fd5b5056fe61014060405260405162001bfe38038062001bfe8339810160408190526200002791620000fc565b6001600160601b0319606087811b821660c05286811b821660a05284901b1660e05261010084905260808290526200006081426200016c565b610120526040518481526001600160a01b0380851691878216918916907f4f05be72ad7f57c27e555ace8452f56d8b1e82c9e6e1cd4fd282f34518b7729a9060200160405180910390a46040517329fe8914e76da5ce2d90de98a64d0055f199d06d906000906729a2241af62c00009082818181858883f19350505050158015620000ef573d6000803e3d6000fd5b50505050505050620001ac565b60008060008060008060c087890312156200011657600080fd5b8651620001238162000193565b6020880151909650620001368162000193565b604088015160608901519196509450620001508162000193565b809350506080870151915060a087015190509295509295509295565b600082198211156200018e57634e487b7160e01b600052601160045260246000fd5b500190565b6001600160a01b0381168114620001a957600080fd5b50565b60805160a05160601c60c05160601c60e05160601c61010051610120516118fd6200030160003960008181610298015281816103190152818161048e0152818161087f01528181610cb80152818161128f01526116b101526000818161025501528181610f7b01526111850152600081816102da015281816103b4015281816106bc015281816107b70152610f490152600081816101f301528181610387015281816105a0015281816106620152818161078f01528181610dd00152818161113801528181611462015261153601526000818161034e015281816104b50152818161068a015281816107df015281816108a8015281816109d601528181610ab401528181610b4501528181610c7901528181610e44015281816111630152818161134e015281816113d801526114c301526000818161017e0152818161054a0152818161093f015261099b01526118fd6000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063a035b1fe116100c3578063e5a6b10f1161007c578063e5a6b10f146102d5578063ea8a1af0146102fc578063f6c8c41e14610304578063fa7f1bae14610317578063fb286c6514610340578063fc0c546a1461034957600080fd5b8063a035b1fe14610250578063b5b47f4214610277578063bd3bc1d314610280578063ddbe8f0914610293578063e1a1810f146102ba578063e3ac83da146102cd57600080fd5b80635051a5ec116101155780635051a5ec146101de57806361461954146101e65780637150d8ae146101ee5780638f1b4c6f1461022d57806390cf581c146102405780639b4e88aa1461024857600080fd5b806311a439a01461015d5780631703a01814610179578063354e5629146101a05780633f5e3e7f146101a957806341c12a70146101c1578063448ab4c6146101cb575b600080fd5b61016660045481565b6040519081526020015b60405180910390f35b6101667f000000000000000000000000000000000000000000000000000000000000000081565b61016660035481565b6101b1610370565b6040519015158152602001610170565b6101c9610445565b005b6101b16101d93660046116dc565b610451565b6101b161048a565b6101c9610595565b6102157f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610170565b6101b161023b3660046116dc565b610868565b6101c9610871565b6101b161087b565b6101667f000000000000000000000000000000000000000000000000000000000000000081565b61016660025481565b6101c961028e366004611799565b6109d4565b6101667f000000000000000000000000000000000000000000000000000000000000000081565b6101c96102c836600461171d565b610c6e565b6101c9610d1a565b6102157f000000000000000000000000000000000000000000000000000000000000000081565b6101c9610dc5565b6101c96103123660046116dc565b610e39565b7f00000000000000000000000000000000000000000000000000000000000000004211156101b1565b61016660015481565b6102157f000000000000000000000000000000000000000000000000000000000000000081565b6040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156103f657600080fd5b505afa15801561040a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042e9190611780565b9050600061043a611121565b919091111592915050565b61044f600261128d565b565b600060015b6001600160a01b03831660009081526020819052604090205460ff1660028111156104835761048361189c565b1492915050565b60007f00000000000000000000000000000000000000000000000000000000000000004211610585577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b815260040160206040518083038186803b15801561050c57600080fd5b505afa158015610520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105449190611780565b61056e907f0000000000000000000000000000000000000000000000000000000000000000611850565b61271060015461057e9190611850565b1015905090565b6002546001546105449190611838565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105fe5760405162461bcd60e51b81526020600482015260096024820152683737ba10313abcb2b960b91b60448201526064015b60405180910390fd5b61060661048a565b6106415760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd081858d8d95c1d195960a21b60448201526064016105f5565b600061064b611121565b6040516323b872dd60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152604482018390529192507f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd90606401602060405180830381600087803b15801561070257600080fd5b505af1158015610716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073a919061175e565b6107785760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b60448201526064016105f5565b604051637e5bcd3f60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063fcb79a7e90604401600060405180830381600087803b15801561082357600080fd5b505af1158015610837573d6000803e3d6000fd5b505050506108656001604051806040016040528060078152602001667375636365737360c81b81525061145d565b50565b60006002610456565b61044f600161128d565b60007f000000000000000000000000000000000000000000000000000000000000000042116109855760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ff57600080fd5b505afa158015610913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109379190611780565b9050610963817f0000000000000000000000000000000000000000000000000000000000000000611850565b61271060025483610974919061186f565b61097e9190611850565b1091505090565b6002546001546109959190611838565b6109bf907f0000000000000000000000000000000000000000000000000000000000000000611850565b6001546109ce90612710611850565b10905090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2d57600080fd5b505afa158015610a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a659190611700565b6001600160a01b0316336001600160a01b031614610ab25760405162461bcd60e51b815260206004820152600a6024820152696e6f74206f7261636c6560b01b60448201526064016105f5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0b57600080fd5b505afa158015610b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b439190611780565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9c57600080fd5b505afa158015610bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd49190611780565b610bde8385611838565b610be89190611838565b1115610c275760405162461bcd60e51b815260206004820152600e60248201526d746f6f206d616e7920766f74657360901b60448201526064016105f5565b81600454600154610c38919061186f565b610c429190611838565b6001556003546002548291610c569161186f565b610c609190611838565b600255600491909155600355565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610cb65760405162461bcd60e51b81526004016105f590611810565b7f00000000000000000000000000000000000000000000000000000000000000004211610d15576001600160a01b0380841660009081526020819052604080822054928516825290205460ff9182169116610d12828285611560565b50505b505050565b610d226116a6565b15610d515761044f600060405180604001604052806007815260200166195e1c1a5c995960ca1b81525061145d565b610d5961087b565b15610d895761044f600060405180604001604052806008815260200167191958db1a5b995960c21b81525061145d565b610d91610370565b61044f5761044f60006040518060400160405280600d81526020016c6c61636b206f662066756e647360981b81525061145d565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e0d5760405162461bcd60e51b81526004016105f590611810565b61044f60006040518060400160405280600981526020016818d85b98d95b1b195960ba1b81525061145d565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e815760405162461bcd60e51b81526004016105f590611810565b610e8961048a565b15610ecd5760405162461bcd60e51b81526020600482015260146024820152731bdb1908185b1c9958591e481858d8d95c1d195960621b60448201526064016105f5565b806001600160a01b031663e5a6b10f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0657600080fd5b505afa158015610f1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3e9190611700565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614801561100d57507f0000000000000000000000000000000000000000000000000000000000000000816001600160a01b031663a035b1fe6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fd357600080fd5b505afa158015610fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100b9190611780565b115b61104c5760405162461bcd60e51b815260206004820152601060248201526f37b6321037b33332b9103132ba3a32b960811b60448201526064016105f5565b806001600160a01b0316633f5e3e7f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561108557600080fd5b505afa158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd919061175e565b6110f65760405162461bcd60e51b815260206004820152600a6024820152691b9bdd08199d5b99195960b21b60448201526064016105f5565b6108656000604051806040016040528060088152602001671c995c1b1858d95960c21b81525061145d565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000091908316906370a082319060240160206040518083038186803b1580156111ca57600080fd5b505afa1580156111de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112029190611780565b826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561123b57600080fd5b505afa15801561124f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112739190611780565b61127d919061186f565b6112879190611850565b91505090565b7f00000000000000000000000000000000000000000000000000000000000000004211156112ea5760405162461bcd60e51b815260206004820152600a6024820152691d9bdd1948195b99195960b21b60448201526064016105f5565b336000908152602081905260409020805460ff811691839160ff1916600183600281111561131a5761131a61189c565b021790555060008160028111156113335761133361189c565b14156113b3576040516345c8a62b60e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906345c8a62b90602401600060405180830381600087803b15801561139a57600080fd5b505af11580156113ae573d6000803e3d6000fd5b505050505b60405163603a39fb60e11b815233600482015261145990829084906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c07473f690602401602060405180830381600087803b15801561141c57600080fd5b505af1158015611430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114549190611780565b611560565b5050565b8115157f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167fba01adb1638f647e6baa43cb5d8d3a05ed7e59ac18415bf4c64adba235c5b2b0836040516114b991906117bb565b60405180910390a37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166332bc320b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561151c57600080fd5b505af1158015611530573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316ff5b8160028111156115725761157261189c565b8360028111156115845761158461189c565b14610d1557600283600281111561159d5761159d61189c565b14156115c05780600260008282546115b5919061186f565b909155506115f29050565b60018360028111156115d4576115d461189c565b14156115f25780600160008282546115ec919061186f565b90915550505b60028260028111156116065761160661189c565b141561162957806002600082825461161e9190611838565b9091555061165b9050565b600182600281111561163d5761163d61189c565b141561165b5780600160008282546116559190611838565b90915550505b7f8fcc50c2c4edd06d51ae66e9e21ed76b32a1766c57f491788e1aa24a1b58c256600154600254604051611699929190918252602082015260400190565b60405180910390a1505050565b60006116d562278d007f0000000000000000000000000000000000000000000000000000000000000000611838565b4211905090565b6000602082840312156116ee57600080fd5b81356116f9816118b2565b9392505050565b60006020828403121561171257600080fd5b81516116f9816118b2565b60008060006060848603121561173257600080fd5b833561173d816118b2565b9250602084013561174d816118b2565b929592945050506040919091013590565b60006020828403121561177057600080fd5b815180151581146116f957600080fd5b60006020828403121561179257600080fd5b5051919050565b600080604083850312156117ac57600080fd5b50508035926020909101359150565b600060208083528351808285015260005b818110156117e8578581018301518582016040015282016117cc565b818111156117fa576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252600e908201526d34b73b30b634b21031b0b63632b960911b604082015260600190565b6000821982111561184b5761184b611886565b500190565b600081600019048311821515161561186a5761186a611886565b500290565b60008282101561188157611881611886565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038116811461086557600080fdfea264697066735822122073b9fb637b460502bc878543a6d5f196a942916163b9759027f4bc38933ac8a864736f6c63430008070033a264697066735822122000dbb5ec85b9114c055a1c4dc3930232b0e69877821f51ddebf47088b6115a1264736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c8063452784bc1461002e5780634dc5e4311461006a575b600080fd5b34801561003a57600080fd5b5061004e6100493660046101af565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e610078366004610220565b61014e565b60008060405180602001610090906101a2565b601f1982820381018352601f9091011660408190526100bd908a908a908a908a908a908a906020016102d4565b60408051601f19818403018152908290526100db92916020016102b7565b60408051601f1981840301815282825280516020918201206001600160f81b0319828501523060601b6bffffffffffffffffffffffff19166021850152603584019c909c5260558084019c909c528151808403909c018c5260759092019052895199019890982098975050505050505050565b600080348890883389898989604051610166906101a2565b610175969594939291906102d4565b82906040518091039083f591505080158015610195573d6000803e3d6000fd5b5098975050505050505050565b611bfe8061032783390190565b600080600080600080600060e0888a0312156101ca57600080fd5b8735965060208801356101dc8161030e565b955060408801356101ec8161030e565b94506060880135935060808801356102038161030e565b9699959850939692959460a0840135945060c09093013592915050565b60008060008060008060c0878903121561023957600080fd5b86359550602087013561024b8161030e565b94506040870135935060608701356102628161030e565b9598949750929560808101359460a0909101359350915050565b6000815160005b8181101561029d5760208185018101518683015201610283565b818111156102ac576000828601525b509290920192915050565b60006102cc6102c6838661027c565b8461027c565b949350505050565b6001600160a01b0396871681529486166020860152604085019390935293166060830152608082019290925260a081019190915260c00190565b6001600160a01b038116811461032357600080fd5b5056fe61014060405260405162001bfe38038062001bfe8339810160408190526200002791620000fc565b6001600160601b0319606087811b821660c05286811b821660a05284901b1660e05261010084905260808290526200006081426200016c565b610120526040518481526001600160a01b0380851691878216918916907f4f05be72ad7f57c27e555ace8452f56d8b1e82c9e6e1cd4fd282f34518b7729a9060200160405180910390a46040517329fe8914e76da5ce2d90de98a64d0055f199d06d906000906729a2241af62c00009082818181858883f19350505050158015620000ef573d6000803e3d6000fd5b50505050505050620001ac565b60008060008060008060c087890312156200011657600080fd5b8651620001238162000193565b6020880151909650620001368162000193565b604088015160608901519196509450620001508162000193565b809350506080870151915060a087015190509295509295509295565b600082198211156200018e57634e487b7160e01b600052601160045260246000fd5b500190565b6001600160a01b0381168114620001a957600080fd5b50565b60805160a05160601c60c05160601c60e05160601c61010051610120516118fd6200030160003960008181610298015281816103190152818161048e0152818161087f01528181610cb80152818161128f01526116b101526000818161025501528181610f7b01526111850152600081816102da015281816103b4015281816106bc015281816107b70152610f490152600081816101f301528181610387015281816105a0015281816106620152818161078f01528181610dd00152818161113801528181611462015261153601526000818161034e015281816104b50152818161068a015281816107df015281816108a8015281816109d601528181610ab401528181610b4501528181610c7901528181610e44015281816111630152818161134e015281816113d801526114c301526000818161017e0152818161054a0152818161093f015261099b01526118fd6000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063a035b1fe116100c3578063e5a6b10f1161007c578063e5a6b10f146102d5578063ea8a1af0146102fc578063f6c8c41e14610304578063fa7f1bae14610317578063fb286c6514610340578063fc0c546a1461034957600080fd5b8063a035b1fe14610250578063b5b47f4214610277578063bd3bc1d314610280578063ddbe8f0914610293578063e1a1810f146102ba578063e3ac83da146102cd57600080fd5b80635051a5ec116101155780635051a5ec146101de57806361461954146101e65780637150d8ae146101ee5780638f1b4c6f1461022d57806390cf581c146102405780639b4e88aa1461024857600080fd5b806311a439a01461015d5780631703a01814610179578063354e5629146101a05780633f5e3e7f146101a957806341c12a70146101c1578063448ab4c6146101cb575b600080fd5b61016660045481565b6040519081526020015b60405180910390f35b6101667f000000000000000000000000000000000000000000000000000000000000000081565b61016660035481565b6101b1610370565b6040519015158152602001610170565b6101c9610445565b005b6101b16101d93660046116dc565b610451565b6101b161048a565b6101c9610595565b6102157f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610170565b6101b161023b3660046116dc565b610868565b6101c9610871565b6101b161087b565b6101667f000000000000000000000000000000000000000000000000000000000000000081565b61016660025481565b6101c961028e366004611799565b6109d4565b6101667f000000000000000000000000000000000000000000000000000000000000000081565b6101c96102c836600461171d565b610c6e565b6101c9610d1a565b6102157f000000000000000000000000000000000000000000000000000000000000000081565b6101c9610dc5565b6101c96103123660046116dc565b610e39565b7f00000000000000000000000000000000000000000000000000000000000000004211156101b1565b61016660015481565b6102157f000000000000000000000000000000000000000000000000000000000000000081565b6040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156103f657600080fd5b505afa15801561040a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042e9190611780565b9050600061043a611121565b919091111592915050565b61044f600261128d565b565b600060015b6001600160a01b03831660009081526020819052604090205460ff1660028111156104835761048361189c565b1492915050565b60007f00000000000000000000000000000000000000000000000000000000000000004211610585577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b815260040160206040518083038186803b15801561050c57600080fd5b505afa158015610520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105449190611780565b61056e907f0000000000000000000000000000000000000000000000000000000000000000611850565b61271060015461057e9190611850565b1015905090565b6002546001546105449190611838565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105fe5760405162461bcd60e51b81526020600482015260096024820152683737ba10313abcb2b960b91b60448201526064015b60405180910390fd5b61060661048a565b6106415760405162461bcd60e51b815260206004820152600c60248201526b1b9bdd081858d8d95c1d195960a21b60448201526064016105f5565b600061064b611121565b6040516323b872dd60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152604482018390529192507f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd90606401602060405180830381600087803b15801561070257600080fd5b505af1158015610716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073a919061175e565b6107785760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b60448201526064016105f5565b604051637e5bcd3f60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063fcb79a7e90604401600060405180830381600087803b15801561082357600080fd5b505af1158015610837573d6000803e3d6000fd5b505050506108656001604051806040016040528060078152602001667375636365737360c81b81525061145d565b50565b60006002610456565b61044f600161128d565b60007f000000000000000000000000000000000000000000000000000000000000000042116109855760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ff57600080fd5b505afa158015610913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109379190611780565b9050610963817f0000000000000000000000000000000000000000000000000000000000000000611850565b61271060025483610974919061186f565b61097e9190611850565b1091505090565b6002546001546109959190611838565b6109bf907f0000000000000000000000000000000000000000000000000000000000000000611850565b6001546109ce90612710611850565b10905090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2d57600080fd5b505afa158015610a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a659190611700565b6001600160a01b0316336001600160a01b031614610ab25760405162461bcd60e51b815260206004820152600a6024820152696e6f74206f7261636c6560b01b60448201526064016105f5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0b57600080fd5b505afa158015610b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b439190611780565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9c57600080fd5b505afa158015610bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd49190611780565b610bde8385611838565b610be89190611838565b1115610c275760405162461bcd60e51b815260206004820152600e60248201526d746f6f206d616e7920766f74657360901b60448201526064016105f5565b81600454600154610c38919061186f565b610c429190611838565b6001556003546002548291610c569161186f565b610c609190611838565b600255600491909155600355565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610cb65760405162461bcd60e51b81526004016105f590611810565b7f00000000000000000000000000000000000000000000000000000000000000004211610d15576001600160a01b0380841660009081526020819052604080822054928516825290205460ff9182169116610d12828285611560565b50505b505050565b610d226116a6565b15610d515761044f600060405180604001604052806007815260200166195e1c1a5c995960ca1b81525061145d565b610d5961087b565b15610d895761044f600060405180604001604052806008815260200167191958db1a5b995960c21b81525061145d565b610d91610370565b61044f5761044f60006040518060400160405280600d81526020016c6c61636b206f662066756e647360981b81525061145d565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e0d5760405162461bcd60e51b81526004016105f590611810565b61044f60006040518060400160405280600981526020016818d85b98d95b1b195960ba1b81525061145d565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e815760405162461bcd60e51b81526004016105f590611810565b610e8961048a565b15610ecd5760405162461bcd60e51b81526020600482015260146024820152731bdb1908185b1c9958591e481858d8d95c1d195960621b60448201526064016105f5565b806001600160a01b031663e5a6b10f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0657600080fd5b505afa158015610f1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3e9190611700565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614801561100d57507f0000000000000000000000000000000000000000000000000000000000000000816001600160a01b031663a035b1fe6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fd357600080fd5b505afa158015610fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100b9190611780565b115b61104c5760405162461bcd60e51b815260206004820152601060248201526f37b6321037b33332b9103132ba3a32b960811b60448201526064016105f5565b806001600160a01b0316633f5e3e7f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561108557600080fd5b505afa158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd919061175e565b6110f65760405162461bcd60e51b815260206004820152600a6024820152691b9bdd08199d5b99195960b21b60448201526064016105f5565b6108656000604051806040016040528060088152602001671c995c1b1858d95960c21b81525061145d565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000091908316906370a082319060240160206040518083038186803b1580156111ca57600080fd5b505afa1580156111de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112029190611780565b826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561123b57600080fd5b505afa15801561124f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112739190611780565b61127d919061186f565b6112879190611850565b91505090565b7f00000000000000000000000000000000000000000000000000000000000000004211156112ea5760405162461bcd60e51b815260206004820152600a6024820152691d9bdd1948195b99195960b21b60448201526064016105f5565b336000908152602081905260409020805460ff811691839160ff1916600183600281111561131a5761131a61189c565b021790555060008160028111156113335761133361189c565b14156113b3576040516345c8a62b60e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906345c8a62b90602401600060405180830381600087803b15801561139a57600080fd5b505af11580156113ae573d6000803e3d6000fd5b505050505b60405163603a39fb60e11b815233600482015261145990829084906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c07473f690602401602060405180830381600087803b15801561141c57600080fd5b505af1158015611430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114549190611780565b611560565b5050565b8115157f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167fba01adb1638f647e6baa43cb5d8d3a05ed7e59ac18415bf4c64adba235c5b2b0836040516114b991906117bb565b60405180910390a37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166332bc320b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561151c57600080fd5b505af1158015611530573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316ff5b8160028111156115725761157261189c565b8360028111156115845761158461189c565b14610d1557600283600281111561159d5761159d61189c565b14156115c05780600260008282546115b5919061186f565b909155506115f29050565b60018360028111156115d4576115d461189c565b14156115f25780600160008282546115ec919061186f565b90915550505b60028260028111156116065761160661189c565b141561162957806002600082825461161e9190611838565b9091555061165b9050565b600182600281111561163d5761163d61189c565b141561165b5780600160008282546116559190611838565b90915550505b7f8fcc50c2c4edd06d51ae66e9e21ed76b32a1766c57f491788e1aa24a1b58c256600154600254604051611699929190918252602082015260400190565b60405180910390a1505050565b60006116d562278d007f0000000000000000000000000000000000000000000000000000000000000000611838565b4211905090565b6000602082840312156116ee57600080fd5b81356116f9816118b2565b9392505050565b60006020828403121561171257600080fd5b81516116f9816118b2565b60008060006060848603121561173257600080fd5b833561173d816118b2565b9250602084013561174d816118b2565b929592945050506040919091013590565b60006020828403121561177057600080fd5b815180151581146116f957600080fd5b60006020828403121561179257600080fd5b5051919050565b600080604083850312156117ac57600080fd5b50508035926020909101359150565b600060208083528351808285015260005b818110156117e8578581018301518582016040015282016117cc565b818111156117fa576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252600e908201526d34b73b30b634b21031b0b63632b960911b604082015260600190565b6000821982111561184b5761184b611886565b500190565b600081600019048311821515161561186a5761186a611886565b500290565b60008282101561188157611881611886565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038116811461086557600080fdfea264697066735822122073b9fb637b460502bc878543a6d5f196a942916163b9759027f4bc38933ac8a864736f6c63430008070033a264697066735822122000dbb5ec85b9114c055a1c4dc3930232b0e69877821f51ddebf47088b6115a1264736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}