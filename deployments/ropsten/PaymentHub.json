{
  "address": "0x99D77d8FD7E78C3d4fCC85Dcca494B71ac42845E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregatorCHFUSD",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aggregatorETHUSD",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20In",
          "type": "address"
        }
      ],
      "name": "approveERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPriceCHFUSD",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPriceETHUSD",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountInBase",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "base",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "erc20In",
          "type": "address"
        }
      ],
      "name": "getPriceInERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountInBase",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "brokerBot",
          "type": "address"
        }
      ],
      "name": "getPriceInEther",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountInBase",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "base",
          "type": "address"
        }
      ],
      "name": "getPriceInEtherFromOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountInBase",
          "type": "uint256"
        }
      ],
      "name": "getPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "hasSettingKeepEther",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "multiPay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        }
      ],
      "name": "multiPayAndNotify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountInBase",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        }
      ],
      "name": "payAndNotify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        }
      ],
      "name": "payAndNotify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMaximum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "erc20In",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "base",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "payFromERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountBase",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountInMaximum",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        }
      ],
      "name": "payFromERC20AndNotify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountInBase",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "base",
          "type": "address"
        }
      ],
      "name": "payFromEther",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountInBase",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ref",
          "type": "bytes"
        }
      ],
      "name": "payFromEtherAndNotify",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ercAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x413f896f987092b37fb9b7714bfd4e10db13cdc930e4857e68d57cf2b49dee65",
  "receipt": {
    "to": null,
    "from": "0x39E5351E6CE3c4B19B8b0a2F5C82c511782457BE",
    "contractAddress": "0x99D77d8FD7E78C3d4fCC85Dcca494B71ac42845E",
    "transactionIndex": 17,
    "gasUsed": "1554613",
    "logsBloom": "0x
    "blockHash": "0x6ca214ad7e09c4c6188f11ccd4f9b8b552360dc55e92d7f1227e30f417db693a",
    "transactionHash": "0x413f896f987092b37fb9b7714bfd4e10db13cdc930e4857e68d57cf2b49dee65",
    "logs": [],
    "blockNumber": 11900632,
    "cumulativeGasUsed": "3639165",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x449d117117838fFA61263B61dA6301AA2a88B13A",
    "0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419"
  ],
  "numDeployments": 3,
  "solcInputHash": "3a8d93c9bf1cdabbfe33adbd981a1060",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregatorCHFUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregatorETHUSD\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20In\",\"type\":\"address\"}],\"name\":\"approveERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceCHFUSD\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceETHUSD\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20In\",\"type\":\"address\"}],\"name\":\"getPriceInERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"brokerBot\",\"type\":\"address\"}],\"name\":\"getPriceInEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"}],\"name\":\"getPriceInEtherFromOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"}],\"name\":\"getPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"hasSettingKeepEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiPay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"multiPayAndNotify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"payAndNotify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"payAndNotify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20In\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"payFromERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"payFromERC20AndNotify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"}],\"name\":\"payFromEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ref\",\"type\":\"bytes\"}],\"name\":\"payFromEtherAndNotify\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ercAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveERC20(address)\":{\"details\":\"This function needs to be called before using the PaymentHub the first time with a new ERC20 token.\",\"params\":{\"erc20In\":\"The erc20 addresse to approve.\"}},\"payFromERC20(uint256,uint256,address,address,address)\":{\"details\":\"The calling address must approve this contract to spend its ERC20 for this function to succeed. As the amount of input ERC20 is variable, the calling address will need to approve for a slightly higher or infinit amount, anticipating some variance.\",\"params\":{\"amountInMaximum\":\"The maximum amount of ERC20 willing to be swapped for the specified amountOut of baseCurrency.\",\"amountOut\":\"The desired amount of baseCurrency.\",\"erc20In\":\"The address of the erc20 token to pay with\",\"recipient\":\"The reciving address - brokerbot\"},\"returns\":{\"amountIn\":\"The amountIn of ERC20 actually spent to receive the desired amountOut.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveERC20(address)\":{\"notice\":\"This function appoves infinit allowance for Uniswap, this is safe as the paymenthub should never hold any token (see also recove() ).\"},\"getLatestPriceCHFUSD()\":{\"notice\":\"Returns the latest price of chf/usd pair from chainlink with 8 decimals\"},\"getLatestPriceETHUSD()\":{\"notice\":\"Returns the latest price of eth/usd pair from chainlink with 8 decimals\"},\"getPriceInEther(uint256,address)\":{\"notice\":\"Get price in Ether depding on brokerbot setting. If keep ETH is set price is from oracle. This is the method that the Brokerbot widget should use to quote the price to the user.\"},\"getPriceInEtherFromOracle(uint256,address)\":{\"notice\":\"Price in ETH with 18 decimals\"},\"getPriceInUSD(uint256)\":{\"notice\":\"Price in USD with 18 decimals\"},\"hasSettingKeepEther(address)\":{\"notice\":\"Checks if the recipient(brokerbot) has setting enabled to keep ether\"},\"multiPayAndNotify(address,address[],uint256[],bytes)\":{\"notice\":\"Can (at least in theory) save some gas as the sender balance only is touched in one transaction.\"},\"payFromEther(address,uint256,address)\":{\"notice\":\"Convenience method to swap ether into base and pay a target address\"},\"recover(address,address,uint256)\":{\"notice\":\"In case tokens have been accidentally sent directly to this contract. Make sure to be fast as anyone can call this!\"}},\"notice\":\"A hub for payments. This allows tokens that do not support ERC 677 to enjoy similar functionality, namely interacting with a token-handling smart contract in one transaction, without having to set an allowance first. Instead, an allowance needs to be set only once, namely for this contract. Further, it supports automatic conversion from Ether to the payment currency through Uniswap or the reception of Ether using the current exchange rate as found in the chainlink oracle.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/brokerbot/PaymentHub.sol\":\"PaymentHub\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"src/ERC20/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    event NameChanged(string name, string symbol);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0xfaefd97261d6413e7b891435756e82b7133d5c7c854ab04af50b2ab089136f4b\",\"license\":\"MIT\"},\"src/brokerbot/IBrokerbot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBrokerbot {\\n  \\n  function base() external view returns (address);\\n  \\n  function settings() external view returns (uint256);\\n\\n  function processIncoming(address token_, address from, uint256 amount, bytes calldata ref) external payable returns (uint256);\\n\\n}\",\"keccak256\":\"0x07088e348206a83c7f55c0336a03ad37fec8e424a442e1ee90ce4a699bce3940\",\"license\":\"MIT\"},\"src/brokerbot/IUniswapV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol\\npragma solidity ^0.8.0;\\n\\ninterface IQuoter {\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n    \\n    // solhint-disable-next-line func-name-mixedcase\\n    function WETH9() external view returns (address);\\n}\\n\\ninterface ISwapRouter {\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n    \\n    function refundETH() external payable;\\n}\",\"keccak256\":\"0x9a0e05a42567ffb0f2a96965ddda9f62adc782427a1fd1a267ff866d2420184c\",\"license\":\"MIT\"},\"src/brokerbot/PaymentHub.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2021 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IUniswapV3.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"./IBrokerbot.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * A hub for payments. This allows tokens that do not support ERC 677 to enjoy similar functionality,\\n * namely interacting with a token-handling smart contract in one transaction, without having to set an allowance first.\\n * Instead, an allowance needs to be set only once, namely for this contract.\\n * Further, it supports automatic conversion from Ether to the payment currency through Uniswap or the reception of Ether\\n * using the current exchange rate as found in the chainlink oracle.\\n */\\ncontract PaymentHub {\\n\\n    address public immutable weth;\\n    \\n    IQuoter private constant UNISWAP_QUOTER = IQuoter(0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6);\\n    ISwapRouter private constant UNISWAP_ROUTER = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n    AggregatorV3Interface internal immutable priceFeedCHFUSD;\\n    AggregatorV3Interface internal immutable priceFeedETHUSD;\\n\\n\\n    constructor(address _aggregatorCHFUSD, address _aggregatorETHUSD) {\\n        weth = UNISWAP_QUOTER.WETH9();\\n        priceFeedCHFUSD = AggregatorV3Interface(_aggregatorCHFUSD);\\n        priceFeedETHUSD = AggregatorV3Interface(_aggregatorETHUSD);\\n    }\\n\\n    /*  \\n     * Get price in WBTC\\n     * This is the method that the Brokerbot widget should use to quote the price to the user.\\n     */\\n    function getPriceInERC20(uint256 amountInBase, address base, address erc20In) public returns (uint256) {\\n        uint24 poolFee = 3000;\\n        return UNISWAP_QUOTER.quoteExactOutput(\\n            abi.encodePacked(base, poolFee, weth, poolFee, erc20In),\\n            amountInBase\\n        );\\n    }\\n\\n    /**\\n     * Get price in Ether depding on brokerbot setting.\\n     * If keep ETH is set price is from oracle.\\n     * This is the method that the Brokerbot widget should use to quote the price to the user.\\n     */\\n    function getPriceInEther(uint256 amountInBase, address brokerBot) public returns (uint256) {\\n        if ((brokerBot != address(0)) && hasSettingKeepEther(brokerBot)) {\\n            return getPriceInEtherFromOracle(amountInBase, IBrokerbot(brokerBot).base());\\n        } else {\\n            return UNISWAP_QUOTER.quoteExactOutputSingle(weth, IBrokerbot(brokerBot).base(), 3000, amountInBase, 0);\\n        }\\n    }\\n\\n    /**\\n     * Price in ETH with 18 decimals\\n     */\\n    function getPriceInEtherFromOracle(uint256 amountInBase, address base) public view returns (uint256) {\\n        if(isBaseCurrencyCHF(base)) {\\n            return getPriceInUSD(amountInBase) * 10**8 / uint256(getLatestPriceETHUSD());\\n        }\\n        return amountInBase * 10**8 / uint256(getLatestPriceETHUSD());\\n    }\\n\\n    /**\\n     * Price in USD with 18 decimals\\n     */\\n    function getPriceInUSD(uint256 amountInBase) public view returns (uint256) {\\n        return (uint256(getLatestPriceCHFUSD()) * amountInBase) / 10**8;\\n    }\\n\\n    /**\\n     * Returns the latest price of eth/usd pair from chainlink with 8 decimals\\n     */\\n    function getLatestPriceETHUSD() public view returns (int256) {\\n        (, int256 price, , , ) = priceFeedETHUSD.latestRoundData();\\n        return price;\\n    }\\n\\n    /**\\n     * Returns the latest price of chf/usd pair from chainlink with 8 decimals\\n     */\\n    function getLatestPriceCHFUSD() public view returns (int) {\\n        (, int price, , , ) = priceFeedCHFUSD.latestRoundData();\\n        return price;\\n    }\\n\\n    /**\\n     * Convenience method to swap ether into base and pay a target address\\n     */\\n    function payFromEther(address recipient, uint256 amountInBase, address base) public payable {\\n        ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter.ExactOutputSingleParams(\\n        // rely on time stamp is ok, no exact time stamp needed\\n        // solhint-disable-next-line not-rely-on-time\\n        weth, base, 3000, recipient, block.timestamp, amountInBase, msg.value, 0);\\n\\n        ISwapRouter swapRouter = UNISWAP_ROUTER;\\n        // Executes the swap returning the amountIn needed to spend to receive the desired amountOut.\\n        uint256 amountIn = swapRouter.exactOutputSingle{value: msg.value}(params);\\n\\n        // For exact output swaps, the amountInMaximum may not have all been spent.\\n        // If the actual amount spent (amountIn) is less than the specified maximum amount, we must refund the msg.sender and approve the swapRouter to spend 0.\\n        if (amountIn < msg.value) {\\n            swapRouter.refundETH();\\n            payable(msg.sender).transfer(msg.value - amountIn); // return change\\n        }\\n    }\\n\\n    /// @dev The calling address must approve this contract to spend its ERC20 for this function to succeed. As the amount of input ERC20 is variable,\\n    /// the calling address will need to approve for a slightly higher or infinit amount, anticipating some variance.\\n    /// @param amountOut The desired amount of baseCurrency.\\n    /// @param amountInMaximum The maximum amount of ERC20 willing to be swapped for the specified amountOut of baseCurrency.\\n    /// @param erc20In The address of the erc20 token to pay with\\n    /// @param recipient The reciving address - brokerbot\\n    /// @return amountIn The amountIn of ERC20 actually spent to receive the desired amountOut.\\n    function payFromERC20(uint256 amountOut, uint256 amountInMaximum, address erc20In, address base, address recipient) public returns (uint256 amountIn) {\\n        ISwapRouter swapRouter = UNISWAP_ROUTER;\\n        // Transfer the specified `amountInMaximum` to this contract.\\n        IERC20(erc20In).transferFrom(msg.sender, address(this), amountInMaximum);\\n\\n        uint24 poolFee = 3000;\\n\\n        // The parameter path is encoded as (tokenOut, fee, tokenIn/tokenOut, fee, tokenIn)\\n        ISwapRouter.ExactOutputParams memory params =\\n            ISwapRouter.ExactOutputParams({\\n                path: abi.encodePacked(base, poolFee, weth, poolFee, erc20In),\\n                recipient: recipient,\\n                // solhint-disable-next-line not-rely-on-time\\n                deadline: block.timestamp,\\n                amountOut: amountOut,\\n                amountInMaximum: amountInMaximum\\n            });\\n\\n        // Executes the swap, returning the amountIn actually spent.\\n        amountIn = swapRouter.exactOutput(params);\\n\\n        // If the swap did not require the full amountInMaximum to achieve the exact amountOut then we refund msg.sender and approve the router to spend 0.\\n        if (amountIn < amountInMaximum) {\\n            IERC20(erc20In).transfer(msg.sender, amountInMaximum - amountIn);\\n\\n        }\\n    }\\n\\n    ///This function appoves infinit allowance for Uniswap, this is safe as the paymenthub should never hold any token (see also recove() ).\\n    ///@dev This function needs to be called before using the PaymentHub the first time with a new ERC20 token.\\n    ///@param erc20In The erc20 addresse to approve.\\n    function approveERC20(address erc20In) external {\\n        IERC20(erc20In).approve(address(UNISWAP_ROUTER), 0x8000000000000000000000000000000000000000000000000000000000000000);\\n    }\\n\\n    function multiPay(address token, address[] calldata recipients, uint256[] calldata amounts) public {\\n        for (uint i=0; i<recipients.length; i++) {\\n            IERC20(token).transferFrom(msg.sender, recipients[i], amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * Can (at least in theory) save some gas as the sender balance only is touched in one transaction.\\n     */\\n    function multiPayAndNotify(address token, address[] calldata recipients, uint256[] calldata amounts, bytes calldata ref) external {\\n        for (uint i=0; i<recipients.length; i++) {\\n            payAndNotify(token, recipients[i], amounts[i], ref);\\n        }\\n    }\\n\\n    // Allows to make a payment from the sender to an address given an allowance to this contract\\n    // Equivalent to xchf.transferAndCall(recipient, amountInBase)\\n    function payAndNotify(address recipient, uint256 amountInBase, bytes calldata ref) external {\\n        payAndNotify(IBrokerbot(recipient).base(), recipient, amountInBase, ref);\\n    }\\n\\n    function payAndNotify(address token, address recipient, uint256 amount, bytes calldata ref) public {\\n        IERC20(token).transferFrom(msg.sender, recipient, amount);\\n        IBrokerbot(recipient).processIncoming(token, msg.sender, amount, ref);\\n    }\\n\\n    function payFromEtherAndNotify(address recipient, uint256 amountInBase, bytes calldata ref) external payable {\\n        address base = IBrokerbot(recipient).base();\\n        // Check if the brokerbot has setting to keep ETH\\n        if (hasSettingKeepEther(recipient)) {\\n            uint256 priceInEther = getPriceInEtherFromOracle(amountInBase, base);\\n            IBrokerbot(recipient).processIncoming{value: priceInEther}(base, msg.sender, amountInBase, ref);\\n\\n            // Pay back ETH that was overpaid\\n            if (priceInEther < msg.value) {\\n                payable(msg.sender).transfer(msg.value - priceInEther); // return change\\n            }\\n\\n        } else {\\n            payFromEther(recipient, amountInBase, base);\\n            IBrokerbot(recipient).processIncoming(base, msg.sender, amountInBase, ref);\\n        }\\n    }\\n\\n    /*** \\n     * Pay from any ERC20 token (which has Uniswapv3 ERC20-ETH pool) and send swapped base currency to brokerbot.\\n     * The needed amount needs to be approved at the ERC20 contract beforehand\\n     */\\n    function payFromERC20AndNotify(address recipient, uint256 amountBase, address erc20, uint256 amountInMaximum, bytes calldata ref) external {\\n        address base = IBrokerbot(recipient).base();\\n        payFromERC20(amountBase, amountInMaximum, erc20, base, recipient);\\n        IBrokerbot(recipient).processIncoming(base, msg.sender, amountBase, ref);\\n    }\\n\\n    /**\\n     * Checks if the recipient(brokerbot) has setting enabled to keep ether\\n     */\\n    function hasSettingKeepEther(address recipient) public view returns (bool) {\\n        return IBrokerbot(recipient).settings() & 0x4 == 0x4;\\n    }\\n\\n    function isBaseCurrencyCHF(address base) private pure returns (bool) {\\n        if (base == address(0xB4272071eCAdd69d933AdcD19cA99fe80664fc08)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * In case tokens have been accidentally sent directly to this contract.\\n     * Make sure to be fast as anyone can call this!\\n     */\\n    function recover(address ercAddress, address to, uint256 amount) external {\\n        IERC20(ercAddress).transfer(to, amount);\\n    }\\n\\n    // Important to receive ETH refund from Uniswap\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x9ced09622d5cfe40e3348f946df468dc77a6d614963676a0845d470f9d64da86\",\"license\":\"LicenseRef-Aktionariat\"},\"src/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\n// and modified it.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 weiValue) internal returns (bytes memory) {\\n        require(data.length == 0 || isContract(target), \\\"transfer or contract\\\");\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // TODO: I think this does not lead to correct error messages.\\n            revert(string(returndata));\\n        }\\n    }\\n}\",\"keccak256\":\"0xcc3675db1b57c3da4b9a83bf5ddd117b393c2f794c2cb33df366afe6f9e3772b\",\"license\":\"MIT\"},\"src/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n//\\n// Modifications:\\n// - Replaced Context._msgSender() with msg.sender\\n// - Made leaner\\n// - Extracted interface\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor (address initialOwner) {\\n        owner = initialOwner;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"not owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x1104f456d1ee340a1674c34f132578b599d8fd1a8e12e57d5a7691de1191caca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162001cb938038062001cb9833981016040819052620000349162000125565b73b27308f9f90d607463bb33ea1bebb41c27ce5ab66001600160a01b0316634aa4a4fc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200008257600080fd5b505afa15801562000097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bd919062000100565b6001600160601b0319606091821b811660805292811b831660a0521b1660c0526200015d565b80516001600160a01b0381168114620000fb57600080fd5b919050565b6000602082840312156200011357600080fd5b6200011e82620000e3565b9392505050565b600080604083850312156200013957600080fd5b6200014483620000e3565b91506200015460208401620000e3565b90509250929050565b60805160601c60a05160601c60c05160601c611b07620001b26000396000610c460152600061037e0152600081816102070152818161099701528181610b8d01528181610fc401526111a40152611b076000f3fe60806040526004361061010c5760003560e01c80636fb0c7dc11610095578063c8978fdb11610064578063c8978fdb146102d9578063d2c7c608146102f9578063d3b3ca7714610319578063e25b37c614610339578063f26e78991461035957600080fd5b80636fb0c7dc14610261578063930808fb1461027457806395fe863c14610294578063c1d8e08a146102a957600080fd5b80631945b784116100dc5780631945b784146101955780631c9af2e3146101b55780631ec82cb8146101d55780633fc8cef3146101f5578063568f32541461024157600080fd5b8062124e3d14610118578063040c037a1461014057806311e8701c1461015557806317f565d21461017557600080fd5b3661011357005b600080fd5b34801561012457600080fd5b5061012d610379565b6040519081526020015b60405180910390f35b61015361014e3660046116e7565b610418565b005b34801561016157600080fd5b50610153610170366004611415565b610611565b34801561018157600080fd5b506101536101903660046116e7565b6106ac565b3480156101a157600080fd5b5061012d6101b0366004611797565b61072f565b3480156101c157600080fd5b506101536101d036600461150a565b610798565b3480156101e157600080fd5b506101536101f0366004611456565b61088e565b34801561020157600080fd5b506102297f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610137565b34801561024d57600080fd5b5061015361025c36600461157c565b610910565b61015361026f366004611629565b610982565b34801561028057600080fd5b5061012d61028f3660046117c7565b610b5d565b3480156102a057600080fd5b5061012d610c41565b3480156102b557600080fd5b506102c96102c4366004611415565b610c9d565b6040519015158152602001610137565b3480156102e557600080fd5b5061012d6102f4366004611765565b610d1d565b34801561030557600080fd5b5061015361031436600461166b565b610d41565b34801561032557600080fd5b50610153610334366004611497565b610e4a565b34801561034557600080fd5b5061012d610354366004611797565b610f07565b34801561036557600080fd5b5061012d6103743660046117fe565b6110ea565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156103d557600080fd5b505afa1580156103e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040d919061185d565b509195945050505050565b6000846001600160a01b0316635001f3b56040518163ffffffff1660e01b815260040160206040518083038186803b15801561045357600080fd5b505afa158015610467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048b9190611439565b905061049685610c9d565b156105775760006104a7858361072f565b9050856001600160a01b03166369365c528284338989896040518763ffffffff1660e01b81526004016104de95949392919061194c565b6020604051808303818588803b1580156104f757600080fd5b505af115801561050b573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610530919061177e565b503481101561057157336108fc6105478334611a5b565b6040518115909202916000818181858888f1935050505015801561056f573d6000803e3d6000fd5b505b5061060a565b610582858583610982565b60405163349b2e2960e11b81526001600160a01b038616906369365c52906105b6908490339089908990899060040161194c565b602060405180830381600087803b1580156105d057600080fd5b505af11580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610608919061177e565b505b5050505050565b60405163095ea7b360e01b815273e592427a0aece92de3edee1f18e0157c058615646004820152600160ff1b60248201526001600160a01b0382169063095ea7b390604401602060405180830381600087803b15801561067057600080fd5b505af1158015610684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a89190611743565b5050565b610729846001600160a01b0316635001f3b56040518163ffffffff1660e01b815260040160206040518083038186803b1580156106e857600080fd5b505afa1580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107209190611439565b85858585610e4a565b50505050565b600061073a82611331565b1561076f57610747610c41565b61075084610d1d565b61075e906305f5e100611a3c565b6107689190611a1a565b9050610792565b610777610c41565b610785846305f5e100611a3c565b61078f9190611a1a565b90505b92915050565b60005b8381101561060857856001600160a01b03166323b872dd338787858181106107c5576107c5611aa3565b90506020020160208101906107da9190611415565b8686868181106107ec576107ec611aa3565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401602060405180830381600087803b15801561084357600080fd5b505af1158015610857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087b9190611743565b508061088681611a72565b91505061079b565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b1580156108d857600080fd5b505af11580156108ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107299190611743565b60005b85811015610978576109668888888481811061093157610931611aa3565b90506020020160208101906109469190611415565b87878581811061095857610958611aa3565b905060200201358686610e4a565b8061097081611a72565b915050610913565b5050505050505050565b60408051610100810182526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116825283811660208301908152610bb883850190815287831660608501908152426080860190815260a086018981523460c08801818152600060e08a018181529a51631b67c43360e31b81528a518a166004820152975189166024890152955162ffffff166044880152935187166064870152915160848601525160a4850152905160c4840152945190921660e4820152919273e592427a0aece92de3edee1f18e0157c0586156492839163db3e219891610104016020604051808303818588803b158015610a8557600080fd5b505af1158015610a99573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610abe919061177e565b90503481101561060857816001600160a01b03166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b0357600080fd5b505af1158015610b17573d6000803e3d6000fd5b503392506108fc9150610b2c90508334611a5b565b6040518115909202916000818181858888f19350505050158015610b54573d6000803e3d6000fd5b50505050505050565b604051600090610bb89073b27308f9f90d607463bb33ea1bebb41c27ce5ab690632f80bb1d90610bb990879085907f00000000000000000000000000000000000000000000000000000000000000009082908a906020016118fa565b604051602081830303815290604052876040518363ffffffff1660e01b8152600401610be69291906119a0565b602060405180830381600087803b158015610c0057600080fd5b505af1158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c38919061177e565b95945050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156103d557600080fd5b6000816001600160a01b031663e06174e46040518163ffffffff1660e01b815260040160206040518083038186803b158015610cd857600080fd5b505afa158015610cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d10919061177e565b6004166004149050919050565b60006305f5e10082610d2d610379565b610d379190611a3c565b6107929190611a1a565b6000866001600160a01b0316635001f3b56040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7c57600080fd5b505afa158015610d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db49190611439565b9050610dc3868587848b6110ea565b5060405163349b2e2960e11b81526001600160a01b038816906369365c5290610df890849033908b908990899060040161194c565b602060405180830381600087803b158015610e1257600080fd5b505af1158015610e26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610978919061177e565b6040516323b872dd60e01b81523360048201526001600160a01b038581166024830152604482018590528616906323b872dd90606401602060405180830381600087803b158015610e9a57600080fd5b505af1158015610eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed29190611743565b5060405163349b2e2960e11b81526001600160a01b038516906369365c52906105b6908890339088908890889060040161194c565b60006001600160a01b03821615801590610f255750610f2582610c9d565b15610f9f5761076883836001600160a01b0316635001f3b56040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6757600080fd5b505afa158015610f7b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b09190611439565b73b27308f9f90d607463bb33ea1bebb41c27ce5ab66001600160a01b03166330d07f217f0000000000000000000000000000000000000000000000000000000000000000846001600160a01b0316635001f3b56040518163ffffffff1660e01b815260040160206040518083038186803b15801561101c57600080fd5b505afa158015611030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110549190611439565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152610bb86044820152606481018690526000608482015260a401602060405180830381600087803b1580156110b257600080fd5b505af11580156110c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610768919061177e565b6040516323b872dd60e01b81523360048201523060248201526044810185905260009073e592427a0aece92de3edee1f18e0157c05861564906001600160a01b038616906323b872dd90606401602060405180830381600087803b15801561115157600080fd5b505af1158015611165573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111899190611743565b506040805160a08101909152610bb890600090806111ce88857f0000000000000000000000000000000000000000000000000000000000000000818d60c087016118fa565b6040516020818303038152906040528152602001866001600160a01b031681526020014281526020018a8152602001898152509050826001600160a01b031663f28c0498826040518263ffffffff1660e01b815260040161122f91906119c2565b602060405180830381600087803b15801561124957600080fd5b505af115801561125d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611281919061177e565b935087841015611325576001600160a01b03871663a9059cbb336112a5878c611a5b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156112eb57600080fd5b505af11580156112ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113239190611743565b505b50505095945050505050565b60006001600160a01b03821673b4272071ecadd69d933adcd19ca99fe80664fc08141561136057506001919050565b506000919050565b60008083601f84011261137a57600080fd5b50813567ffffffffffffffff81111561139257600080fd5b6020830191508360208260051b85010111156113ad57600080fd5b9250929050565b60008083601f8401126113c657600080fd5b50813567ffffffffffffffff8111156113de57600080fd5b6020830191508360208285010111156113ad57600080fd5b805169ffffffffffffffffffff8116811461141057600080fd5b919050565b60006020828403121561142757600080fd5b813561143281611ab9565b9392505050565b60006020828403121561144b57600080fd5b815161143281611ab9565b60008060006060848603121561146b57600080fd5b833561147681611ab9565b9250602084013561148681611ab9565b929592945050506040919091013590565b6000806000806000608086880312156114af57600080fd5b85356114ba81611ab9565b945060208601356114ca81611ab9565b935060408601359250606086013567ffffffffffffffff8111156114ed57600080fd5b6114f9888289016113b4565b969995985093965092949392505050565b60008060008060006060868803121561152257600080fd5b853561152d81611ab9565b9450602086013567ffffffffffffffff8082111561154a57600080fd5b61155689838a01611368565b9096509450604088013591508082111561156f57600080fd5b506114f988828901611368565b60008060008060008060006080888a03121561159757600080fd5b87356115a281611ab9565b9650602088013567ffffffffffffffff808211156115bf57600080fd5b6115cb8b838c01611368565b909850965060408a01359150808211156115e457600080fd5b6115f08b838c01611368565b909650945060608a013591508082111561160957600080fd5b506116168a828b016113b4565b989b979a50959850939692959293505050565b60008060006060848603121561163e57600080fd5b833561164981611ab9565b925060208401359150604084013561166081611ab9565b809150509250925092565b60008060008060008060a0878903121561168457600080fd5b863561168f81611ab9565b95506020870135945060408701356116a681611ab9565b935060608701359250608087013567ffffffffffffffff8111156116c957600080fd5b6116d589828a016113b4565b979a9699509497509295939492505050565b600080600080606085870312156116fd57600080fd5b843561170881611ab9565b935060208501359250604085013567ffffffffffffffff81111561172b57600080fd5b611737878288016113b4565b95989497509550505050565b60006020828403121561175557600080fd5b8151801515811461143257600080fd5b60006020828403121561177757600080fd5b5035919050565b60006020828403121561179057600080fd5b5051919050565b600080604083850312156117aa57600080fd5b8235915060208301356117bc81611ab9565b809150509250929050565b6000806000606084860312156117dc57600080fd5b8335925060208401356117ee81611ab9565b9150604084013561166081611ab9565b600080600080600060a0868803121561181657600080fd5b8535945060208601359350604086013561182f81611ab9565b9250606086013561183f81611ab9565b9150608086013561184f81611ab9565b809150509295509295909350565b600080600080600060a0868803121561187557600080fd5b61187e866113f6565b94506020860151935060408601519250606086015191506118a1608087016113f6565b90509295509295909350565b6000815180845260005b818110156118d3576020818501810151868301820152016118b7565b818111156118e5576000602083870101525b50601f01601f19169290920160200192915050565b6bffffffffffffffffffffffff19606096871b811682526001600160e81b031960e896871b8116601484015294871b811660178301529290941b909216602b840152921b909116602e82015260420190565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6040815260006119b360408301856118ad565b90508260208301529392505050565b602081526000825160a060208401526119de60c08401826118ad565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b600082611a3757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611a5657611a56611a8d565b500290565b600082821015611a6d57611a6d611a8d565b500390565b6000600019821415611a8657611a86611a8d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114611ace57600080fd5b5056fea2646970667358221220d2a7ac06d99bd39bcc79f2bc23182a8a76f52d3f3367a7f6954b46bee955d41564736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061010c5760003560e01c80636fb0c7dc11610095578063c8978fdb11610064578063c8978fdb146102d9578063d2c7c608146102f9578063d3b3ca7714610319578063e25b37c614610339578063f26e78991461035957600080fd5b80636fb0c7dc14610261578063930808fb1461027457806395fe863c14610294578063c1d8e08a146102a957600080fd5b80631945b784116100dc5780631945b784146101955780631c9af2e3146101b55780631ec82cb8146101d55780633fc8cef3146101f5578063568f32541461024157600080fd5b8062124e3d14610118578063040c037a1461014057806311e8701c1461015557806317f565d21461017557600080fd5b3661011357005b600080fd5b34801561012457600080fd5b5061012d610379565b6040519081526020015b60405180910390f35b61015361014e3660046116e7565b610418565b005b34801561016157600080fd5b50610153610170366004611415565b610611565b34801561018157600080fd5b506101536101903660046116e7565b6106ac565b3480156101a157600080fd5b5061012d6101b0366004611797565b61072f565b3480156101c157600080fd5b506101536101d036600461150a565b610798565b3480156101e157600080fd5b506101536101f0366004611456565b61088e565b34801561020157600080fd5b506102297f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610137565b34801561024d57600080fd5b5061015361025c36600461157c565b610910565b61015361026f366004611629565b610982565b34801561028057600080fd5b5061012d61028f3660046117c7565b610b5d565b3480156102a057600080fd5b5061012d610c41565b3480156102b557600080fd5b506102c96102c4366004611415565b610c9d565b6040519015158152602001610137565b3480156102e557600080fd5b5061012d6102f4366004611765565b610d1d565b34801561030557600080fd5b5061015361031436600461166b565b610d41565b34801561032557600080fd5b50610153610334366004611497565b610e4a565b34801561034557600080fd5b5061012d610354366004611797565b610f07565b34801561036557600080fd5b5061012d6103743660046117fe565b6110ea565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156103d557600080fd5b505afa1580156103e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040d919061185d565b509195945050505050565b6000846001600160a01b0316635001f3b56040518163ffffffff1660e01b815260040160206040518083038186803b15801561045357600080fd5b505afa158015610467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048b9190611439565b905061049685610c9d565b156105775760006104a7858361072f565b9050856001600160a01b03166369365c528284338989896040518763ffffffff1660e01b81526004016104de95949392919061194c565b6020604051808303818588803b1580156104f757600080fd5b505af115801561050b573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610530919061177e565b503481101561057157336108fc6105478334611a5b565b6040518115909202916000818181858888f1935050505015801561056f573d6000803e3d6000fd5b505b5061060a565b610582858583610982565b60405163349b2e2960e11b81526001600160a01b038616906369365c52906105b6908490339089908990899060040161194c565b602060405180830381600087803b1580156105d057600080fd5b505af11580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610608919061177e565b505b5050505050565b60405163095ea7b360e01b815273e592427a0aece92de3edee1f18e0157c058615646004820152600160ff1b60248201526001600160a01b0382169063095ea7b390604401602060405180830381600087803b15801561067057600080fd5b505af1158015610684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a89190611743565b5050565b610729846001600160a01b0316635001f3b56040518163ffffffff1660e01b815260040160206040518083038186803b1580156106e857600080fd5b505afa1580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107209190611439565b85858585610e4a565b50505050565b600061073a82611331565b1561076f57610747610c41565b61075084610d1d565b61075e906305f5e100611a3c565b6107689190611a1a565b9050610792565b610777610c41565b610785846305f5e100611a3c565b61078f9190611a1a565b90505b92915050565b60005b8381101561060857856001600160a01b03166323b872dd338787858181106107c5576107c5611aa3565b90506020020160208101906107da9190611415565b8686868181106107ec576107ec611aa3565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401602060405180830381600087803b15801561084357600080fd5b505af1158015610857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087b9190611743565b508061088681611a72565b91505061079b565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b1580156108d857600080fd5b505af11580156108ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107299190611743565b60005b85811015610978576109668888888481811061093157610931611aa3565b90506020020160208101906109469190611415565b87878581811061095857610958611aa3565b905060200201358686610e4a565b8061097081611a72565b915050610913565b5050505050505050565b60408051610100810182526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116825283811660208301908152610bb883850190815287831660608501908152426080860190815260a086018981523460c08801818152600060e08a018181529a51631b67c43360e31b81528a518a166004820152975189166024890152955162ffffff166044880152935187166064870152915160848601525160a4850152905160c4840152945190921660e4820152919273e592427a0aece92de3edee1f18e0157c0586156492839163db3e219891610104016020604051808303818588803b158015610a8557600080fd5b505af1158015610a99573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610abe919061177e565b90503481101561060857816001600160a01b03166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b0357600080fd5b505af1158015610b17573d6000803e3d6000fd5b503392506108fc9150610b2c90508334611a5b565b6040518115909202916000818181858888f19350505050158015610b54573d6000803e3d6000fd5b50505050505050565b604051600090610bb89073b27308f9f90d607463bb33ea1bebb41c27ce5ab690632f80bb1d90610bb990879085907f00000000000000000000000000000000000000000000000000000000000000009082908a906020016118fa565b604051602081830303815290604052876040518363ffffffff1660e01b8152600401610be69291906119a0565b602060405180830381600087803b158015610c0057600080fd5b505af1158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c38919061177e565b95945050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156103d557600080fd5b6000816001600160a01b031663e06174e46040518163ffffffff1660e01b815260040160206040518083038186803b158015610cd857600080fd5b505afa158015610cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d10919061177e565b6004166004149050919050565b60006305f5e10082610d2d610379565b610d379190611a3c565b6107929190611a1a565b6000866001600160a01b0316635001f3b56040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7c57600080fd5b505afa158015610d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db49190611439565b9050610dc3868587848b6110ea565b5060405163349b2e2960e11b81526001600160a01b038816906369365c5290610df890849033908b908990899060040161194c565b602060405180830381600087803b158015610e1257600080fd5b505af1158015610e26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610978919061177e565b6040516323b872dd60e01b81523360048201526001600160a01b038581166024830152604482018590528616906323b872dd90606401602060405180830381600087803b158015610e9a57600080fd5b505af1158015610eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed29190611743565b5060405163349b2e2960e11b81526001600160a01b038516906369365c52906105b6908890339088908890889060040161194c565b60006001600160a01b03821615801590610f255750610f2582610c9d565b15610f9f5761076883836001600160a01b0316635001f3b56040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6757600080fd5b505afa158015610f7b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b09190611439565b73b27308f9f90d607463bb33ea1bebb41c27ce5ab66001600160a01b03166330d07f217f0000000000000000000000000000000000000000000000000000000000000000846001600160a01b0316635001f3b56040518163ffffffff1660e01b815260040160206040518083038186803b15801561101c57600080fd5b505afa158015611030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110549190611439565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152610bb86044820152606481018690526000608482015260a401602060405180830381600087803b1580156110b257600080fd5b505af11580156110c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610768919061177e565b6040516323b872dd60e01b81523360048201523060248201526044810185905260009073e592427a0aece92de3edee1f18e0157c05861564906001600160a01b038616906323b872dd90606401602060405180830381600087803b15801561115157600080fd5b505af1158015611165573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111899190611743565b506040805160a08101909152610bb890600090806111ce88857f0000000000000000000000000000000000000000000000000000000000000000818d60c087016118fa565b6040516020818303038152906040528152602001866001600160a01b031681526020014281526020018a8152602001898152509050826001600160a01b031663f28c0498826040518263ffffffff1660e01b815260040161122f91906119c2565b602060405180830381600087803b15801561124957600080fd5b505af115801561125d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611281919061177e565b935087841015611325576001600160a01b03871663a9059cbb336112a5878c611a5b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156112eb57600080fd5b505af11580156112ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113239190611743565b505b50505095945050505050565b60006001600160a01b03821673b4272071ecadd69d933adcd19ca99fe80664fc08141561136057506001919050565b506000919050565b60008083601f84011261137a57600080fd5b50813567ffffffffffffffff81111561139257600080fd5b6020830191508360208260051b85010111156113ad57600080fd5b9250929050565b60008083601f8401126113c657600080fd5b50813567ffffffffffffffff8111156113de57600080fd5b6020830191508360208285010111156113ad57600080fd5b805169ffffffffffffffffffff8116811461141057600080fd5b919050565b60006020828403121561142757600080fd5b813561143281611ab9565b9392505050565b60006020828403121561144b57600080fd5b815161143281611ab9565b60008060006060848603121561146b57600080fd5b833561147681611ab9565b9250602084013561148681611ab9565b929592945050506040919091013590565b6000806000806000608086880312156114af57600080fd5b85356114ba81611ab9565b945060208601356114ca81611ab9565b935060408601359250606086013567ffffffffffffffff8111156114ed57600080fd5b6114f9888289016113b4565b969995985093965092949392505050565b60008060008060006060868803121561152257600080fd5b853561152d81611ab9565b9450602086013567ffffffffffffffff8082111561154a57600080fd5b61155689838a01611368565b9096509450604088013591508082111561156f57600080fd5b506114f988828901611368565b60008060008060008060006080888a03121561159757600080fd5b87356115a281611ab9565b9650602088013567ffffffffffffffff808211156115bf57600080fd5b6115cb8b838c01611368565b909850965060408a01359150808211156115e457600080fd5b6115f08b838c01611368565b909650945060608a013591508082111561160957600080fd5b506116168a828b016113b4565b989b979a50959850939692959293505050565b60008060006060848603121561163e57600080fd5b833561164981611ab9565b925060208401359150604084013561166081611ab9565b809150509250925092565b60008060008060008060a0878903121561168457600080fd5b863561168f81611ab9565b95506020870135945060408701356116a681611ab9565b935060608701359250608087013567ffffffffffffffff8111156116c957600080fd5b6116d589828a016113b4565b979a9699509497509295939492505050565b600080600080606085870312156116fd57600080fd5b843561170881611ab9565b935060208501359250604085013567ffffffffffffffff81111561172b57600080fd5b611737878288016113b4565b95989497509550505050565b60006020828403121561175557600080fd5b8151801515811461143257600080fd5b60006020828403121561177757600080fd5b5035919050565b60006020828403121561179057600080fd5b5051919050565b600080604083850312156117aa57600080fd5b8235915060208301356117bc81611ab9565b809150509250929050565b6000806000606084860312156117dc57600080fd5b8335925060208401356117ee81611ab9565b9150604084013561166081611ab9565b600080600080600060a0868803121561181657600080fd5b8535945060208601359350604086013561182f81611ab9565b9250606086013561183f81611ab9565b9150608086013561184f81611ab9565b809150509295509295909350565b600080600080600060a0868803121561187557600080fd5b61187e866113f6565b94506020860151935060408601519250606086015191506118a1608087016113f6565b90509295509295909350565b6000815180845260005b818110156118d3576020818501810151868301820152016118b7565b818111156118e5576000602083870101525b50601f01601f19169290920160200192915050565b6bffffffffffffffffffffffff19606096871b811682526001600160e81b031960e896871b8116601484015294871b811660178301529290941b909216602b840152921b909116602e82015260420190565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6040815260006119b360408301856118ad565b90508260208301529392505050565b602081526000825160a060208401526119de60c08401826118ad565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b600082611a3757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611a5657611a56611a8d565b500290565b600082821015611a6d57611a6d611a8d565b500390565b6000600019821415611a8657611a86611a8d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114611ace57600080fd5b5056fea2646970667358221220d2a7ac06d99bd39bcc79f2bc23182a8a76f52d3f3367a7f6954b46bee955d41564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveERC20(address)": {
        "details": "This function needs to be called before using the PaymentHub the first time with a new ERC20 token.",
        "params": {
          "erc20In": "The erc20 addresse to approve."
        }
      },
      "payFromERC20(uint256,uint256,address,address,address)": {
        "details": "The calling address must approve this contract to spend its ERC20 for this function to succeed. As the amount of input ERC20 is variable, the calling address will need to approve for a slightly higher or infinit amount, anticipating some variance.",
        "params": {
          "amountInMaximum": "The maximum amount of ERC20 willing to be swapped for the specified amountOut of baseCurrency.",
          "amountOut": "The desired amount of baseCurrency.",
          "erc20In": "The address of the erc20 token to pay with",
          "recipient": "The reciving address - brokerbot"
        },
        "returns": {
          "amountIn": "The amountIn of ERC20 actually spent to receive the desired amountOut."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveERC20(address)": {
        "notice": "This function appoves infinit allowance for Uniswap, this is safe as the paymenthub should never hold any token (see also recove() )."
      },
      "getLatestPriceCHFUSD()": {
        "notice": "Returns the latest price of chf/usd pair from chainlink with 8 decimals"
      },
      "getLatestPriceETHUSD()": {
        "notice": "Returns the latest price of eth/usd pair from chainlink with 8 decimals"
      },
      "getPriceInEther(uint256,address)": {
        "notice": "Get price in Ether depding on brokerbot setting. If keep ETH is set price is from oracle. This is the method that the Brokerbot widget should use to quote the price to the user."
      },
      "getPriceInEtherFromOracle(uint256,address)": {
        "notice": "Price in ETH with 18 decimals"
      },
      "getPriceInUSD(uint256)": {
        "notice": "Price in USD with 18 decimals"
      },
      "hasSettingKeepEther(address)": {
        "notice": "Checks if the recipient(brokerbot) has setting enabled to keep ether"
      },
      "multiPayAndNotify(address,address[],uint256[],bytes)": {
        "notice": "Can (at least in theory) save some gas as the sender balance only is touched in one transaction."
      },
      "payFromEther(address,uint256,address)": {
        "notice": "Convenience method to swap ether into base and pay a target address"
      },
      "recover(address,address,uint256)": {
        "notice": "In case tokens have been accidentally sent directly to this contract. Make sure to be fast as anyone can call this!"
      }
    },
    "notice": "A hub for payments. This allows tokens that do not support ERC 677 to enjoy similar functionality, namely interacting with a token-handling smart contract in one transaction, without having to set an allowance first. Instead, an allowance needs to be set only once, namely for this contract. Further, it supports automatic conversion from Ether to the payment currency through Uniswap or the reception of Ether using the current exchange rate as found in the chainlink oracle.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}