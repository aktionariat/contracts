{
  "address": "0x27A02627F4D683594984984f0fD2dE9Aa3C8B2f5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_base",
          "type": "address"
        },
        {
          "internalType": "contract IDraggable",
          "name": "_predecessor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20BalanceOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Ownable_NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "NameChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "number",
          "type": "uint8"
        }
      ],
      "name": "hasFlag",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initiateMigration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "additionalVotes",
          "type": "uint256"
        }
      ],
      "name": "initiateMigrationWithExternalApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "setPredecessorOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x414f8f6a046886b9c2f573be77c4a6016fbb1f216c222b0a638419d5eb06b59a",
  "receipt": {
    "to": null,
    "from": "0x39E5351E6CE3c4B19B8b0a2F5C82c511782457BE",
    "contractAddress": "0x27A02627F4D683594984984f0fD2dE9Aa3C8B2f5",
    "transactionIndex": 68,
    "gasUsed": "1357429",
    "logsBloom": "0x
    "blockHash": "0x54cf10a95081d6bb988526de62701898875c07ddfc253132044542fd89158aa8",
    "transactionHash": "0x414f8f6a046886b9c2f573be77c4a6016fbb1f216c222b0a638419d5eb06b59a",
    "logs": [
      {
        "transactionIndex": 68,
        "blockNumber": 17592074,
        "transactionHash": "0x414f8f6a046886b9c2f573be77c4a6016fbb1f216c222b0a638419d5eb06b59a",
        "address": "0x27A02627F4D683594984984f0fD2dE9Aa3C8B2f5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000039e5351e6ce3c4b19b8b0a2f5c82c511782457be"
        ],
        "data": "0x",
        "logIndex": 140,
        "blockHash": "0x54cf10a95081d6bb988526de62701898875c07ddfc253132044542fd89158aa8"
      },
      {
        "transactionIndex": 68,
        "blockNumber": 17592074,
        "transactionHash": "0x414f8f6a046886b9c2f573be77c4a6016fbb1f216c222b0a638419d5eb06b59a",
        "address": "0x27A02627F4D683594984984f0fD2dE9Aa3C8B2f5",
        "topics": [
          "0x6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000d496e76616c69642053686172650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034f4c440000000000000000000000000000000000000000000000000000000000",
        "logIndex": 141,
        "blockHash": "0x54cf10a95081d6bb988526de62701898875c07ddfc253132044542fd89158aa8"
      }
    ],
    "blockNumber": 17592074,
    "cumulativeGasUsed": "6248382",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x39E5351E6CE3c4B19B8b0a2F5C82c511782457BE",
    "0x5a90E48b81Edf50813192E5F5Da0ED934Bf94c93",
    "0x453e384862245FAf4E021894d78BA8f6E51B8c19",
    "OLD",
    "Invalid Share"
  ],
  "numDeployments": 1,
  "solcInputHash": "8bee6fd352402dc83842d91bb55d0bb6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"contract IDraggable\",\"name\":\"_predecessor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20BalanceOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Ownable_NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"number\",\"type\":\"uint8\"}],\"name\":\"hasFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"additionalVotes\",\"type\":\"uint256\"}],\"name\":\"initiateMigrationWithExternalApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setPredecessorOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"only one of the migration function should be needed.  \",\"errors\":{\"ERC20BalanceOverflow(address,uint256,uint256)\":[{\"params\":{\"amount\":\"The amount added, which result in the overflow. \",\"balance\":\"The current balance of the receiver. \",\"receiver\":\"The address were the balance overflows. \"}}]},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See `IERC20.allowance`.\"},\"approve(address,uint256)\":{\"details\":\"See `IERC20.approve`. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See `IERC20.balanceOf`.\"},\"totalSupply()\":{\"details\":\"See `IERC20.totalSupply`.\"},\"transfer(address,uint256)\":{\"details\":\"See `IERC20.transfer`. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See `IERC20.transferFrom`. Emits an `Approval` event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of `ERC20`; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `value`. - the caller must have allowance for `sender`'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ERC20BalanceOverflow(address,uint256,uint256)\":[{\"notice\":\"Overflow on minting, transfer. \"}]},\"kind\":\"user\",\"methods\":{\"initiateMigration()\":{\"notice\":\"This contract needs to hold the majority of the predecessor tokens.\"},\"initiateMigrationWithExternalApproval(uint256)\":{\"notice\":\"This contract needs to hold the majority of the predecessor tokens and the this contract needs to be the oracle of the predecessor. \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/shares/InvalidContract.sol\":\"InvalidContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/ERC20/ERC20Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/// @title Standard ERC20 Errors\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n///  https://eips.ethereum.org/EIPS/eip-6093\\ninterface ERC20Errors {\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n    error ERC20InvalidSender(address sender);\\n    error ERC20InvalidReceiver(address receiver);\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n    error ERC20InvalidApprover(address approver);\\n    error ERC20InvalidSpender(address spender);\\n}\",\"keccak256\":\"0x16e67c149b323aa08a12378b1697305e12dd48a9997549d56f140e26317e6c14\",\"license\":\"MIT\"},\"src/ERC20/ERC20Flaggable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied and adjusted from OpenZeppelin\\n// Adjustments:\\n// - modifications to support ERC-677\\n// - removed unnecessary require statements\\n// - removed GSN Context\\n// - upgraded to 0.8 to drop SafeMath\\n// - let name() and symbol() be implemented by subclass\\n// - infinite allowance support, with 2^255 and above considered infinite\\n// - use upper 32 bits of balance for flags\\n// - add a global settings variable\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./ERC20Errors.sol\\\";\\nimport \\\"./IERC677Receiver.sol\\\";\\n/**\\n * @dev Implementation of the `IERC20` interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using `_mint`.\\n * For a generic mechanism see `ERC20Mintable`.\\n *\\n * *For a detailed writeup see our guide [How to implement supply\\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See `IERC20.approve`.\\n */\\n\\nabstract contract ERC20Flaggable is IERC20, ERC20Errors {\\n\\n    // as Documented in /doc/infiniteallowance.md\\n    // 0x8000000000000000000000000000000000000000000000000000000000000000\\n    uint256 constant private INFINITE_ALLOWANCE = 2**255;\\n\\n    uint256 private constant FLAGGING_MASK = 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000;\\n\\n    // Documentation of flags used by subclasses:\\n    // NOTE: flags denote the bit number that is being used and must be smaller than 32\\n    // ERC20Draggable: uint8 private constant FLAG_INDEX_VOTED = 1;\\n    // ERC20Recoverable: uint8 private constant FLAG_INDEX_CLAIM_PRESENT = 10;\\n    // ERCAllowlistable: uint8 private constant FLAG_INDEX_ALLOWLIST = 20;\\n    // ERCAllowlistable: uint8 private constant FLAG_INDEX_FORBIDDEN = 21;\\n    // ERCAllowlistable: uint8 private constant FLAG_INDEX_POWERLIST = 22;\\n\\n    mapping (address => uint256) private _balances; // upper 32 bits reserved for flags\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    uint8 public override decimals;\\n\\n    event NameChanged(string name, string symbol);\\n\\n    /// Overflow on minting, transfer. \\n    /// @param receiver The address were the balance overflows. \\n    /// @param balance The current balance of the receiver. \\n    /// @param amount The amount added, which result in the overflow. \\n    error ERC20BalanceOverflow(address receiver, uint256 balance, uint256 amount);\\n\\n    constructor(uint8 _decimals) {\\n        decimals = _decimals;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.totalSupply`.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.balanceOf`.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return uint224 (_balances [account]);\\n    }\\n\\n    function hasFlag(address account, uint8 number) external view returns (bool) {\\n        return hasFlagInternal(account, number);\\n    }\\n\\n    function setFlag(address account, uint8 index, bool value) internal {\\n        uint256 flagMask = 1 << (index + 224);\\n        uint256 balance = _balances [account];\\n        if ((balance & flagMask == flagMask) != value) {\\n            _balances [account] = balance ^ flagMask;\\n        }\\n    }\\n\\n    function hasFlagInternal(address account, uint8 number) internal view returns (bool) {\\n        uint256 flag = 0x1 << (number + 224);\\n        return _balances[account] & flag == flag;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transfer`.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.allowance`.\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.approve`.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transferFrom`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of `ERC20`;\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `value`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        if (currentAllowance < INFINITE_ALLOWANCE){\\n            // Only decrease the allowance if it was not set to 'infinite'\\n            // Documented in /doc/infiniteallowance.md\\n            _allowances[sender][msg.sender] = currentAllowance - amount;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to `transfer`, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a `Transfer` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(sender, recipient, amount);\\n        decreaseBalance(sender, amount);\\n        increaseBalance(recipient, amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    // ERC-677 functionality, can be useful for swapping and wrapping tokens\\n    function transferAndCall(address recipient, uint amount, bytes calldata data) external virtual returns (bool) {\\n        return transfer (recipient, amount) \\n            && IERC677Receiver (recipient).onTokenTransfer (msg.sender, amount, data);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a `Transfer` event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address recipient, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(address(0), recipient, amount);\\n        _totalSupply += amount;\\n        increaseBalance(recipient, amount);\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n    function increaseBalance(address recipient, uint256 amount) private {\\n        if (recipient == address(0x0)) {\\n            revert ERC20InvalidReceiver(recipient); //use burn instead\\n        }\\n        uint256 oldBalance = _balances[recipient];\\n        uint256 newBalance = oldBalance + amount;\\n        if (oldBalance & FLAGGING_MASK != newBalance & FLAGGING_MASK) {\\n            revert ERC20BalanceOverflow(recipient, oldBalance, amount);\\n        }\\n        _balances[recipient] = newBalance;\\n    }\\n\\n     /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a `Transfer` event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _totalSupply -= amount;\\n        decreaseBalance(account, amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function decreaseBalance(address sender, uint256 amount) private {\\n        uint256 oldBalance = _balances[sender];\\n        uint256 newBalance = oldBalance - amount;\\n        if (oldBalance & FLAGGING_MASK != newBalance & FLAGGING_MASK) {\\n            revert ERC20InsufficientBalance(sender, balanceOf(sender), amount);\\n        }\\n        _balances[sender] = newBalance;\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an `Approval` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n     // solhint-disable-next-line no-empty-blocks\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) virtual internal {\\n        // intentionally left blank\\n    }\\n\\n    /**\\n     * Checks if msg.sender is an authorized address.\\n     * @param validSender The authorized address.\\n     */\\n    function _checkSender(address validSender) internal view {\\n        if (msg.sender != validSender) {\\n            revert ERC20InvalidSender(msg.sender);\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x1f2bf961486a8c13696587a209c6409fe8affc2c957badf306becdea34aaaf57\",\"license\":\"MIT\"},\"src/ERC20/ERC20Named.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20Flaggable.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\n\\ncontract ERC20Named is ERC20Flaggable, Ownable {\\n\\n    string public override name;\\n    string public override symbol;\\n\\n    constructor(string memory _symbol, string memory _name, uint8 _decimals, address _admin) ERC20Flaggable(_decimals) Ownable(_admin) {\\n        setNameInternal(_symbol, _name);\\n    }\\n\\n    function setName(string memory _symbol, string memory _name) external onlyOwner {\\n        setNameInternal(_symbol, _name);\\n    }\\n\\n    function setNameInternal(string memory _symbol, string memory _name) internal {\\n        symbol = _symbol;\\n        name = _name;\\n        emit NameChanged(_name, _symbol);\\n    }\\n\\n}\",\"keccak256\":\"0x33e4e786ce3701f1d9c61efa564af612c5ac9f8818159a3ec7f4209006859239\",\"license\":\"MIT\"},\"src/ERC20/ERC20PermitLight.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol\\n// and modified it.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20Flaggable.sol\\\";\\nimport \\\"./IERC20Permit.sol\\\";\\nabstract contract ERC20PermitLight is ERC20Flaggable, IERC20Permit {\\n\\n   /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => uint256) public override nonces;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public override {\\n        if (deadline < block.timestamp) {\\n            revert Permit_DeadlineExpired(deadline, block.timestamp);\\n        }\\n\\n        unchecked { // unchecked to save a little gas with the nonce increment...\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"),\\n                                bytes32(0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            if (recoveredAddress == address(0) || recoveredAddress != owner) {\\n                revert Permit_InvalidSigner(recoveredAddress);\\n            }\\n            _approve(recoveredAddress, spender, value);\\n        }\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    //keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\n                    bytes32(0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n}\",\"keccak256\":\"0x408c5d31d84153fc963bb08cd1f10df1b2c1acc186497f348492c5a60b330ff0\",\"license\":\"MIT\"},\"src/ERC20/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0x2224189bcdeb28cbadfdb8d126c278df60ec39875c7929e7ffa9e2055cded960\",\"license\":\"MIT\"},\"src/ERC20/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit is IERC20 {\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n\\t//////////////////////////////////////////////////////////////*/\\n    /// Block timestamp must to be before deadline.\\n    /// @param deadline The deadline of the permit.\\n    /// @param blockTimestamp The timestamp of the execution block.\\n    error Permit_DeadlineExpired(uint256 deadline, uint256 blockTimestamp);\\n    /// Recovered address must be owner and not zero address.\\n    /// @param signerAddress The recovered signer address.\\n    error Permit_InvalidSigner(address signerAddress);\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\",\"keccak256\":\"0x9c6c4c49deffc8176f13b34150dd580526b45dd85ce1b71fe2ed340ff0489ebd\",\"license\":\"MIT\"},\"src/ERC20/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Given that development on ERC 677 has stalled, we should consider supporting EIP 1363: https://eips.ethereum.org/EIPS/eip-1363\\ninterface IERC677Receiver {\\n\\n    error IERC677_OnTokenTransferFailed();\\n    \\n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\\n\\n}\",\"keccak256\":\"0xcca2937791e78a77e83f586e21a84fcc46fa910062f929145bf4159ef3f9d73c\",\"license\":\"MIT\"},\"src/draggable/ERC20Draggable.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: LicenseRef-Aktionariat\\n *\\n * MIT License with Automated License Fee Payments\\n *\\n * Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n *\\n * Permission is hereby granted to any person obtaining a copy of this software\\n * and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n * without restriction, including without limitation the rights to use, copy,\\n * modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n * Software, and to permit persons to whom the Software is furnished to do so,\\n * subject to the following conditions:\\n *\\n * - The above copyright notice and this permission notice shall be included in\\n *   all copies or substantial portions of the Software.\\n * - All automated license fee payments integrated into this and related Software\\n *   are preserved.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC-20 tokens subject to a drag-along agreement\\n * @author Luzius Meisser, luzius@aktionariat.com\\n *\\n * This is an ERC-20 token that is bound to a shareholder or other agreement that contains\\n * a drag-along clause. The smart contract can help enforce this drag-along clause in case\\n * an acquirer makes an offer using the provided functionality. If a large enough quorum of\\n * token holders agree, the remaining token holders can be automatically \\\"dragged along\\\" or\\n * squeezed out. For shares non-tokenized shares, the contract relies on an external Oracle\\n * to provide the votes of those.\\n *\\n * Subclasses should provide a link to a human-readable form of the agreement.\\n */\\n\\nimport \\\"./IDraggable.sol\\\";\\nimport \\\"../ERC20/ERC20Flaggable.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../ERC20/IERC677Receiver.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\nimport \\\"./IOfferFactory.sol\\\";\\nimport \\\"../shares/IShares.sol\\\";\\n\\nabstract contract ERC20Draggable is IERC677Receiver, IDraggable, ERC20Flaggable {\\n    \\n\\t// If flag is not present, one can be sure that the address did not vote. If the \\n\\t// flag is present, the address might have voted and one needs to check with the\\n\\t// current offer (if any) when transferring tokens.\\n\\tuint8 private constant FLAG_VOTE_HINT = 1;\\n\\n\\tIERC20 public override wrapped; // The wrapped contract\\n\\tIOfferFactory public immutable factory;\\n\\n\\t// If the wrapped tokens got replaced in an acquisition, unwrapping might yield many currency tokens\\n\\tuint256 public unwrapConversionFactor = 0;\\n\\n\\t// The current acquisition attempt, if any. See initiateAcquisition to see the requirements to make a public offer.\\n\\tIOffer public override offer;\\n\\n\\tuint256 private constant QUORUM_MULTIPLIER = 10000;\\n\\n\\tuint256 public immutable quorumMigration; // used for contract migartion, in BPS (out of 10'000)\\n\\tuint256 public immutable quorum; // used for drag-along at acquisition offers, in BPS (out of 10'000)\\n\\tuint256 public immutable votePeriod; // In seconds\\n\\n\\taddress public override oracle;\\n\\n\\tevent MigrationSucceeded(address newContractAddress, uint256 yesVotes, uint256 oracleVotes, uint256 totalVotingPower);\\n\\tevent ChangeOracle(address oracle);\\n\\n    /**\\n\\t * Note that the Brokerbot only supports tokens that revert on failure and where transfer never returns false.\\n     */\\n\\tconstructor(\\n\\t\\tIERC20 _wrappedToken,\\n\\t\\tuint256 _quorum,\\n\\t\\tuint256 _quorumMigration,\\n\\t\\tuint256 _votePeriod,\\n\\t\\tIOfferFactory _offerFactory,\\n\\t\\taddress _oracle\\n\\t) \\n\\t\\tERC20Flaggable(0)\\n\\t{\\n\\t\\twrapped = _wrappedToken;\\n\\t\\tquorum = _quorum;\\n\\t\\tquorumMigration = _quorumMigration;\\n\\t\\tvotePeriod = _votePeriod;\\n\\t\\tfactory = _offerFactory;\\n\\t\\toracle = _oracle;\\n\\t}\\n\\n\\tmodifier onlyOracle {\\n\\t\\t_checkSender(oracle);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyWrappedToken {\\n\\t\\t_checkSender(address(wrapped));\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyOffer(){\\n\\t\\t_checkSender(address(offer));\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier checkBinding(bool expected) {\\n\\t\\tif (expected && !isBinding()) {\\n\\t\\t\\trevert Draggable_NotBinding();\\n\\t\\t} else if (!expected && isBinding()) {\\n\\t\\t\\trevert Draggable_IsBinding();\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction onTokenTransfer(\\n\\t\\taddress from, \\n\\t\\tuint256 amount, \\n\\t\\tbytes calldata\\n\\t) external override onlyWrappedToken returns (bool) {\\n\\t\\t_mint(from, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/** Wraps additional tokens, thereby creating more ERC20Draggable tokens. */\\n\\tfunction wrap(address shareholder, uint256 amount) external {\\n\\t\\tif (!wrapped.transferFrom(msg.sender, address(this), amount)) {\\n\\t\\t\\trevert Draggable_TransferFailed();\\n\\t\\t}\\n\\t\\t_mint(shareholder, amount);\\n\\t}\\n\\n\\t/**\\n\\t * Indicates that the token holders are bound to the token terms and that:\\n\\t * - Conversion back to the wrapped token (unwrap) is not allowed\\n\\t * - A drag-along can be performed by making an according offer\\n\\t * - They can be migrated to a new version of this contract in accordance with the terms\\n\\t */\\n\\tfunction isBinding() public view returns (bool) {\\n\\t\\treturn unwrapConversionFactor == 0;\\n\\t}\\n\\n    /**\\n\\t * Current recommended naming convention is to add the postfix \\\"SHA\\\" to the plain shares\\n\\t * in order to indicate that this token represents shares bound to a shareholder agreement.\\n\\t */\\n\\tfunction name() public view override returns (string memory) {\\n\\t\\tstring memory wrappedName = wrapped.name();\\n\\t\\tif (isBinding()) {\\n\\t\\t\\treturn string(abi.encodePacked(wrappedName, \\\" SHA\\\"));\\n\\t\\t} else {\\n\\t\\t\\treturn string(abi.encodePacked(wrappedName, \\\" (Wrapped)\\\"));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction symbol() public view override returns (string memory) {\\n\\t\\t// ticker should be less dynamic than name\\n\\t\\treturn string(abi.encodePacked(wrapped.symbol(), \\\"S\\\"));\\n\\t}\\n\\n\\t/**\\n\\t * Deactivates the drag-along mechanism and enables the unwrap function.\\n\\t */\\n\\tfunction _deactivate(uint256 factor) internal {\\n\\t\\tif (factor == 0) {\\n\\t\\t\\trevert Draggable_FactorZero();\\n\\t\\t}\\n\\t\\tunwrapConversionFactor = factor;\\n\\t}\\n\\n\\t/** Decrease the number of drag-along tokens. The user gets back their shares in return */\\n\\tfunction unwrap(uint256 amount) external override checkBinding(false) {\\n\\t\\t_unwrap(msg.sender, amount, unwrapConversionFactor);\\n\\t}\\n\\n\\tfunction _unwrap(address owner, uint256 amount, uint256 factor) internal {\\n\\t\\t_burn(owner, amount);\\n\\t\\tif (!wrapped.transfer(owner, amount * factor)) {\\n\\t\\t\\trevert Draggable_TransferFailed();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Burns both the token itself as well as the wrapped token!\\n\\t * If you want to get out of the shareholder agreement, use unwrap after it has been\\n\\t * deactivated by a majority vote or acquisition.\\n\\t *\\n\\t * Burning only works if wrapped token supports burning. Also, the exact meaning of this\\n\\t * operation might depend on the circumstances. Burning and reussing the wrapped token\\n\\t * does not free the sender from the legal obligations of the shareholder agreement.\\n\\t */\\n\\tfunction burn(uint256 amount) external {\\n\\t\\t_burn(msg.sender, amount);\\n\\t\\tIShares(address(wrapped)).burn (isBinding() ? amount : amount * unwrapConversionFactor);\\n\\t}\\n\\n\\tfunction makeAcquisitionOffer(\\n\\t\\tbytes32 salt, \\n\\t\\tuint256 pricePerShare, \\n\\t\\tIERC20 currency\\n\\t) external payable checkBinding(true) {\\n\\t\\tIOffer newOffer = factory.create{value: msg.value}(\\n\\t\\t\\tsalt, msg.sender, pricePerShare, currency, quorum, votePeriod);\\n\\n\\t\\tif (offerExists()) {\\n\\t\\t\\toffer.makeCompetingOffer(newOffer);\\n\\t\\t}\\n\\t\\toffer = newOffer;\\n\\t}\\n\\n\\tfunction drag(address buyer, IERC20 currency) external override onlyOffer {\\n\\t\\t_unwrap(buyer, balanceOf(buyer), 1);\\n\\t\\t_replaceWrapped(currency, buyer);\\n\\t}\\n\\n\\tfunction notifyOfferEnded() external override onlyOffer {\\n\\t\\toffer = IOffer(address(0));\\n\\t}\\n\\n\\tfunction _replaceWrapped(IERC20 newWrapped, address oldWrappedDestination) internal checkBinding(true) {\\n\\t\\t// Free all old wrapped tokens we have\\n\\t\\tif (!wrapped.transfer(oldWrappedDestination, wrapped.balanceOf(address(this)))) {\\n\\t\\t\\trevert Draggable_TransferFailed();\\n\\t\\t}\\n\\t\\t// Count the new wrapped tokens\\n\\t\\twrapped = newWrapped;\\n\\t\\tif (totalSupply() > 0) // if there are no tokens, no need to deactivate\\n\\t\\t\\t_deactivate(newWrapped.balanceOf(address(this)) / totalSupply());\\n\\t\\temit NameChanged(name(), symbol());\\n\\t}\\n\\n\\tfunction setOracle(address newOracle) external override onlyOracle {\\n\\t\\toracle = newOracle;\\n\\t\\temit ChangeOracle(oracle);\\n\\t}\\n\\n\\tfunction migrateWithExternalApproval(address successor, uint256 additionalVotes) external override onlyOracle {\\n\\t\\t// Additional votes cannot be higher than the votes not represented by these tokens.\\n\\t\\t// The assumption here is that more shareholders are bound to the shareholder agreement\\n\\t\\t// that this contract helps enforce and a vote among all parties is necessary to change\\n\\t\\t// it, with an oracle counting and reporting the votes of the others.\\n\\t\\tif (totalSupply() + additionalVotes > totalVotingTokens()) {\\n\\t\\t\\trevert Draggable_TooManyVotes(totalVotingTokens(), totalSupply() + additionalVotes);\\n\\t\\t}\\n\\t\\tmigrate(successor, additionalVotes);\\n\\t}\\n\\n\\tfunction migrate() external override {\\n\\t\\tmigrate(msg.sender, 0);\\n\\t}\\n\\n\\tfunction migrate(address successor, uint256 additionalVotes) internal {\\n\\t\\tuint256 yesVotes = additionalVotes + balanceOf(successor);\\n\\t\\tuint256 totalVotes = totalVotingTokens();\\n\\t\\tif (yesVotes > totalVotes) {\\n\\t\\t\\trevert Draggable_TooManyVotes(totalVotes, yesVotes);\\n\\t\\t}\\n\\t\\tif (offerExists()) {\\n\\t\\t\\t// if you have the quorum, you can cancel the offer first if necessary\\n\\t\\t\\trevert Draggable_OpenOffer();\\n\\t\\t}\\n\\t\\tif (yesVotes * QUORUM_MULTIPLIER < totalVotes * quorum) {\\n\\t\\t\\trevert Draggable_QuorumNotReached(totalVotes * quorum, yesVotes * QUORUM_MULTIPLIER);\\n\\t\\t}\\n\\t\\t_replaceWrapped(IERC20(successor), successor);\\n\\t\\temit MigrationSucceeded(successor, yesVotes, additionalVotes, totalVotes);\\n\\t}\\n\\n\\tfunction votingPower(address voter) external view override returns (uint256) {\\n\\t\\treturn balanceOf(voter);\\n\\t}\\n\\n\\tfunction totalVotingTokens() public view override returns (uint256) {\\n\\t\\treturn IShares(address(wrapped)).totalShares();\\n\\t}\\n\\n\\tfunction hasVoted(address voter) internal view returns (bool) {\\n\\t\\treturn hasFlagInternal(voter, FLAG_VOTE_HINT);\\n\\t}\\n\\n\\tfunction notifyVoted(address voter) external override onlyOffer {\\n\\t\\tsetFlag(voter, FLAG_VOTE_HINT, true);\\n\\t}\\n\\n\\tfunction _beforeTokenTransfer(address from, address to,\\tuint256 amount) internal virtual override {\\n\\t\\tif (hasVoted(from) || hasVoted(to)) {\\n\\t\\t\\tif (offerExists()) {\\n\\t\\t\\t\\toffer.notifyMoved(from, to, amount);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tsetFlag(from, FLAG_VOTE_HINT, false);\\n\\t\\t\\t\\tsetFlag(to, FLAG_VOTE_HINT, false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tsuper._beforeTokenTransfer(from, to, amount);\\n\\t}\\n\\n\\tfunction offerExists() internal view returns (bool) {\\n\\t\\treturn address(offer) != address(0);\\n\\t}\\n}\\n\",\"keccak256\":\"0x2e977f524c75540407e718c793b6bf5776ae51052259377654d795ea755e661e\",\"license\":\"LicenseRef-Aktionariat\"},\"src/draggable/IDraggable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\ninterface IDraggable is IERC20 {\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n    //////////////////////////////////////////////////////////////*/\\n    /// conversion factor has to be > 0 for this transaction.\\n    error Draggable_NotBinding();\\n    /// conversion factor has to be = 0 for this transaction.\\n    error Draggable_IsBinding();\\n    /// conversion factor can't be 0 if binding gets deactivated.\\n    error Draggable_FactorZero();\\n    /// erc20 transfer didn't succeded.\\n    error Draggable_TransferFailed();\\n    /// the reported votes can't be > max voting tokens.\\n    /// @param maxVotes The max voting tokens.\\n    /// @param reportedVotes The actual reported votes.\\n    error Draggable_TooManyVotes(uint256 maxVotes, uint256 reportedVotes);\\n    /// there is still an open offer that has to be canceled first\\n    error Draggable_OpenOffer();\\n    /// For migration the quorum needs to be reached.\\n    /// @param needed The needed quorum.\\n    /// @param actual The current yes votes.\\n    error Draggable_QuorumNotReached(uint256 needed, uint256 actual);\\n    \\n    function wrapped() external view returns (IERC20);\\n    function unwrap(uint256 amount) external;\\n    function offer() external view returns (IOffer);\\n    function oracle() external view returns (address);\\n    function drag(address buyer, IERC20 currency) external;\\n    function notifyOfferEnded() external;\\n    function votingPower(address voter) external returns (uint256);\\n    function totalVotingTokens() external view returns (uint256);\\n    function notifyVoted(address voter) external;\\n    function migrate() external;\\n    function setOracle(address newOracle) external;\\n    function migrateWithExternalApproval(address successor, uint256 additionalVotes) external;\\n\\n}\\n\",\"keccak256\":\"0x0f4eb6ca32d50bc928304cfb247f96777e0ec2c610d276737513bff6addd4164\",\"license\":\"MIT\"},\"src/draggable/IOffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ninterface IOffer {\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n  //////////////////////////////////////////////////////////////*/\\n\\t/// Invalid msg.sender.\\n\\t/// @param sender The msg.sender of the transaction.\\n\\terror Offer_InvalidSender(address sender);\\n\\t/// Offer needs to be still open.\\n\\terror Offer_AlreadyAccepted();\\n\\t/// Offer needs to be not accepted yet.\\n\\terror Offer_NotAccepted();\\n\\t/// Sender of the offer needs to have needed funds in his account.\\n\\terror Offer_NotWellFunded();\\n\\t/// New offer not valid. `newPrice` needs to be higher than `oldPrice`.\\n\\t/// @param oldPrice Price of the old offer.\\n\\t/// @param newPrice Price of the new offer.\\n\\terror Offer_OldOfferBetter(uint256 oldPrice, uint256 newPrice);\\n\\t/// Voting needs to be still open.\\n\\terror Offer_VotingEnded();\\n\\t/// Too many (External) reported votes. `reportedVotes` needs to be less or equal to `maxVotes`.\\n\\t/// @param maxVotes The max possible votes for the token.\\n\\t/// @param reportedVotes The external reported votes + circulating supply of the token.\\n\\terror Offer_TooManyVotes(uint256 maxVotes, uint256 reportedVotes);\\n\\t/// Failguard when a erc20 transfer returns false. \\n\\terror Offer_TransferFailed();\\n\\t/// Competing offer needs to be in the same currency.\\n\\terror Offer_OfferInWrongCurrency();\\n\\n\\tfunction makeCompetingOffer(IOffer newOffer) external;\\n\\n\\t// if there is a token transfer while an offer is open, the votes get transfered too\\n\\tfunction notifyMoved(address from, address to, uint256 value) external;\\n\\n\\tfunction currency() external view returns (IERC20);\\n\\n\\tfunction price() external view returns (uint256);\\n\\n\\tfunction isWellFunded() external view returns (bool);\\n\\n\\tfunction voteYes() external;\\n\\n\\tfunction voteNo() external;\\n}\",\"keccak256\":\"0x6f8839a8ba1bdf3f6dcd6016464da658c8401c4ded9afd9842698ff49eb554e3\",\"license\":\"MIT\"},\"src/draggable/IOfferFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\n\\ninterface IOfferFactory {\\n\\n\\tfunction create(\\n\\t\\tbytes32 salt, address buyer, uint256 pricePerShare,\\tIERC20 currency,\\tuint256 quorum,\\tuint256 votePeriod\\n\\t) external payable returns (IOffer);\\n}\",\"keccak256\":\"0x048511f24b8e4278df38ee6f5fb038d53a7964cc90761780fb1ebb2e7825a532\",\"license\":\"MIT\"},\"src/recovery/ERC20Recoverable.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/ERC20Flaggable.sol\\\";\\nimport \\\"./IRecoveryHub.sol\\\";\\nimport \\\"./IRecoverable.sol\\\";\\n\\n/**\\n * @title Recoverable\\n * In case of tokens that represent real-world assets such as shares of a company, one needs a way\\n * to handle lost private keys. With physical certificates, courts can declare share certificates as\\n * invalid so the company can issue replacements. Here, we want a solution that does not depend on\\n * third parties to resolve such cases. Instead, when someone has lost a private key, he can use the\\n * declareLost function on the recovery hub to post a deposit and claim that the shares assigned to a\\n * specific address are lost.\\n * If an attacker trying to claim shares belonging to someone else, they risk losing the deposit\\n * as it can be claimed at anytime by the rightful owner.\\n * Furthermore, if \\\"getClaimDeleter\\\" is defined in the subclass, the returned address is allowed to\\n * delete claims, returning the collateral. This can help to prevent obvious cases of abuse of the claim\\n * function, e.g. cases of front-running.\\n * Most functionality is implemented in a shared RecoveryHub.\\n */\\nabstract contract ERC20Recoverable is ERC20Flaggable, IRecoverable {\\n\\n    uint8 private constant FLAG_CLAIM_PRESENT = 10;\\n\\n    // ERC-20 token that can be used as collateral or 0x0 if disabled\\n    IERC20 public customCollateralAddress;\\n    // Rate the custom collateral currency is multiplied to be valued like one share.\\n    uint256 public customCollateralRate;\\n\\n    uint256 constant CLAIM_PERIOD = 180 days;\\n\\n    IRecoveryHub public override immutable recovery;\\n\\n    constructor(IRecoveryHub recoveryHub){\\n        recovery = recoveryHub;\\n    }\\n\\n    modifier onlyRecovery {\\n        _checkSender(address(recovery));\\n        _;\\n    }\\n\\n    /**\\n     * Returns the collateral rate for the given collateral type and 0 if that type\\n     * of collateral is not accepted. By default, only the token itself is accepted at\\n     * a rate of 1:1.\\n     *\\n     * Subclasses should override this method if they want to add additional types of\\n     * collateral.\\n     */\\n    function getCollateralRate(IERC20 collateralType) public override virtual view returns (uint256) {\\n        if (address(collateralType) == address(this)) {\\n            return 1;\\n        } else if (collateralType == customCollateralAddress) {\\n            return customCollateralRate;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function claimPeriod() external pure override returns (uint256){\\n        return CLAIM_PERIOD;\\n    }\\n\\n    /**\\n     * Allows subclasses to set a custom collateral besides the token itself.\\n     * The collateral must be an ERC-20 token that returns true on successful transfers and\\n     * throws an exception or returns false on failure.\\n     * Also, do not forget to multiply the rate in accordance with the number of decimals of the collateral.\\n     * For example, rate should be 7*10**18 for 7 units of a collateral with 18 decimals.\\n     */\\n    function _setCustomClaimCollateral(IERC20 collateral, uint256 rate) internal {\\n        customCollateralAddress = collateral;\\n        if (address(customCollateralAddress) == address(0)) {\\n            customCollateralRate = 0; // disabled\\n        } else {\\n            if (rate == 0) {\\n                revert Recoverable_RateZero();\\n            }\\n            customCollateralRate = rate;\\n        }\\n    }\\n\\n    function getClaimDeleter() virtual public view returns (address);\\n\\n    function transfer(address recipient, uint256 amount) override(ERC20Flaggable, IERC20) virtual public returns (bool) {\\n        if (!super.transfer(recipient, amount)) {\\n            revert Recoverable_TransferFailed();\\n        }\\n        if (hasFlagInternal(msg.sender, FLAG_CLAIM_PRESENT)){\\n            recovery.clearClaimFromToken(msg.sender);\\n        }\\n        return true;\\n    }\\n\\n    function notifyClaimMade(address target) external override onlyRecovery {\\n        setFlag(target, FLAG_CLAIM_PRESENT, true);\\n    }\\n\\n    function notifyClaimDeleted(address target) external override onlyRecovery {\\n        setFlag(target, FLAG_CLAIM_PRESENT, false);\\n    }\\n\\n    function deleteClaim(address lostAddress) external {\\n        _checkSender(getClaimDeleter());\\n        recovery.deleteClaim(lostAddress);\\n    }\\n\\n    function recover(address oldAddress, address newAddress) external override onlyRecovery {\\n        _transfer(oldAddress, newAddress, balanceOf(oldAddress));\\n    }\\n\\n}\",\"keccak256\":\"0x4865a4ee0673e0957310bf5648d602521b579015b8c85571d9633e09e8bdfee5\",\"license\":\"LicenseRef-Aktionariat\"},\"src/recovery/IRecoverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IRecoveryHub.sol\\\";\\n\\ninterface IRecoverable is IERC20{\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n    //////////////////////////////////////////////////////////////*/\\n    /// The new customm claim collateral rate has to be always > 0. \\n    error Recoverable_RateZero();\\n    /// Failguard when an erc20 transfer returns false. \\n    error Recoverable_TransferFailed();\\n\\n    // returns the recovery hub\\n    function recovery() external view returns (IRecoveryHub);\\n\\n    function claimPeriod() external view returns (uint256);\\n    \\n    function notifyClaimMade(address target) external;\\n\\n    function notifyClaimDeleted(address target) external;\\n\\n    function getCollateralRate(IERC20 collateral) external view returns(uint256);\\n\\n    function recover(address oldAddress, address newAddress) external;\\n\\n}\",\"keccak256\":\"0xe03c49171d221700b822cead63d09887263fc5a88af4fb8a03af0365fd4a6255\",\"license\":\"MIT\"},\"src/recovery/IRecoveryHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IRecoverable.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ninterface IRecoveryHub {\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n    //////////////////////////////////////////////////////////////*/\\n    /// Failguard when an erc20 transfer returns false. \\n    error RecoveryHub_TransferFailed();\\n    /// Recovery can be disabled per address.\\n    /// @param lostAddress The address for which the recovery is disabled.\\n    error RecoveryHub_RecoveryDisabled(address lostAddress);\\n    /// No valid collateral type\\n    /// @param collateralType The address of collateral type token\\n    error RecoveryHub_BadCollateral(IERC20 collateralType);\\n    /// No token to able to recover on the lost address\\n    /// @param token The token address which is checked for recovery.\\n    /// @param lostAddress The lost address.\\n    error RecoveryHub_NothingToRecover(IERC20 token, address lostAddress);\\n    /// The was arleady a claim for this token and address.\\n    /// @param token The token address.\\n    /// @param lostAddress The lost address.\\n    error RecoveryHub_AlreadyClaimed(IERC20 token, address lostAddress);\\n    /// Sender has to be claimant\\n    /// @param sender The msg.sender of the call\\n    error RecoveryHub_InvalidSender(address sender);\\n    /// No claim for this address exists\\n    /// @param lostAddress The checked address \\n    error RecoveryHub_ClaimNotFound(address lostAddress);\\n    /// Recover can only be called after the claim period\\n    /// @param claimPeriodEnd The timestamp when the period ends\\n    /// @param currentTimestamp The block timestamp of the call\\n    error RecoveryHub_InClaimPeriod(uint256 claimPeriodEnd, uint256 currentTimestamp);\\n\\n    function setRecoverable(bool flag) external;\\n    \\n    // deletes claim and transfers collateral back to claimer\\n    function deleteClaim(address target) external;\\n\\n    // clears claim and transfers collateral to holder\\n    function clearClaimFromToken(address holder) external;\\n\\n    function clearClaimFromUser(IRecoverable token) external;\\n\\n}\",\"keccak256\":\"0xc555f4747598d6cf5f471cb2c6550db27cec6467822309ff9ed27e7ed4d3a150\",\"license\":\"MIT\"},\"src/shares/DraggableShares.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../recovery/ERC20Recoverable.sol\\\";\\nimport \\\"../draggable/ERC20Draggable.sol\\\";\\nimport \\\"../ERC20/ERC20PermitLight.sol\\\";\\n\\n/**\\n * @title CompanyName AG Shares SHA\\n * @author Luzius Meisser, luzius@aktionariat.com\\n *\\n * This is an ERC-20 token representing share tokens of CompanyName AG that are bound to\\n * a shareholder agreement that can be found at the URL defined in the constant 'terms'.\\n */\\ncontract DraggableShares is ERC20Draggable, ERC20Recoverable, ERC20PermitLight {\\n\\n    string public terms;\\n\\n    constructor(\\n        string memory _terms,\\n        IERC20 _wrappedToken,\\n        uint256 _quorumBps,\\n        uint256 _quorumMigration,\\n        uint256 _votePeriodSeconds,\\n        IRecoveryHub _recoveryHub,\\n        IOfferFactory _offerFactory,\\n        address _oracle\\n    )\\n        ERC20Draggable(_wrappedToken, _quorumBps, _quorumMigration, _votePeriodSeconds, _offerFactory, _oracle)\\n        ERC20Recoverable(_recoveryHub)\\n        ERC20PermitLight() \\n    {\\n        terms = _terms; // to update the terms, migrate to a new contract. That way it is ensured that the terms can only be updated when the quorom agrees.\\n        _recoveryHub.setRecoverable(false);\\n    }\\n\\n    function transfer(address to, uint256 value) virtual override(IERC20, ERC20Flaggable, ERC20Recoverable) public returns (bool) {\\n        return super.transfer(to, value);\\n    }\\n\\n    /**\\n     * Let the oracle act as deleter of invalid claims. In earlier versions, this was referring to the claim deleter\\n     * of the wrapped token. But that stops working after a successful acquisition as the acquisition currency most\\n     * likely does not have a claim deleter.\\n     */\\n    function getClaimDeleter() public view override returns (address) {\\n        return oracle;\\n    }\\n\\n    function getCollateralRate(IERC20 collateralType) public view override returns (uint256) {\\n        uint256 rate = super.getCollateralRate(collateralType);\\n        if (rate > 0) {\\n            return rate;\\n        } else {\\n            // as long as it is binding, the conversion rate is 1:1\\n            uint256 factor = isBinding() ? 1 : unwrapConversionFactor;\\n            if (address(collateralType) == address(wrapped)) {\\n                // allow wrapped token as collateral\\n                return factor;\\n            } else {\\n                // If the wrapped contract allows for a specific collateral, we should too.\\n                // If the wrapped contract is not IRecoverable, we will fail here, but would fail anyway.\\n                return IRecoverable(address(wrapped)).getCollateralRate(collateralType) * factor;\\n            }\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) virtual override(ERC20Flaggable, ERC20Draggable) internal {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n}\",\"keccak256\":\"0x654086d2fd290511d88cc57f4f3aba9cd846f87f7da890c90d6d4abde0b28d02\",\"license\":\"LicenseRef-Aktionariat\"},\"src/shares/IShares.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IShares {\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n\\t//////////////////////////////////////////////////////////////*/\\n\\t/// New total shares can't be below current valid supply\\n\\t/// @param totalSupply  The current valid supply. \\n\\t/// @param newTotalShares  The new max shares. \\n\\terror Shares_InvalidTotalShares(uint256 totalSupply, uint256 newTotalShares);\\n\\t/// Array lengths have to be equal. \\n\\t/// @param targets Array length of targets. \\n\\t/// @param amount Array length of amounts. \\n\\terror Shares_UnequalLength(uint256 targets, uint256 amount);\\n\\t/// It isn't possible to mint more share token than max shares in existens. \\n\\t/// @param totalShares The max amount of shares. \\n\\t/// @param needed The max amount of shares needed (current valid supply + new mint amoun). \\n\\terror Shares_InsufficientTotalShares(uint256 totalShares, uint256 needed);\\n\\n\\tfunction burn(uint256) external;\\n\\n\\tfunction totalShares() external view returns (uint256);\\n}\",\"keccak256\":\"0x19226dc08fad807d69278bf9bae1229a81693f71393817635b97dd70b03c4e89\",\"license\":\"MIT\"},\"src/shares/InvalidContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DraggableShares.sol\\\";\\nimport \\\"./IShares.sol\\\";\\nimport \\\"../ERC20/ERC20Named.sol\\\";\\n/** \\n *  \\n * @dev only one of the migration function should be needed.  \\n */\\ncontract InvalidContract is ERC20Named {\\n  IDraggable immutable predecessor;\\n  IERC20 base;\\n\\n\\n  constructor(\\n    address _owner,\\n    IERC20 _base,\\n    IDraggable _predecessor,\\n    string memory _symbol,\\n    string memory _name\\n  )\\n    ERC20Named(_symbol, _name, 0, _owner) \\n  {\\n    predecessor = _predecessor;\\n    base = _base;\\n  }\\n\\n  function mint(address recipient, uint256 amount) external onlyOwner {\\n    _mint(recipient, amount);\\n  }\\n\\n\\n  function burn(uint256 amount) external {\\n    _burn(msg.sender, amount);\\n    IShares(address(base)).burn(amount);\\n  }\\n  \\n  /**\\n   * @notice This contract needs to hold the majority of the predecessor tokens.\\n   */\\n  function initiateMigration() external {\\n    uint256 predecessorSupply = predecessor.totalSupply();\\n    _mint(address(predecessor), predecessorSupply);\\n    base = predecessor.wrapped();\\n    predecessor.migrate();\\n    uint256 predecessorBalance = predecessor.balanceOf(address(this));\\n    predecessor.unwrap(predecessorBalance);\\n    _burn(address(this), predecessorBalance);\\n    assert(predecessorSupply == totalSupply());\\n  }\\n\\n  function setPredecessorOracle(address oracle) external onlyOwner {\\n    predecessor.setOracle(oracle);\\n  }\\n\\n  /**\\n   * @notice This contract needs to hold the majority of the predecessor tokens and the this contract needs to be the oracle of the predecessor.\\n   * \\n   */\\n  function initiateMigrationWithExternalApproval(uint256 additionalVotes) external onlyOwner {\\n    uint256 predecessorSupply = predecessor.totalSupply();\\n    _mint(address(predecessor), predecessorSupply);\\n    base = predecessor.wrapped();\\n    predecessor.migrateWithExternalApproval(address(this), additionalVotes);\\n    uint256 predecessorBalance = predecessor.balanceOf(address(this));\\n    if (predecessorBalance > 0) {\\n      predecessor.unwrap(predecessorBalance);\\n      _burn(address(this), predecessorBalance);\\n    }\\n    assert(predecessorSupply == totalSupply());\\n  }\\n}\",\"keccak256\":\"0x88016a414fb03dcf862fc986d3969918937839489b3a25ae84b7f353e3638c56\",\"license\":\"MIT\"},\"src/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n//\\n// Modifications:\\n// - Replaced Context._msgSender() with msg.sender\\n// - Made leaner\\n// - Extracted interface\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    error Ownable_NotOwner(address sender);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor (address initialOwner) {\\n        owner = initialOwner;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    function _checkOwner() internal view {\\n        if (msg.sender != owner) {\\n            revert Ownable_NotOwner(msg.sender);\\n        }\\n    }\\n}\",\"keccak256\":\"0x9057578671d192c7891a59854cf8bab2698450c5b271f21e0696036fb65cae3b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001a3b38038062001a3b833981016040819052620000349162000286565b600380546001600160a81b0319166101006001600160a01b0388811682029290921792839055604051859385936000938b938493919091049091169084907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350620000a48484620000e4565b505050505060609190911b6001600160601b03191660805250600680546001600160a01b0319166001600160a01b03929092169190911790555062000430565b8151620000f99060059060208501906200014f565b5080516200010f9060049060208401906200014f565b507f6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a8183604051620001439291906200035f565b60405180910390a15050565b8280546200015d90620003c4565b90600052602060002090601f016020900481019282620001815760008555620001cc565b82601f106200019c57805160ff1916838001178555620001cc565b82800160010185558215620001cc579182015b82811115620001cc578251825591602001919060010190620001af565b50620001da929150620001de565b5090565b5b80821115620001da5760008155600101620001df565b600082601f8301126200020757600080fd5b81516001600160401b038082111562000224576200022462000401565b604051601f8301601f19908116603f011681019082821181831017156200024f576200024f62000401565b816040528381528660208588010111156200026957600080fd5b6200027c84602083016020890162000391565b9695505050505050565b600080600080600060a086880312156200029f57600080fd5b8551620002ac8162000417565b6020870151909550620002bf8162000417565b6040870151909450620002d28162000417565b60608701519093506001600160401b0380821115620002f057600080fd5b620002fe89838a01620001f5565b935060808801519150808211156200031557600080fd5b506200032488828901620001f5565b9150509295509295909350565b600081518084526200034b81602086016020860162000391565b601f01601f19169290920160200192915050565b60408152600062000374604083018562000331565b828103602084015262000388818562000331565b95945050505050565b60005b83811015620003ae57818101518382015260200162000394565b83811115620003be576000848401525b50505050565b600181811c90821680620003d957607f821691505b60208210811415620003fb57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200042d57600080fd5b50565b60805160601c611598620004a3600039600081816103940152818161042a01528181610451015281816105180152818161058d0152818161062e01528181610861015281816108f70152818161091e015281816109d501528181610a5d01528181610af90152610c4c01526115986000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80635c707f07116100ad578063a9059cbb11610071578063a9059cbb1461025f578063dd62ed3e14610272578063f2fde38b146102ab578063f4a50ce0146102be578063f5c0b95f146102d157600080fd5b80635c707f07146101f95780635f4d49071461020c57806370a08231146102145780638da5cb5b1461022757806395d89b411461025757600080fd5b806323b872dd116100f457806323b872dd1461018e578063313ce567146101a15780634000aea0146101c057806340c10f19146101d357806342966c68146101e657600080fd5b806306fdde0314610126578063095ea7b31461014457806312655be31461016757806318160ddd1461017c575b600080fd5b61012e6102e4565b60405161013b9190611441565b60405180910390f35b6101576101523660046111ee565b610372565b604051901515815260200161013b565b61017a61017536600461137a565b610388565b005b6002545b60405190815260200161013b565b61015761019c3660046111ad565b6106b2565b6003546101ae9060ff1681565b60405160ff909116815260200161013b565b6101576101ce36600461121a565b610729565b61017a6101e13660046111ee565b6107c9565b61017a6101f436600461137a565b6107df565b61017a610207366004611316565b61084b565b61017a61085d565b610180610222366004611157565b610b78565b60035461023f9061010090046001600160a01b031681565b6040516001600160a01b03909116815260200161013b565b61012e610b9c565b61015761026d3660046111ee565b610ba9565b610180610280366004611174565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61017a6102b9366004611157565b610bb6565b61017a6102cc366004611157565b610c25565b6101576102df3660046112a3565b610c7b565b600480546102f1906114cd565b80601f016020809104026020016040519081016040528092919081815260200182805461031d906114cd565b801561036a5780601f1061033f5761010080835404028352916020019161036a565b820191906000526020600020905b81548152906001019060200180831161034d57829003601f168201915b505050505081565b600061037f338484610c8e565b50600192915050565b610390610cf0565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103eb57600080fd5b505afa1580156103ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104239190611393565b905061044f7f000000000000000000000000000000000000000000000000000000000000000082610d29565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350e70d486040518163ffffffff1660e01b815260040160206040518083038186803b1580156104a857600080fd5b505afa1580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e091906112f9565b600680546001600160a01b0319166001600160a01b0392831617905560405163066114d560e21b8152306004820152602481018490527f000000000000000000000000000000000000000000000000000000000000000090911690631984535490604401600060405180830381600087803b15801561055e57600080fd5b505af1158015610572573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b1580156105d857600080fd5b505afa1580156105ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106109190611393565b9050801561069c57604051636f074d1f60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063de0e9a3e90602401600060405180830381600087803b15801561067a57600080fd5b505af115801561068e573d6000803e3d6000fd5b5050505061069c3082610d91565b60025482146106ad576106ad611508565b505050565b60006106bf848484610df1565b6001600160a01b0384166000908152600160209081526040808320338452909152902054600160ff1b81101561071e576106f983826114b6565b6001600160a01b03861660009081526001602090815260408083203384529091529020555b506001949350505050565b60006107358585610ba9565b80156107c05750604051635260769b60e11b81526001600160a01b0386169063a4c0ed369061076e9033908890889088906004016113f9565b602060405180830381600087803b15801561078857600080fd5b505af115801561079c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c091906112d7565b95945050505050565b6107d1610cf0565b6107db8282610d29565b5050565b6107e93382610d91565b600654604051630852cd8d60e31b8152600481018390526001600160a01b03909116906342966c68906024015b600060405180830381600087803b15801561083057600080fd5b505af1158015610844573d6000803e3d6000fd5b5050505050565b610853610cf0565b6107db8282610e4a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108b857600080fd5b505afa1580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190611393565b905061091c7f000000000000000000000000000000000000000000000000000000000000000082610d29565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350e70d486040518163ffffffff1660e01b815260040160206040518083038186803b15801561097557600080fd5b505afa158015610989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ad91906112f9565b600660006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638fd3ab806040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b158015610aa857600080fd5b505afa158015610abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae09190611393565b604051636f074d1f60e11b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063de0e9a3e90602401600060405180830381600087803b158015610b4557600080fd5b505af1158015610b59573d6000803e3d6000fd5b50505050610b673082610d91565b60025482146107db576107db611508565b6001600160a01b03166000908152602081905260409020546001600160e01b031690565b600580546102f1906114cd565b600061037f338484610df1565b610bbe610cf0565b6003546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b610c2d610cf0565b604051637adbf97360e01b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690637adbf97390602401610816565b6000610c878383610eaf565b9392505050565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60035461010090046001600160a01b03163314610d27576040516396a19be960e01b81523360048201526024015b60405180910390fd5b565b8060026000828254610d3b9190611479565b90915550610d4b90508282610eef565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b8060026000828254610da391906114b6565b90915550610db390508282610fb5565b6040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610d85565b610dfb8382610fb5565b610e058282610eef565b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610ce391815260200190565b8151610e5d906005906020850190611031565b508051610e71906004906020840190611031565b507f6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a8183604051610ea3929190611454565b60405180910390a15050565b600080610ebd8360e0611491565b6001600160a01b038516600090815260208190526040902054600160ff929092169190911b9081161491505092915050565b6001600160a01b038216610f215760405163ec442f0560e01b81526001600160a01b0383166004820152602401610d1e565b6001600160a01b03821660009081526020819052604081205490610f458383611479565b90506001600160e01b031981166001600160e01b0319831614610f9457604051634a2e08e560e01b81526001600160a01b03851660048201526024810183905260448101849052606401610d1e565b6001600160a01b039093166000908152602081905260409020929092555050565b6001600160a01b03821660009081526020819052604081205490610fd983836114b6565b90506001600160e01b031981166001600160e01b0319831614610f94578361100085610b78565b60405163391434e360e21b81526001600160a01b039092166004830152602482015260448101849052606401610d1e565b82805461103d906114cd565b90600052602060002090601f01602090048101928261105f57600085556110a5565b82601f1061107857805160ff19168380011785556110a5565b828001600101855582156110a5579182015b828111156110a557825182559160200191906001019061108a565b506110b19291506110b5565b5090565b5b808211156110b157600081556001016110b6565b600082601f8301126110db57600080fd5b813567ffffffffffffffff808211156110f6576110f6611534565b604051601f8301601f19908116603f0116810190828211818310171561111e5761111e611534565b8160405283815286602085880101111561113757600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561116957600080fd5b8135610c878161154a565b6000806040838503121561118757600080fd5b82356111928161154a565b915060208301356111a28161154a565b809150509250929050565b6000806000606084860312156111c257600080fd5b83356111cd8161154a565b925060208401356111dd8161154a565b929592945050506040919091013590565b6000806040838503121561120157600080fd5b823561120c8161154a565b946020939093013593505050565b6000806000806060858703121561123057600080fd5b843561123b8161154a565b935060208501359250604085013567ffffffffffffffff8082111561125f57600080fd5b818701915087601f83011261127357600080fd5b81358181111561128257600080fd5b88602082850101111561129457600080fd5b95989497505060200194505050565b600080604083850312156112b657600080fd5b82356112c18161154a565b9150602083013560ff811681146111a257600080fd5b6000602082840312156112e957600080fd5b81518015158114610c8757600080fd5b60006020828403121561130b57600080fd5b8151610c878161154a565b6000806040838503121561132957600080fd5b823567ffffffffffffffff8082111561134157600080fd5b61134d868387016110ca565b9350602085013591508082111561136357600080fd5b50611370858286016110ca565b9150509250929050565b60006020828403121561138c57600080fd5b5035919050565b6000602082840312156113a557600080fd5b5051919050565b6000815180845260005b818110156113d2576020818501810151868301820152016113b6565b818111156113e4576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0385168152602081018490526060604082018190528101829052818360808301376000818301608090810191909152601f909201601f191601019392505050565b602081526000610c8760208301846113ac565b60408152600061146760408301856113ac565b82810360208401526107c081856113ac565b6000821982111561148c5761148c61151e565b500190565b600060ff821660ff84168060ff038211156114ae576114ae61151e565b019392505050565b6000828210156114c8576114c861151e565b500390565b600181811c908216806114e157607f821691505b6020821081141561150257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461155f57600080fd5b5056fea2646970667358221220bee6922d9a42f8d813a826c74dbb2eb224a12494c2eb1e248492958abd47ea4c64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80635c707f07116100ad578063a9059cbb11610071578063a9059cbb1461025f578063dd62ed3e14610272578063f2fde38b146102ab578063f4a50ce0146102be578063f5c0b95f146102d157600080fd5b80635c707f07146101f95780635f4d49071461020c57806370a08231146102145780638da5cb5b1461022757806395d89b411461025757600080fd5b806323b872dd116100f457806323b872dd1461018e578063313ce567146101a15780634000aea0146101c057806340c10f19146101d357806342966c68146101e657600080fd5b806306fdde0314610126578063095ea7b31461014457806312655be31461016757806318160ddd1461017c575b600080fd5b61012e6102e4565b60405161013b9190611441565b60405180910390f35b6101576101523660046111ee565b610372565b604051901515815260200161013b565b61017a61017536600461137a565b610388565b005b6002545b60405190815260200161013b565b61015761019c3660046111ad565b6106b2565b6003546101ae9060ff1681565b60405160ff909116815260200161013b565b6101576101ce36600461121a565b610729565b61017a6101e13660046111ee565b6107c9565b61017a6101f436600461137a565b6107df565b61017a610207366004611316565b61084b565b61017a61085d565b610180610222366004611157565b610b78565b60035461023f9061010090046001600160a01b031681565b6040516001600160a01b03909116815260200161013b565b61012e610b9c565b61015761026d3660046111ee565b610ba9565b610180610280366004611174565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61017a6102b9366004611157565b610bb6565b61017a6102cc366004611157565b610c25565b6101576102df3660046112a3565b610c7b565b600480546102f1906114cd565b80601f016020809104026020016040519081016040528092919081815260200182805461031d906114cd565b801561036a5780601f1061033f5761010080835404028352916020019161036a565b820191906000526020600020905b81548152906001019060200180831161034d57829003601f168201915b505050505081565b600061037f338484610c8e565b50600192915050565b610390610cf0565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103eb57600080fd5b505afa1580156103ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104239190611393565b905061044f7f000000000000000000000000000000000000000000000000000000000000000082610d29565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350e70d486040518163ffffffff1660e01b815260040160206040518083038186803b1580156104a857600080fd5b505afa1580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e091906112f9565b600680546001600160a01b0319166001600160a01b0392831617905560405163066114d560e21b8152306004820152602481018490527f000000000000000000000000000000000000000000000000000000000000000090911690631984535490604401600060405180830381600087803b15801561055e57600080fd5b505af1158015610572573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b1580156105d857600080fd5b505afa1580156105ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106109190611393565b9050801561069c57604051636f074d1f60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063de0e9a3e90602401600060405180830381600087803b15801561067a57600080fd5b505af115801561068e573d6000803e3d6000fd5b5050505061069c3082610d91565b60025482146106ad576106ad611508565b505050565b60006106bf848484610df1565b6001600160a01b0384166000908152600160209081526040808320338452909152902054600160ff1b81101561071e576106f983826114b6565b6001600160a01b03861660009081526001602090815260408083203384529091529020555b506001949350505050565b60006107358585610ba9565b80156107c05750604051635260769b60e11b81526001600160a01b0386169063a4c0ed369061076e9033908890889088906004016113f9565b602060405180830381600087803b15801561078857600080fd5b505af115801561079c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c091906112d7565b95945050505050565b6107d1610cf0565b6107db8282610d29565b5050565b6107e93382610d91565b600654604051630852cd8d60e31b8152600481018390526001600160a01b03909116906342966c68906024015b600060405180830381600087803b15801561083057600080fd5b505af1158015610844573d6000803e3d6000fd5b5050505050565b610853610cf0565b6107db8282610e4a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108b857600080fd5b505afa1580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190611393565b905061091c7f000000000000000000000000000000000000000000000000000000000000000082610d29565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350e70d486040518163ffffffff1660e01b815260040160206040518083038186803b15801561097557600080fd5b505afa158015610989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ad91906112f9565b600660006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638fd3ab806040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b158015610aa857600080fd5b505afa158015610abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae09190611393565b604051636f074d1f60e11b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063de0e9a3e90602401600060405180830381600087803b158015610b4557600080fd5b505af1158015610b59573d6000803e3d6000fd5b50505050610b673082610d91565b60025482146107db576107db611508565b6001600160a01b03166000908152602081905260409020546001600160e01b031690565b600580546102f1906114cd565b600061037f338484610df1565b610bbe610cf0565b6003546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b610c2d610cf0565b604051637adbf97360e01b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690637adbf97390602401610816565b6000610c878383610eaf565b9392505050565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60035461010090046001600160a01b03163314610d27576040516396a19be960e01b81523360048201526024015b60405180910390fd5b565b8060026000828254610d3b9190611479565b90915550610d4b90508282610eef565b6040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b8060026000828254610da391906114b6565b90915550610db390508282610fb5565b6040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610d85565b610dfb8382610fb5565b610e058282610eef565b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610ce391815260200190565b8151610e5d906005906020850190611031565b508051610e71906004906020840190611031565b507f6c20b91d1723b78732eba64ff11ebd7966a6e4af568a00fa4f6b72c20f58b02a8183604051610ea3929190611454565b60405180910390a15050565b600080610ebd8360e0611491565b6001600160a01b038516600090815260208190526040902054600160ff929092169190911b9081161491505092915050565b6001600160a01b038216610f215760405163ec442f0560e01b81526001600160a01b0383166004820152602401610d1e565b6001600160a01b03821660009081526020819052604081205490610f458383611479565b90506001600160e01b031981166001600160e01b0319831614610f9457604051634a2e08e560e01b81526001600160a01b03851660048201526024810183905260448101849052606401610d1e565b6001600160a01b039093166000908152602081905260409020929092555050565b6001600160a01b03821660009081526020819052604081205490610fd983836114b6565b90506001600160e01b031981166001600160e01b0319831614610f94578361100085610b78565b60405163391434e360e21b81526001600160a01b039092166004830152602482015260448101849052606401610d1e565b82805461103d906114cd565b90600052602060002090601f01602090048101928261105f57600085556110a5565b82601f1061107857805160ff19168380011785556110a5565b828001600101855582156110a5579182015b828111156110a557825182559160200191906001019061108a565b506110b19291506110b5565b5090565b5b808211156110b157600081556001016110b6565b600082601f8301126110db57600080fd5b813567ffffffffffffffff808211156110f6576110f6611534565b604051601f8301601f19908116603f0116810190828211818310171561111e5761111e611534565b8160405283815286602085880101111561113757600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561116957600080fd5b8135610c878161154a565b6000806040838503121561118757600080fd5b82356111928161154a565b915060208301356111a28161154a565b809150509250929050565b6000806000606084860312156111c257600080fd5b83356111cd8161154a565b925060208401356111dd8161154a565b929592945050506040919091013590565b6000806040838503121561120157600080fd5b823561120c8161154a565b946020939093013593505050565b6000806000806060858703121561123057600080fd5b843561123b8161154a565b935060208501359250604085013567ffffffffffffffff8082111561125f57600080fd5b818701915087601f83011261127357600080fd5b81358181111561128257600080fd5b88602082850101111561129457600080fd5b95989497505060200194505050565b600080604083850312156112b657600080fd5b82356112c18161154a565b9150602083013560ff811681146111a257600080fd5b6000602082840312156112e957600080fd5b81518015158114610c8757600080fd5b60006020828403121561130b57600080fd5b8151610c878161154a565b6000806040838503121561132957600080fd5b823567ffffffffffffffff8082111561134157600080fd5b61134d868387016110ca565b9350602085013591508082111561136357600080fd5b50611370858286016110ca565b9150509250929050565b60006020828403121561138c57600080fd5b5035919050565b6000602082840312156113a557600080fd5b5051919050565b6000815180845260005b818110156113d2576020818501810151868301820152016113b6565b818111156113e4576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0385168152602081018490526060604082018190528101829052818360808301376000818301608090810191909152601f909201601f191601019392505050565b602081526000610c8760208301846113ac565b60408152600061146760408301856113ac565b82810360208401526107c081856113ac565b6000821982111561148c5761148c61151e565b500190565b600060ff821660ff84168060ff038211156114ae576114ae61151e565b019392505050565b6000828210156114c8576114c861151e565b500390565b600181811c908216806114e157607f821691505b6020821081141561150257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461155f57600080fd5b5056fea2646970667358221220bee6922d9a42f8d813a826c74dbb2eb224a12494c2eb1e248492958abd47ea4c64736f6c63430008070033",
  "devdoc": {
    "details": "only one of the migration function should be needed.  ",
    "errors": {
      "ERC20BalanceOverflow(address,uint256,uint256)": [
        {
          "params": {
            "amount": "The amount added, which result in the overflow. ",
            "balance": "The current balance of the receiver. ",
            "receiver": "The address were the balance overflows. "
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See `IERC20.allowance`."
      },
      "approve(address,uint256)": {
        "details": "See `IERC20.approve`. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See `IERC20.balanceOf`."
      },
      "totalSupply()": {
        "details": "See `IERC20.totalSupply`."
      },
      "transfer(address,uint256)": {
        "details": "See `IERC20.transfer`. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See `IERC20.transferFrom`. Emits an `Approval` event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of `ERC20`; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `value`. - the caller must have allowance for `sender`'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20BalanceOverflow(address,uint256,uint256)": [
        {
          "notice": "Overflow on minting, transfer. "
        }
      ]
    },
    "kind": "user",
    "methods": {
      "initiateMigration()": {
        "notice": "This contract needs to hold the majority of the predecessor tokens."
      },
      "initiateMigrationWithExternalApproval(uint256)": {
        "notice": "This contract needs to hold the majority of the predecessor tokens and the this contract needs to be the oracle of the predecessor. "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 57,
        "contract": "src/shares/InvalidContract.sol:InvalidContract",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 63,
        "contract": "src/shares/InvalidContract.sol:InvalidContract",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 65,
        "contract": "src/shares/InvalidContract.sol:InvalidContract",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 68,
        "contract": "src/shares/InvalidContract.sol:InvalidContract",
        "label": "decimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 2739,
        "contract": "src/shares/InvalidContract.sol:InvalidContract",
        "label": "owner",
        "offset": 1,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 606,
        "contract": "src/shares/InvalidContract.sol:InvalidContract",
        "label": "name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 609,
        "contract": "src/shares/InvalidContract.sol:InvalidContract",
        "label": "symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 2516,
        "contract": "src/shares/InvalidContract.sol:InvalidContract",
        "label": "base",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20)886"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)886": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}