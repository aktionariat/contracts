{
  "address": "0xb4dC570b6Aa16d431771c0b01cB78029E0bE559e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Ownable_NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "brokerbot",
          "type": "address"
        }
      ],
      "name": "BrokerbotDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IBrokerbot",
          "name": "brokerbot",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "base",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BrokerbotRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IBrokerbot",
          "name": "brokerbot",
          "type": "address"
        }
      ],
      "name": "BrokerbotSync",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "brokerbot",
          "type": "address"
        }
      ],
      "name": "deactivateBrokerbot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllActiveBrokerbots",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "brokerbots",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllBrokerbots",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "brokerbots",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getBrokerbot",
      "outputs": [
        {
          "internalType": "contract IBrokerbot",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBrokerbot",
          "name": "_brokerbot",
          "type": "address"
        },
        {
          "internalType": "contract TokenRegistry",
          "name": "_tokenRegistry",
          "type": "address"
        }
      ],
      "name": "registerBrokerbot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBrokerbot",
          "name": "_brokerbot",
          "type": "address"
        }
      ],
      "name": "syncBrokerbot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x28272694b336dcc2beb709884a34d5a8f7188f1845a173f6db00015b2c86e946",
  "receipt": {
    "to": null,
    "from": "0x447ffD9a116efb3D77f47802cc4869C3730f723C",
    "contractAddress": "0xb4dC570b6Aa16d431771c0b01cB78029E0bE559e",
    "transactionIndex": 91,
    "gasUsed": "513379",
    "logsBloom": "0x
    "blockHash": "0x1d7e83ae3be8d23463720f757e32b6d23991dc40196d7574c0b030f6a02bb3c7",
    "transactionHash": "0x28272694b336dcc2beb709884a34d5a8f7188f1845a173f6db00015b2c86e946",
    "logs": [
      {
        "transactionIndex": 91,
        "blockNumber": 58116009,
        "transactionHash": "0x28272694b336dcc2beb709884a34d5a8f7188f1845a173f6db00015b2c86e946",
        "address": "0xb4dC570b6Aa16d431771c0b01cB78029E0bE559e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000447ffd9a116efb3d77f47802cc4869c3730f723c"
        ],
        "data": "0x",
        "logIndex": 220,
        "blockHash": "0x1d7e83ae3be8d23463720f757e32b6d23991dc40196d7574c0b030f6a02bb3c7"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 58116009,
        "transactionHash": "0x28272694b336dcc2beb709884a34d5a8f7188f1845a173f6db00015b2c86e946",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000447ffd9a116efb3d77f47802cc4869c3730f723c",
          "0x00000000000000000000000009385a960a2e0b6b4516d341534da92cb2a50085"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000036b776e3e784000000000000000000000000000000000000000000000000054118774e1829b0670000000000000000000000000000000000000000000000371d99d63e2d41e31b00000000000000000000000000000000000000000000000540e1bfd734422c670000000000000000000000000000000000000000000000371dd08db51129671b",
        "logIndex": 221,
        "blockHash": "0x1d7e83ae3be8d23463720f757e32b6d23991dc40196d7574c0b030f6a02bb3c7"
      }
    ],
    "blockNumber": 58116009,
    "cumulativeGasUsed": "5832710",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x447ffD9a116efb3D77f47802cc4869C3730f723C"
  ],
  "numDeployments": 2,
  "solcInputHash": "9075dcaa43b87f5f25553f1d48893652",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Ownable_NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"brokerbot\",\"type\":\"address\"}],\"name\":\"BrokerbotDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IBrokerbot\",\"name\":\"brokerbot\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"base\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BrokerbotRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IBrokerbot\",\"name\":\"brokerbot\",\"type\":\"address\"}],\"name\":\"BrokerbotSync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"brokerbot\",\"type\":\"address\"}],\"name\":\"deactivateBrokerbot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllActiveBrokerbots\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"brokerbots\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllBrokerbots\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"brokerbots\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getBrokerbot\",\"outputs\":[{\"internalType\":\"contract IBrokerbot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBrokerbot\",\"name\":\"_brokerbot\",\"type\":\"address\"},{\"internalType\":\"contract TokenRegistry\",\"name\":\"_tokenRegistry\",\"type\":\"address\"}],\"name\":\"registerBrokerbot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBrokerbot\",\"name\":\"_brokerbot\",\"type\":\"address\"}],\"name\":\"syncBrokerbot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"rube-de \",\"details\":\"This contract is used to register and manage brokerbots\",\"events\":{\"BrokerbotDeactivated(address)\":{\"params\":{\"brokerbot\":\"The deactivated brokerbot address\"}},\"BrokerbotRegistered(address,address,address)\":{\"params\":{\"base\":\"The address of the base currency\",\"brokerbot\":\"The address of the registered brokerbot\",\"token\":\"The address of the share token\"}},\"BrokerbotSync(address)\":{\"params\":{\"brokerbot\":\"The brokerbot address that is synced\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_owner\":\"The address of the owner\"}},\"deactivateBrokerbot(address)\":{\"params\":{\"brokerbot\":\"The address of the brokerbot to deactivate\"}},\"getAllActiveBrokerbots()\":{\"returns\":{\"brokerbots\":\"An array of active brokerbot addresses\"}},\"getAllBrokerbots()\":{\"returns\":{\"brokerbots\":\"An array of all registered brokerbot addresses\"}},\"registerBrokerbot(address,address)\":{\"details\":\"Per network, only one active brokerbot should exist per base/share token pair \",\"params\":{\"_brokerbot\":\"The brokerbot contract to be registered\",\"_tokenRegistry\":\"The token registry contract\"}},\"syncBrokerbot(address)\":{\"details\":\"This event is useful for indexers/subgraphs to update token balances which are not tracked with other events \",\"params\":{\"_brokerbot\":\"The brokerbot to sync\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"getBrokerbot\":{\"details\":\"mapping is [base][token] = brokerbotAddress \",\"return\":\"brokerbot The brokerbot address\",\"returns\":{\"_0\":\"brokerbot The brokerbot address\"}}},\"title\":\"Brokerbot Registry\",\"version\":1},\"userdoc\":{\"events\":{\"BrokerbotDeactivated(address)\":{\"notice\":\"Emitted when a brokerbot is deactivated \"},\"BrokerbotRegistered(address,address,address)\":{\"notice\":\"Emitted when a brokerbot is registered \"},\"BrokerbotSync(address)\":{\"notice\":\"Emitted when calling the syncBrokerbot function \"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor that sets the owner \"},\"deactivateBrokerbot(address)\":{\"notice\":\"Deactivates a brokerbot \"},\"getAllActiveBrokerbots()\":{\"notice\":\"Gets all active brokerbots \"},\"getAllBrokerbots()\":{\"notice\":\"Gets all registered brokerbots \"},\"getBrokerbot(address,address)\":{\"notice\":\"Returns the brokerbot address for a given base and share token pair, or address 0 if it does not exist \"},\"registerBrokerbot(address,address)\":{\"notice\":\"Registers a new brokerbot \"},\"syncBrokerbot(address)\":{\"notice\":\"Syncs a brokerbot \"}},\"notice\":\"Holds a registry of all deployed active brokerbots \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/brokerbot/BrokerbotRegistry.sol\":\"BrokerbotRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"src/ERC20/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0x2224189bcdeb28cbadfdb8d126c278df60ec39875c7929e7ffa9e2055cded960\",\"license\":\"MIT\"},\"src/ERC20/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit is IERC20 {\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n\\t//////////////////////////////////////////////////////////////*/\\n    /// Block timestamp must to be before deadline.\\n    /// @param deadline The deadline of the permit.\\n    /// @param blockTimestamp The timestamp of the execution block.\\n    error Permit_DeadlineExpired(uint256 deadline, uint256 blockTimestamp);\\n    /// Recovered address must be owner and not zero address.\\n    /// @param signerAddress The recovered signer address.\\n    error Permit_InvalidSigner(address signerAddress);\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\",\"keccak256\":\"0x9c6c4c49deffc8176f13b34150dd580526b45dd85ce1b71fe2ed340ff0489ebd\",\"license\":\"MIT\"},\"src/brokerbot/BrokerbotRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title Brokerbot Registry\\n * @author rube-de\\n * \\n * @notice Holds a registry of all deployed active brokerbots\\n * \\n * @dev This contract is used to register and manage brokerbots\\n */\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport {IBrokerbot} from \\\"./IBrokerbot.sol\\\";\\nimport {IERC20} from \\\"../ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\nimport {TokenRegistry} from \\\"./TokenRegistry.sol\\\";\\n\\n/**\\n * @title Brokerbot Registry\\n * @author rube-de\\n * \\n * @notice Holds a registry of all deployed active brokerbots\\n * \\n * @dev This contract is used to register and manage brokerbots\\n */\\ncontract BrokerbotRegistry is Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet private _brokerbotSet; // Set of all registered brokerbots\\n    EnumerableSet.AddressSet private _activeBrokerbotSet; // Set of active brokerbots\\n\\n    /**\\n     * @notice Returns the brokerbot address for a given base and share token pair, or address 0 if it does not exist\\n     * \\n     * @dev mapping is [base][token] = brokerbotAddress\\n     * \\n     * @return brokerbot The brokerbot address\\n     */\\n    mapping(IERC20 => mapping(IERC20 => IBrokerbot)) public getBrokerbot;\\n\\n    /**\\n     * @notice Emitted when a brokerbot is registered\\n     * \\n     * @param brokerbot The address of the registered brokerbot\\n     * @param base The address of the base currency\\n     * @param token The address of the share token\\n    */\\n    event BrokerbotRegistered(IBrokerbot brokerbot, IERC20 indexed base, IERC20 indexed token);\\n\\n    /**\\n     * @notice Emitted when calling the syncBrokerbot function\\n     * \\n     * @param brokerbot The brokerbot address that is synced\\n     */\\n     event BrokerbotSync(IBrokerbot indexed brokerbot);\\n\\n    /**\\n     * @notice Emitted when a brokerbot is deactivated\\n     * \\n     * @param brokerbot The deactivated brokerbot address\\n     */\\n    event BrokerbotDeactivated(address indexed brokerbot);\\n\\n    /**\\n     * @notice Constructor that sets the owner\\n     * \\n     * @param _owner The address of the owner\\n     */\\n    constructor(address _owner) Ownable(_owner) {}\\n\\n    /**\\n     * @notice Registers a new brokerbot\\n     * \\n     * @dev Per network, only one active brokerbot should exist per base/share token pair\\n     * \\n     * @param _brokerbot The brokerbot contract to be registered\\n     * @param _tokenRegistry The token registry contract\\n     */\\n    function registerBrokerbot(IBrokerbot _brokerbot, TokenRegistry _tokenRegistry) external onlyOwner() {\\n        bool isNew = _brokerbotSet.add(address(_brokerbot));\\n        if (isNew) {\\n            IERC20 token = _brokerbot.token();\\n            IERC20 base = _brokerbot.base();\\n            _activeBrokerbotSet.add(address(_brokerbot));\\n            getBrokerbot[base][token] = _brokerbot;\\n            _tokenRegistry.addShareToken(address(token));\\n            emit BrokerbotRegistered(_brokerbot, base, token);\\n        }\\n    }\\n\\n    /**\\n     * @notice Deactivates a brokerbot\\n     * \\n     * @param brokerbot The address of the brokerbot to deactivate\\n     */\\n    function deactivateBrokerbot(address brokerbot) external onlyOwner() {\\n        _activeBrokerbotSet.remove(brokerbot);\\n        emit BrokerbotDeactivated(brokerbot);\\n    }\\n\\n    /**\\n     * @notice Syncs a brokerbot\\n     * \\n     * @dev This event is useful for indexers/subgraphs to update token balances which are not tracked with other events\\n     * \\n     * @param _brokerbot The brokerbot to sync\\n     */\\n    function syncBrokerbot(IBrokerbot _brokerbot) external {\\n        emit BrokerbotSync(_brokerbot);\\n    }\\n\\n    /**\\n     * @notice Gets all active brokerbots\\n     * \\n     * @return brokerbots An array of active brokerbot addresses\\n     */\\n    function getAllActiveBrokerbots() external view returns(address[] memory brokerbots) {\\n        return _activeBrokerbotSet.values();\\n    }\\n\\n    /**\\n     * @notice Gets all registered brokerbots\\n     * \\n     * @return brokerbots An array of all registered brokerbot addresses\\n     */\\n    function getAllBrokerbots() external view returns (address[] memory brokerbots) {\\n        return _brokerbotSet.values();\\n    }\\n}\\n\",\"keccak256\":\"0x72b01f95ea2d26f77cd409dbed36c4a73b32b4f0ff0b18b32023b165fc60ea5f\",\"license\":\"MIT\"},\"src/brokerbot/IBrokerbot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../ERC20/IERC20Permit.sol\\\";\\n\\ninterface IBrokerbot {\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n  //////////////////////////////////////////////////////////////*/\\n  error Brokerbot_BuyingDisabled();\\n  error Brokerbot_SellingDisabled();\\n  /// Sender(msg.sender) has to be incoming token or paymenthub.\\n  /// @param sender The msg.sender.\\n  error Brokerbot_InvalidSender(address sender);\\n  /// target.call() wasn't successful.\\n  /// @param target The receiver of the Eth.\\n  /// @param amount The withdraw amount.\\n  error Brokerbot_WithdrawFailed(address target, uint256 amount);\\n  /// Sender(msg.sender) needs to be owner or paymenthub.\\n  /// @param sender The msg.sender.\\n  error Brokerbot_NotAuthorized(address sender);\\n\\n  function paymenthub() external view returns (address);\\n\\n  function base() external view returns (IERC20);\\n\\n  function token() external view returns (IERC20Permit);\\n  \\n  function settings() external view returns (uint256);\\n\\n  // @return The amount of shares bought on buying or how much in the base currency is transfered on selling\\n  function processIncoming(IERC20 token_, address from, uint256 amount, bytes calldata ref) external payable returns (uint256);\\n\\n  function getBuyPrice(uint256 shares) external view returns (uint256);\\n\\n  function getSellPrice(uint256 shares) external view returns (uint256);\\n\\n}\",\"keccak256\":\"0xb41ad02c5b587309ecd6c84d4677d457e4cdb9f993447e97a605b10ec24de7b5\",\"license\":\"MIT\"},\"src/brokerbot/TokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport {BrokerbotRegistry} from \\\"./BrokerbotRegistry.sol\\\";\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\n\\n/**\\n * @title TokenRegistry\\n * @author rube-de\\n *\\n * @notice This contract manages a registry of share tokens and allows adding/removing tokens from the registry.\\n *\\n * @dev Only the contract owner or the BrokerbotRegistry contract can add tokens to the registry.\\n */\\ncontract TokenRegistry is Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @dev Set of share token addresses\\n    EnumerableSet.AddressSet private _shareTokenSet;\\n\\n    /// @dev Address of the BrokerbotRegistry contract\\n    BrokerbotRegistry public brokerbotRegistry;\\n\\n    /**\\n     * @notice Emitted when a new share token is added to the registry\\n     *\\n     * @param adr The address of the added share token\\n     */\\n    event ShareTokenAdded(address adr);\\n\\n    /**\\n     * @notice Emitted when a share token is removed from the registry\\n     *\\n     * @param adr The address of the removed share token\\n     */\\n    event ShareTokenRemoved(address adr);\\n\\n    /**\\n     * @notice Emitted when the BrokerbotRegistry address is updated\\n     *\\n     * @param adr The new address of the BrokerbotRegistry contract\\n     */\\n    event BrokerbotRegistryUpdated(BrokerbotRegistry adr);\\n\\n    /// @dev Error thrown when an unauthorized address tries to add a share token\\n    error TokenRegistry__Unauthorized();\\n\\n    /**\\n     * @notice Constructor to set the contract owner and BrokerbotRegistry address\\n     *\\n     * @param _owner The address of the contract owner\\n     * @param _brokerbotRegistry The address of the BrokerbotRegistry contract\\n     */\\n    constructor(address _owner, BrokerbotRegistry _brokerbotRegistry) Ownable(_owner) {\\n        brokerbotRegistry = _brokerbotRegistry;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict access to only the contract owner or the BrokerbotRegistry contract\\n     */\\n    modifier onlyOwnerOrRegistry() {\\n        if (msg.sender != owner && msg.sender != address(brokerbotRegistry))\\n            revert TokenRegistry__Unauthorized();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Updates the BrokerbotRegistry address\\n     *\\n     * @param _brokerbotRegistry The new address of the BrokerbotRegistry contract\\n     */\\n    function setBrokerbotRegistry(BrokerbotRegistry _brokerbotRegistry) external onlyOwner() {\\n        brokerbotRegistry = _brokerbotRegistry;\\n        emit BrokerbotRegistryUpdated(_brokerbotRegistry);\\n    }\\n\\n    /**\\n     * @notice Adds a new share token to the registry\\n     *\\n     * @param adr The address of the share token to be added\\n     *\\n     * @return bool True if the token was added successfully, false otherwise\\n     */\\n    function addShareToken(address adr) external onlyOwnerOrRegistry() returns (bool) {\\n        bool added = _shareTokenSet.add(adr);\\n        if (added) emit ShareTokenAdded(adr);\\n        return added;\\n    }\\n\\n    /**\\n     * @notice Removes a share token from the registry\\n     *\\n     * @param adr The address of the share token to be removed\\n     *\\n     * @return bool True if the token was removed successfully, false otherwise\\n     */\\n    function removeShareToken(address adr) external onlyOwner() returns (bool) {\\n        bool removed = _shareTokenSet.remove(adr);\\n        if (removed) emit ShareTokenRemoved(adr);\\n        return removed;\\n    }\\n\\n    /**\\n     * @notice Checks if a given address is a share token in the registry\\n     *\\n     * @param adr The address to check\\n     *\\n     * @return bool True if the address is a share token, false otherwise\\n     */\\n    function cointainsShareToken(address adr) external view returns (bool) {\\n        return _shareTokenSet.contains(adr);\\n    }\\n\\n    /**\\n     * @notice Returns the number of share tokens in the registry\\n     *\\n     * @return uint256 The number of share tokens in the registry\\n     */\\n    function amountOfShareToken() external view returns (uint256) {\\n        return _shareTokenSet.length();\\n    }\\n\\n    /**\\n     * @notice Returns an array of all share token addresses in the registry\\n     *\\n     * @return address[] An array of share token addresses\\n     */\\n    function getAllShareToken() external view returns (address[] memory) {\\n        return _shareTokenSet.values();\\n    }\\n}\\n\",\"keccak256\":\"0x5008b6373a4aaad1e402cc0097f8fcd249495789862099cce3e18a1f22ff29ba\",\"license\":\"MIT\"},\"src/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n//\\n// Modifications:\\n// - Replaced Context._msgSender() with msg.sender\\n// - Made leaner\\n// - Extracted interface\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    error Ownable_NotOwner(address sender);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor (address initialOwner) {\\n        owner = initialOwner;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    function _checkOwner() internal view {\\n        if (msg.sender != owner) {\\n            revert Ownable_NotOwner(msg.sender);\\n        }\\n    }\\n}\",\"keccak256\":\"0x9057578671d192c7891a59854cf8bab2698450c5b271f21e0696036fb65cae3b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b5060405161088f38038061088f833981016040819052602c91607a565b600080546001600160a01b0319166001600160a01b03831690811782556040518392907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3505060a8565b600060208284031215608b57600080fd5b81516001600160a01b038116811460a157600080fd5b9392505050565b6107d8806100b76000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639abad75e1161005b5780639abad75e14610112578063c836ff5114610127578063e55121c61461013a578063f2fde38b1461014d57600080fd5b8063333fbcbd1461008d57806349855b7f146100ab57806376abbf0a146100b35780638da5cb5b146100ff575b600080fd5b610095610160565b6040516100a2919061065b565b60405180910390f35b610095610171565b6100e76100c13660046106c0565b60056020908152600092835260408084209091529082529020546001600160a01b031681565b6040516001600160a01b0390911681526020016100a2565b6000546100e7906001600160a01b031681565b6101256101203660046106f9565b61017d565b005b6101256101353660046106f9565b6101b4565b6101256101483660046106c0565b6101ff565b61012561015b3660046106f9565b6103e0565b606061016c6003610443565b905090565b606061016c6001610443565b6040516001600160a01b038216907f1bd881792b0d79aba94eb5d1d39a71fa269fddf813d39e564e5c7e7f57b0f6b390600090a250565b6101bc610457565b6101c760038261048a565b506040516001600160a01b038216907f7efc451e1a01eefc5e0bfb9dc4157e88f06fafb3069671710b8c8e1bdf97bafd90600090a250565b610207610457565b60006102146001846104a8565b905080156103db576000836001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561025c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102809190610716565b90506000846001600160a01b0316635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e69190610716565b90506102f36003866104a8565b506001600160a01b03818116600090815260056020908152604080832086851680855292529182902080546001600160a01b0319168985161790559051636473b10760e01b8152600481019190915290851690636473b107906024016020604051808303816000875af115801561036e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103929190610733565b506040516001600160a01b03868116825280841691908316907fac80c540c8dc2c7a0089104140c6231a322ae630a8153c382c30350a009e743f9060200160405180910390a350505b505050565b6103e8610457565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60606000610450836104bd565b9392505050565b6000546001600160a01b03163314610488576040516396a19be960e01b815233600482015260240160405180910390fd5b565b600061049f836001600160a01b038416610519565b90505b92915050565b600061049f836001600160a01b03841661060c565b60608160000180548060200260200160405190810160405280929190818152602001828054801561050d57602002820191906000526020600020905b8154815260200190600101908083116104f9575b50505050509050919050565b6000818152600183016020526040812054801561060257600061053d600183610755565b855490915060009061055190600190610755565b90508082146105b657600086600001828154811061057157610571610776565b906000526020600020015490508087600001848154811061059457610594610776565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806105c7576105c761078c565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104a2565b60009150506104a2565b6000818152600183016020526040812054610653575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104a2565b5060006104a2565b6020808252825182820181905260009190848201906040850190845b8181101561069c5783516001600160a01b031683529284019291840191600101610677565b50909695505050505050565b6001600160a01b03811681146106bd57600080fd5b50565b600080604083850312156106d357600080fd5b82356106de816106a8565b915060208301356106ee816106a8565b809150509250929050565b60006020828403121561070b57600080fd5b8135610450816106a8565b60006020828403121561072857600080fd5b8151610450816106a8565b60006020828403121561074557600080fd5b8151801515811461045057600080fd5b818103818111156104a257634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220e92d928a39f2c29f546c225a2f3a657c59017ff451735d19f66ccf4258f1cbdc64736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80639abad75e1161005b5780639abad75e14610112578063c836ff5114610127578063e55121c61461013a578063f2fde38b1461014d57600080fd5b8063333fbcbd1461008d57806349855b7f146100ab57806376abbf0a146100b35780638da5cb5b146100ff575b600080fd5b610095610160565b6040516100a2919061065b565b60405180910390f35b610095610171565b6100e76100c13660046106c0565b60056020908152600092835260408084209091529082529020546001600160a01b031681565b6040516001600160a01b0390911681526020016100a2565b6000546100e7906001600160a01b031681565b6101256101203660046106f9565b61017d565b005b6101256101353660046106f9565b6101b4565b6101256101483660046106c0565b6101ff565b61012561015b3660046106f9565b6103e0565b606061016c6003610443565b905090565b606061016c6001610443565b6040516001600160a01b038216907f1bd881792b0d79aba94eb5d1d39a71fa269fddf813d39e564e5c7e7f57b0f6b390600090a250565b6101bc610457565b6101c760038261048a565b506040516001600160a01b038216907f7efc451e1a01eefc5e0bfb9dc4157e88f06fafb3069671710b8c8e1bdf97bafd90600090a250565b610207610457565b60006102146001846104a8565b905080156103db576000836001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561025c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102809190610716565b90506000846001600160a01b0316635001f3b56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e69190610716565b90506102f36003866104a8565b506001600160a01b03818116600090815260056020908152604080832086851680855292529182902080546001600160a01b0319168985161790559051636473b10760e01b8152600481019190915290851690636473b107906024016020604051808303816000875af115801561036e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103929190610733565b506040516001600160a01b03868116825280841691908316907fac80c540c8dc2c7a0089104140c6231a322ae630a8153c382c30350a009e743f9060200160405180910390a350505b505050565b6103e8610457565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60606000610450836104bd565b9392505050565b6000546001600160a01b03163314610488576040516396a19be960e01b815233600482015260240160405180910390fd5b565b600061049f836001600160a01b038416610519565b90505b92915050565b600061049f836001600160a01b03841661060c565b60608160000180548060200260200160405190810160405280929190818152602001828054801561050d57602002820191906000526020600020905b8154815260200190600101908083116104f9575b50505050509050919050565b6000818152600183016020526040812054801561060257600061053d600183610755565b855490915060009061055190600190610755565b90508082146105b657600086600001828154811061057157610571610776565b906000526020600020015490508087600001848154811061059457610594610776565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806105c7576105c761078c565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104a2565b60009150506104a2565b6000818152600183016020526040812054610653575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104a2565b5060006104a2565b6020808252825182820181905260009190848201906040850190845b8181101561069c5783516001600160a01b031683529284019291840191600101610677565b50909695505050505050565b6001600160a01b03811681146106bd57600080fd5b50565b600080604083850312156106d357600080fd5b82356106de816106a8565b915060208301356106ee816106a8565b809150509250929050565b60006020828403121561070b57600080fd5b8135610450816106a8565b60006020828403121561072857600080fd5b8151610450816106a8565b60006020828403121561074557600080fd5b8151801515811461045057600080fd5b818103818111156104a257634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220e92d928a39f2c29f546c225a2f3a657c59017ff451735d19f66ccf4258f1cbdc64736f6c63430008190033",
  "devdoc": {
    "author": "rube-de ",
    "details": "This contract is used to register and manage brokerbots",
    "events": {
      "BrokerbotDeactivated(address)": {
        "params": {
          "brokerbot": "The deactivated brokerbot address"
        }
      },
      "BrokerbotRegistered(address,address,address)": {
        "params": {
          "base": "The address of the base currency",
          "brokerbot": "The address of the registered brokerbot",
          "token": "The address of the share token"
        }
      },
      "BrokerbotSync(address)": {
        "params": {
          "brokerbot": "The brokerbot address that is synced"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_owner": "The address of the owner"
        }
      },
      "deactivateBrokerbot(address)": {
        "params": {
          "brokerbot": "The address of the brokerbot to deactivate"
        }
      },
      "getAllActiveBrokerbots()": {
        "returns": {
          "brokerbots": "An array of active brokerbot addresses"
        }
      },
      "getAllBrokerbots()": {
        "returns": {
          "brokerbots": "An array of all registered brokerbot addresses"
        }
      },
      "registerBrokerbot(address,address)": {
        "details": "Per network, only one active brokerbot should exist per base/share token pair ",
        "params": {
          "_brokerbot": "The brokerbot contract to be registered",
          "_tokenRegistry": "The token registry contract"
        }
      },
      "syncBrokerbot(address)": {
        "details": "This event is useful for indexers/subgraphs to update token balances which are not tracked with other events ",
        "params": {
          "_brokerbot": "The brokerbot to sync"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "getBrokerbot": {
        "details": "mapping is [base][token] = brokerbotAddress ",
        "return": "brokerbot The brokerbot address",
        "returns": {
          "_0": "brokerbot The brokerbot address"
        }
      }
    },
    "title": "Brokerbot Registry",
    "version": 1
  },
  "userdoc": {
    "events": {
      "BrokerbotDeactivated(address)": {
        "notice": "Emitted when a brokerbot is deactivated "
      },
      "BrokerbotRegistered(address,address,address)": {
        "notice": "Emitted when a brokerbot is registered "
      },
      "BrokerbotSync(address)": {
        "notice": "Emitted when calling the syncBrokerbot function "
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor that sets the owner "
      },
      "deactivateBrokerbot(address)": {
        "notice": "Deactivates a brokerbot "
      },
      "getAllActiveBrokerbots()": {
        "notice": "Gets all active brokerbots "
      },
      "getAllBrokerbots()": {
        "notice": "Gets all registered brokerbots "
      },
      "getBrokerbot(address,address)": {
        "notice": "Returns the brokerbot address for a given base and share token pair, or address 0 if it does not exist "
      },
      "registerBrokerbot(address,address)": {
        "notice": "Registers a new brokerbot "
      },
      "syncBrokerbot(address)": {
        "notice": "Syncs a brokerbot "
      }
    },
    "notice": "Holds a registry of all deployed active brokerbots ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4850,
        "contract": "src/brokerbot/BrokerbotRegistry.sol:BrokerbotRegistry",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2144,
        "contract": "src/brokerbot/BrokerbotRegistry.sol:BrokerbotRegistry",
        "label": "_brokerbotSet",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)325_storage"
      },
      {
        "astId": 2147,
        "contract": "src/brokerbot/BrokerbotRegistry.sol:BrokerbotRegistry",
        "label": "_activeBrokerbotSet",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)325_storage"
      },
      {
        "astId": 2157,
        "contract": "src/brokerbot/BrokerbotRegistry.sol:BrokerbotRegistry",
        "label": "getBrokerbot",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_contract(IERC20)705,t_mapping(t_contract(IERC20)705,t_contract(IBrokerbot)3111))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBrokerbot)3111": {
        "encoding": "inplace",
        "label": "contract IBrokerbot",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)705": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)705,t_contract(IBrokerbot)3111)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)705",
        "label": "mapping(contract IERC20 => contract IBrokerbot)",
        "numberOfBytes": "32",
        "value": "t_contract(IBrokerbot)3111"
      },
      "t_mapping(t_contract(IERC20)705,t_mapping(t_contract(IERC20)705,t_contract(IBrokerbot)3111))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)705",
        "label": "mapping(contract IERC20 => mapping(contract IERC20 => contract IBrokerbot))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)705,t_contract(IBrokerbot)3111)"
      },
      "t_struct(AddressSet)325_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 324,
            "contract": "src/brokerbot/BrokerbotRegistry.sol:BrokerbotRegistry",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)10_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5,
            "contract": "src/brokerbot/BrokerbotRegistry.sol:BrokerbotRegistry",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9,
            "contract": "src/brokerbot/BrokerbotRegistry.sol:BrokerbotRegistry",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}