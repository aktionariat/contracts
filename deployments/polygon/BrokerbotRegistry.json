{
  "address": "0xec0739be570c77c9b544802e4c06a95be719ee5f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Ownable_NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IBrokerbot",
          "name": "brokerbot",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "base",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RegisterBrokerbot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IBrokerbot",
          "name": "brokerbot",
          "type": "address"
        }
      ],
      "name": "SyncBrokerbot",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getBrokerbot",
      "outputs": [
        {
          "internalType": "contract IBrokerbot",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBrokerbot",
          "name": "_brokerbot",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_base",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "registerBrokerbot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBrokerbot",
          "name": "_brokerbot",
          "type": "address"
        }
      ],
      "name": "syncBrokerbot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2dd2430d93e7969bde35244484d7d7695b6157690c9a10c112b733417e11dac1",
  "receipt": {
    "to": null,
    "from": "0x447ffd9a116efb3d77f47802cc4869c3730f723c",
    "contractAddress": "0xec0739be570c77c9b544802e4c06a95be719ee5f",
    "transactionIndex": "0xd",
    "gasUsed": "0x3ef27",
    "logsBloom": "0x
    "blockHash": "0xc4c7f3a05033e4ac9829b5717403c8e31f0400bd8210efd17e79d25701bcf7de",
    "transactionHash": "0xddb6cb943bfbc903a2ac0407c84c1eb8f27e630fa99c2a6e40e31b7d3f79b37c",
    "logs": [
      {
        "address": "0xec0739be570c77c9b544802e4c06a95be719ee5f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000447ffd9a116efb3d77f47802cc4869c3730f723c"
        ],
        "data": "0x",
        "blockNumber": "0x2e4606b",
        "transactionHash": "0xddb6cb943bfbc903a2ac0407c84c1eb8f27e630fa99c2a6e40e31b7d3f79b37c",
        "transactionIndex": "0xd",
        "blockHash": "0xc4c7f3a05033e4ac9829b5717403c8e31f0400bd8210efd17e79d25701bcf7de",
        "logIndex": "0x2f",
        "removed": false
      },
      {
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000447ffd9a116efb3d77f47802cc4869c3730f723c",
          "0x000000000000000000000000eedba2484aaf940f37cd3cd21a5d7c4a7dafbfc0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000375cd2054943690000000000000000000000000000000000000000000000001b2b0c28de557e8300000000000000000000000000000000000000000000addc6c705d54f352ba540000000000000000000000000000000000000000000000001af3af56d90c3b1a00000000000000000000000000000000000000000000addc6ca7ba26f89bfdbd",
        "blockNumber": "0x2e4606b",
        "transactionHash": "0xddb6cb943bfbc903a2ac0407c84c1eb8f27e630fa99c2a6e40e31b7d3f79b37c",
        "transactionIndex": "0xd",
        "blockHash": "0xc4c7f3a05033e4ac9829b5717403c8e31f0400bd8210efd17e79d25701bcf7de",
        "logIndex": "0x30",
        "removed": false
      }
    ],
    "blockNumber": "0x2e4606b",
    "cumulativeGasUsed": "0x20cc9d",
    "status": "0x1"
  },
  "args": [
    "0x447ffD9a116efb3D77f47802cc4869C3730f723C"
  ],
  "numDeployments": 1,
  "solcInputHash": "52da0c8ebd6b37bb8f91e29cfaaf8064",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Ownable_NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IBrokerbot\",\"name\":\"brokerbot\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"base\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RegisterBrokerbot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IBrokerbot\",\"name\":\"brokerbot\",\"type\":\"address\"}],\"name\":\"SyncBrokerbot\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getBrokerbot\",\"outputs\":[{\"internalType\":\"contract IBrokerbot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBrokerbot\",\"name\":\"_brokerbot\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"registerBrokerbot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBrokerbot\",\"name\":\"_brokerbot\",\"type\":\"address\"}],\"name\":\"syncBrokerbot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RegisterBrokerbot(address,address,address)\":{\"params\":{\"base\":\"The address of the base currency\",\"brokerbot\":\"The address of the brokerbot\",\"token\":\"The address of the share token\"}},\"SyncBrokerbot(address)\":{\"params\":{\"brokerbot\":\"The brokerbot address that is synced\"}}},\"kind\":\"dev\",\"methods\":{\"registerBrokerbot(address,address,address)\":{\"params\":{\"_base\":\"The contract of the base currency of the brokerbot.\",\"_brokerbot\":\"The brokerbot contract that should be registered.\",\"_token\":\"The contract of the share token of the brokerbot.\"}},\"syncBrokerbot(address)\":{\"params\":{\"_brokerbot\":\"The brokerbot that should be synced\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"getBrokerbot\":{\"details\":\"mapping is [base][token] = brokerbotAddress\",\"return\":\"brokerbot The brokerbot address\",\"returns\":{\"_0\":\"brokerbot The brokerbot address\"}}},\"title\":\"Brokerbot Registry\",\"version\":1},\"userdoc\":{\"events\":{\"RegisterBrokerbot(address,address,address)\":{\"notice\":\"Emitted when brokerbot is registered.\"},\"SyncBrokerbot(address)\":{\"notice\":\"Emmitted when calling syncBrokerbot function\"}},\"kind\":\"user\",\"methods\":{\"getBrokerbot(address,address)\":{\"notice\":\"Returns the brokerbot address for a given pair base and share token, or address 0 if it does not exist\"},\"registerBrokerbot(address,address,address)\":{\"notice\":\"Per network only one active brokerbot should exist per base/share pair\"},\"syncBrokerbot(address)\":{\"notice\":\"This event is usful for indexers/subgraphs to update token balances which are not tracked with other events\"}},\"notice\":\"Holds a registry from all deployed active brokerbots\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/brokerbot/BrokerbotRegistry.sol\":\"BrokerbotRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/ERC20/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0x2224189bcdeb28cbadfdb8d126c278df60ec39875c7929e7ffa9e2055cded960\",\"license\":\"MIT\"},\"src/ERC20/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit is IERC20 {\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n\\t//////////////////////////////////////////////////////////////*/\\n    /// Block timestamp must to be before deadline.\\n    /// @param deadline The deadline of the permit.\\n    /// @param blockTimestamp The timestamp of the execution block.\\n    error Permit_DeadlineExpired(uint256 deadline, uint256 blockTimestamp);\\n    /// Recovered address must be owner and not zero address.\\n    /// @param signerAddress The recovered signer address.\\n    error Permit_InvalidSigner(address signerAddress);\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\",\"keccak256\":\"0x9c6c4c49deffc8176f13b34150dd580526b45dd85ce1b71fe2ed340ff0489ebd\",\"license\":\"MIT\"},\"src/brokerbot/BrokerbotRegistry.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* Proprietary License\\n*\\n* This code cannot be used without an explicit permission from the copyright holder.\\n* If you wish to use the Aktionariat Brokerbot, you can either use the open version\\n* named Brokerbot.sol that can be used under an MIT License with Automated License Fee Payments,\\n* or you can get in touch with use to negotiate a license to use LicensedBrokerbot.sol .\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com), All rights reserved.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBrokerbot.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\n\\n/// @title Brokerbot Registry\\n/// @notice Holds a registry from all deployed active brokerbots\\ncontract BrokerbotRegistry is Ownable {\\n  /// @notice Returns the brokerbot address for a given pair base and share token, or address 0 if it does not exist\\n  /// @dev mapping is [base][token] = brokerbotAddress\\n  /// @return brokerbot The brokerbot address\\n  mapping(IERC20 => mapping(IERC20 => IBrokerbot)) public getBrokerbot;\\n\\n  /// @notice Emitted when brokerbot is registered.\\n  /// @param brokerbot The address of the brokerbot\\n  /// @param base The address of the base currency\\n  /// @param token The address of the share token\\n  event RegisterBrokerbot(IBrokerbot brokerbot, IERC20 indexed base, IERC20 indexed token);\\n\\n  /// @notice Emmitted when calling syncBrokerbot function\\n  /// @param brokerbot The brokerbot address that is synced\\n  event SyncBrokerbot(IBrokerbot indexed brokerbot);\\n\\n  constructor(address _owner) Ownable(_owner) {}\\n\\n  /// @notice Per network only one active brokerbot should exist per base/share pair\\n  /// @param _brokerbot The brokerbot contract that should be registered.\\n  /// @param _base The contract of the base currency of the brokerbot.\\n  /// @param _token The contract of the share token of the brokerbot.\\n  function registerBrokerbot(IBrokerbot _brokerbot, IERC20 _base, IERC20 _token ) external onlyOwner() {\\n    getBrokerbot[_base][_token] = _brokerbot;\\n    emit RegisterBrokerbot(_brokerbot, _base, _token);\\n  }\\n\\n  /// @notice This event is usful for indexers/subgraphs to update token balances which are not tracked with other events\\n  /// @param _brokerbot The brokerbot that should be synced\\n  function syncBrokerbot(IBrokerbot _brokerbot) external {\\n    emit SyncBrokerbot(_brokerbot);\\n  }\\n\\n}\",\"keccak256\":\"0xd58d816746540b20822823f97e360df6b1204ce7395556338757eb2e6e965553\",\"license\":\"LicenseRef-Aktionariat\"},\"src/brokerbot/IBrokerbot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../ERC20/IERC20Permit.sol\\\";\\n\\ninterface IBrokerbot {\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n  //////////////////////////////////////////////////////////////*/\\n  error Brokerbot_BuyingDisabled();\\n  error Brokerbot_SellingDisabled();\\n  /// Sender(msg.sender) has to be incoming token or paymenthub.\\n  /// @param sender The msg.sender.\\n  error Brokerbot_InvalidSender(address sender);\\n  /// target.call() wasn't successful.\\n  /// @param target The receiver of the Eth.\\n  /// @param amount The withdraw amount.\\n  error Brokerbot_WithdrawFailed(address target, uint256 amount);\\n  /// Sender(msg.sender) needs to be owner or paymenthub.\\n  /// @param sender The msg.sender.\\n  error Brokerbot_NotAuthorized(address sender);\\n\\n  function paymenthub() external view returns (address);\\n\\n  function base() external view returns (IERC20);\\n\\n  function token() external view returns (IERC20Permit);\\n  \\n  function settings() external view returns (uint256);\\n\\n  // @return The amount of shares bought on buying or how much in the base currency is transfered on selling\\n  function processIncoming(IERC20 token_, address from, uint256 amount, bytes calldata ref) external payable returns (uint256);\\n\\n  function getBuyPrice(uint256 shares) external view returns (uint256);\\n\\n  function getSellPrice(uint256 shares) external view returns (uint256);\\n\\n}\",\"keccak256\":\"0xb41ad02c5b587309ecd6c84d4677d457e4cdb9f993447e97a605b10ec24de7b5\",\"license\":\"MIT\"},\"src/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n//\\n// Modifications:\\n// - Replaced Context._msgSender() with msg.sender\\n// - Made leaner\\n// - Extracted interface\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    error Ownable_NotOwner(address sender);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor (address initialOwner) {\\n        owner = initialOwner;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    function _checkOwner() internal view {\\n        if (msg.sender != owner) {\\n            revert Ownable_NotOwner(msg.sender);\\n        }\\n    }\\n}\",\"keccak256\":\"0x9057578671d192c7891a59854cf8bab2698450c5b271f21e0696036fb65cae3b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516103f53803806103f583398101604081905261002f9161007e565b600080546001600160a01b0319166001600160a01b03831690811782556040518392907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350506100ae565b60006020828403121561009057600080fd5b81516001600160a01b03811681146100a757600080fd5b9392505050565b610338806100bd6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806309f793711461005c57806376abbf0a146100715780638da5cb5b146100c15780639abad75e146100d4578063f2fde38b146100e7575b600080fd5b61006f61006a36600461025a565b6100fa565b005b6100a561007f3660046102a5565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6000546100a5906001600160a01b031681565b61006f6100e23660046102de565b610175565b61006f6100f53660046102de565b6101ac565b61010261020f565b6001600160a01b0382811660008181526001602090815260408083208686168085529083529281902080546001600160a01b03191695891695861790555193845290927f3cc22fa2b08c920913fb7245fcc72114373ad796b1be5d44ee1ff6ad60b3a65a910160405180910390a3505050565b6040516001600160a01b038216907f8709efa7ee1ccd26c55d0d4770969d05389572dec0bc4e3b34acfdf89f1b64f990600090a250565b6101b461020f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610240576040516396a19be960e01b815233600482015260240160405180910390fd5b565b6001600160a01b038116811461025757600080fd5b50565b60008060006060848603121561026f57600080fd5b833561027a81610242565b9250602084013561028a81610242565b9150604084013561029a81610242565b809150509250925092565b600080604083850312156102b857600080fd5b82356102c381610242565b915060208301356102d381610242565b809150509250929050565b6000602082840312156102f057600080fd5b81356102fb81610242565b939250505056fea26469706673582212205b7e29f3d56ce9e9696aa8901cae24cdf99842d4135753964ace66f4ebdbdef564736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806309f793711461005c57806376abbf0a146100715780638da5cb5b146100c15780639abad75e146100d4578063f2fde38b146100e7575b600080fd5b61006f61006a36600461025a565b6100fa565b005b6100a561007f3660046102a5565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6000546100a5906001600160a01b031681565b61006f6100e23660046102de565b610175565b61006f6100f53660046102de565b6101ac565b61010261020f565b6001600160a01b0382811660008181526001602090815260408083208686168085529083529281902080546001600160a01b03191695891695861790555193845290927f3cc22fa2b08c920913fb7245fcc72114373ad796b1be5d44ee1ff6ad60b3a65a910160405180910390a3505050565b6040516001600160a01b038216907f8709efa7ee1ccd26c55d0d4770969d05389572dec0bc4e3b34acfdf89f1b64f990600090a250565b6101b461020f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610240576040516396a19be960e01b815233600482015260240160405180910390fd5b565b6001600160a01b038116811461025757600080fd5b50565b60008060006060848603121561026f57600080fd5b833561027a81610242565b9250602084013561028a81610242565b9150604084013561029a81610242565b809150509250925092565b600080604083850312156102b857600080fd5b82356102c381610242565b915060208301356102d381610242565b809150509250929050565b6000602082840312156102f057600080fd5b81356102fb81610242565b939250505056fea26469706673582212205b7e29f3d56ce9e9696aa8901cae24cdf99842d4135753964ace66f4ebdbdef564736f6c63430008150033",
  "devdoc": {
    "events": {
      "RegisterBrokerbot(address,address,address)": {
        "params": {
          "base": "The address of the base currency",
          "brokerbot": "The address of the brokerbot",
          "token": "The address of the share token"
        }
      },
      "SyncBrokerbot(address)": {
        "params": {
          "brokerbot": "The brokerbot address that is synced"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "registerBrokerbot(address,address,address)": {
        "params": {
          "_base": "The contract of the base currency of the brokerbot.",
          "_brokerbot": "The brokerbot contract that should be registered.",
          "_token": "The contract of the share token of the brokerbot."
        }
      },
      "syncBrokerbot(address)": {
        "params": {
          "_brokerbot": "The brokerbot that should be synced"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "getBrokerbot": {
        "details": "mapping is [base][token] = brokerbotAddress",
        "return": "brokerbot The brokerbot address",
        "returns": {
          "_0": "brokerbot The brokerbot address"
        }
      }
    },
    "title": "Brokerbot Registry",
    "version": 1
  },
  "userdoc": {
    "events": {
      "RegisterBrokerbot(address,address,address)": {
        "notice": "Emitted when brokerbot is registered."
      },
      "SyncBrokerbot(address)": {
        "notice": "Emmitted when calling syncBrokerbot function"
      }
    },
    "kind": "user",
    "methods": {
      "getBrokerbot(address,address)": {
        "notice": "Returns the brokerbot address for a given pair base and share token, or address 0 if it does not exist"
      },
      "registerBrokerbot(address,address,address)": {
        "notice": "Per network only one active brokerbot should exist per base/share pair"
      },
      "syncBrokerbot(address)": {
        "notice": "This event is usful for indexers/subgraphs to update token balances which are not tracked with other events"
      }
    },
    "notice": "Holds a registry from all deployed active brokerbots",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11416,
        "contract": "src/brokerbot/BrokerbotRegistry.sol:BrokerbotRegistry",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2812,
        "contract": "src/brokerbot/BrokerbotRegistry.sol:BrokerbotRegistry",
        "label": "getBrokerbot",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IERC20)1376,t_mapping(t_contract(IERC20)1376,t_contract(IBrokerbot)3681))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IBrokerbot)3681": {
        "encoding": "inplace",
        "label": "contract IBrokerbot",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1376": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IERC20)1376,t_contract(IBrokerbot)3681)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1376",
        "label": "mapping(contract IERC20 => contract IBrokerbot)",
        "numberOfBytes": "32",
        "value": "t_contract(IBrokerbot)3681"
      },
      "t_mapping(t_contract(IERC20)1376,t_mapping(t_contract(IERC20)1376,t_contract(IBrokerbot)3681))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1376",
        "label": "mapping(contract IERC20 => mapping(contract IERC20 => contract IBrokerbot))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)1376,t_contract(IBrokerbot)3681)"
      }
    }
  }
}