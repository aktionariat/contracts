{
  "address": "0x48860132882c2b463b8110B2Dc2a0489D1d0FF60",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pricePerShare",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votePeriod",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "contract IOffer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "contract IDraggable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pricePerShare",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votePeriod",
          "type": "uint256"
        }
      ],
      "name": "predictOfferAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2325425336d8d07206bb9ea011effc6dcf5ff6d80dd21831055cf2254f6a2b6d",
  "receipt": {
    "to": null,
    "from": "0x447ffD9a116efb3D77f47802cc4869C3730f723C",
    "contractAddress": "0x48860132882c2b463b8110B2Dc2a0489D1d0FF60",
    "transactionIndex": 67,
    "gasUsed": "1737312",
    "logsBloom": "0x
    "blockHash": "0x53a3c2dc6545e12e66c0b5333bb71e2c6eafcc925e2fb459f878b1c25145a5b2",
    "transactionHash": "0x2325425336d8d07206bb9ea011effc6dcf5ff6d80dd21831055cf2254f6a2b6d",
    "logs": [
      {
        "transactionIndex": 67,
        "blockNumber": 48520112,
        "transactionHash": "0x2325425336d8d07206bb9ea011effc6dcf5ff6d80dd21831055cf2254f6a2b6d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000447ffd9a116efb3d77f47802cc4869c3730f723c",
          "0x00000000000000000000000009385a960a2e0b6b4516d341534da92cb2a50085"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001362bc8fbc51cc000000000000000000000000000000000000000000000000007862bc85c8dee830000000000000000000000000000000000000000000002a1a1b17b9a31484ddf000000000000000000000000000000000000000000000000064fffff60c8d1c30000000000000000000000000000000000000000000002a1a2e7a7632d0d6a9f",
        "logIndex": 250,
        "blockHash": "0x53a3c2dc6545e12e66c0b5333bb71e2c6eafcc925e2fb459f878b1c25145a5b2"
      }
    ],
    "blockNumber": 48520112,
    "cumulativeGasUsed": "13636531",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "52da0c8ebd6b37bb8f91e29cfaaf8064",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votePeriod\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract IOffer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"contract IDraggable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votePeriod\",\"type\":\"uint256\"}],\"name\":\"predictOfferAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/draggable/OfferFactory.sol\":\"OfferFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/ERC20/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0x2224189bcdeb28cbadfdb8d126c278df60ec39875c7929e7ffa9e2055cded960\",\"license\":\"MIT\"},\"src/ERC20/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit is IERC20 {\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n\\t//////////////////////////////////////////////////////////////*/\\n    /// Block timestamp must to be before deadline.\\n    /// @param deadline The deadline of the permit.\\n    /// @param blockTimestamp The timestamp of the execution block.\\n    error Permit_DeadlineExpired(uint256 deadline, uint256 blockTimestamp);\\n    /// Recovered address must be owner and not zero address.\\n    /// @param signerAddress The recovered signer address.\\n    error Permit_InvalidSigner(address signerAddress);\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\",\"keccak256\":\"0x9c6c4c49deffc8176f13b34150dd580526b45dd85ce1b71fe2ed340ff0489ebd\",\"license\":\"MIT\"},\"src/draggable/IDraggable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\ninterface IDraggable is IERC20 {\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n    //////////////////////////////////////////////////////////////*/\\n    /// conversion factor has to be > 0 for this transaction.\\n    error Draggable_NotBinding();\\n    /// conversion factor has to be = 0 for this transaction.\\n    error Draggable_IsBinding();\\n    /// conversion factor can't be 0 if binding gets deactivated.\\n    error Draggable_FactorZero();\\n    /// the reported votes can't be > max voting tokens.\\n    /// @param maxVotes The max voting tokens.\\n    /// @param reportedVotes The actual reported votes.\\n    error Draggable_TooManyVotes(uint256 maxVotes, uint256 reportedVotes);\\n    /// there is still an open offer that has to be canceled first\\n    error Draggable_OpenOffer();\\n    /// For migration the quorum needs to be reached.\\n    /// @param needed The needed quorum.\\n    /// @param actual The current yes votes.\\n    error Draggable_QuorumNotReached(uint256 needed, uint256 actual);\\n    \\n    function wrapped() external view returns (IERC20);\\n    function unwrap(uint256 amount) external;\\n    function offer() external view returns (IOffer);\\n    function oracle() external view returns (address);\\n    function drag(address buyer, IERC20 currency) external;\\n    function notifyOfferEnded() external;\\n    function votingPower(address voter) external returns (uint256);\\n    function totalVotingTokens() external view returns (uint256);\\n    function notifyVoted(address voter) external;\\n    function migrate() external;\\n    function setOracle(address newOracle) external;\\n    function migrateWithExternalApproval(address successor, uint256 additionalVotes) external;\\n    function setTerms(string calldata _terms) external;\\n\\n\\n}\\n\",\"keccak256\":\"0x08c41cde4752628911a4777c71477400c8321e845ebdd66054854449c4562f13\",\"license\":\"MIT\"},\"src/draggable/IOffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ninterface IOffer {\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n  //////////////////////////////////////////////////////////////*/\\n\\t/// Invalid msg.sender.\\n\\t/// @param sender The msg.sender of the transaction.\\n\\terror Offer_InvalidSender(address sender);\\n\\t/// Offer needs to be still open.\\n\\terror Offer_AlreadyAccepted();\\n\\t/// Offer needs to be not accepted yet.\\n\\terror Offer_NotAccepted();\\n\\t/// Sender of the offer needs to have needed funds in his account.\\n\\terror Offer_NotWellFunded();\\n\\t/// New offer not valid. `newPrice` needs to be higher than `oldPrice`.\\n\\t/// @param oldPrice Price of the old offer.\\n\\t/// @param newPrice Price of the new offer.\\n\\terror Offer_OldOfferBetter(uint256 oldPrice, uint256 newPrice);\\n\\t/// Voting needs to be still open.\\n\\terror Offer_VotingEnded();\\n\\t/// Too many (External) reported votes. `reportedVotes` needs to be less or equal to `maxVotes`.\\n\\t/// @param maxVotes The max possible votes for the token.\\n\\t/// @param reportedVotes The external reported votes + circulating supply of the token.\\n\\terror Offer_TooManyVotes(uint256 maxVotes, uint256 reportedVotes);\\n\\t/// Competing offer needs to be in the same currency.\\n\\terror Offer_OfferInWrongCurrency();\\n\\n\\tfunction makeCompetingOffer(IOffer newOffer) external;\\n\\n\\t// if there is a token transfer while an offer is open, the votes get transfered too\\n\\tfunction notifyMoved(address from, address to, uint256 value) external;\\n\\n\\tfunction currency() external view returns (IERC20);\\n\\n\\tfunction price() external view returns (uint256);\\n\\n\\tfunction isWellFunded() external view returns (bool);\\n\\n\\tfunction voteYes() external;\\n\\n\\tfunction voteNo() external;\\n}\",\"keccak256\":\"0x22cd3ce6f34206f0cf3b54ebe12539b4ad655d28323e35701e31e3098490fb37\",\"license\":\"MIT\"},\"src/draggable/IOfferFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\n\\ninterface IOfferFactory {\\n\\n\\tfunction create(\\n\\t\\tbytes32 salt, address buyer, uint256 pricePerShare,\\tIERC20 currency,\\tuint256 quorum,\\tuint256 votePeriod\\n\\t) external payable returns (IOffer);\\n}\",\"keccak256\":\"0x048511f24b8e4278df38ee6f5fb038d53a7964cc90761780fb1ebb2e7825a532\",\"license\":\"MIT\"},\"src/draggable/Offer.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IDraggable.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\n/**\\n * @title A public offer to acquire all tokens\\n * @author Luzius Meisser, luzius@aktionariat.com\\n */\\n\\ncontract Offer is IOffer {\\n\\n    using SafeERC20 for IERC20;\\n\\n    address private constant LICENSE_FEE_ADDRESS = 0x29Fe8914e76da5cE2d90De98a64d0055f199d06D;\\n\\n    uint256 private constant AQUISITION_GRACE_PERIOD = 30 days;     // buyer has thirty days to complete acquisition after voting ends\\n    \\n    uint256 private constant BPS_MUL = 10000;           // basis point multiplier to be used with quorum\\n\\n    uint256 public immutable quorum;                    // Percentage of votes needed to start drag-along process in BPS, i.e. 10'000 = 100%\\n\\n    IDraggable public immutable token;\\n    address public immutable buyer;                     // who made the offer\\n    \\n    IERC20 override public immutable currency;\\n    uint256 override public immutable price;            // the price offered per share\\n\\n    enum Vote { NONE, YES, NO }                         // Used internally, represents not voted yet or yes/no vote.\\n    mapping (address => Vote) private votes;            // Who votes what\\n    uint256 public yesVotes;                            // total number of yes votes, including external votes\\n    uint256 public noVotes;                             // total number of no votes, including external votes\\n    uint256 public noExternal;                          // number of external no votes reported by oracle\\n    uint256 public yesExternal;                         // number of external yes votes reported by oracle\\n\\n    uint256 public immutable voteEnd;                   // end of vote period in block time (seconds after 1.1.1970)\\n\\n    event VotesChanged(uint256 yesVotes, uint256 noVotes);\\n    event OfferCreated(address indexed buyer, IDraggable indexed token, uint256 pricePerShare, IERC20 indexed currency);\\n    event OfferEnded(address indexed buyer, bool success, string message); // not sure if it makes sense to index success here\\n\\n    // Not checked here, but buyer should make sure it is well funded from the beginning\\n    constructor(\\n        address _buyer,\\n        IDraggable _token,\\n        uint256 _price,\\n        IERC20 _currency,\\n        uint256 _quorum,\\n        uint256 _votePeriod\\n    ) \\n        payable \\n    {\\n        buyer = _buyer;\\n        token = _token;\\n        currency = _currency;\\n        price = _price;\\n        quorum = _quorum;\\n        // rely on time stamp is ok, no exact time stamp needed\\n        // solhint-disable-next-line not-rely-on-time\\n        voteEnd = block.timestamp + _votePeriod;\\n        emit OfferCreated(_buyer, _token, _price, _currency);\\n        // License Fee to Aktionariat AG, also ensures that offer is serious.\\n        // Any circumvention of this license fee payment is a violation of the copyright terms.\\n        payable(LICENSE_FEE_ADDRESS).transfer(3 ether);\\n    }\\n\\n    modifier onlyBuyer {\\n        _checkSender(buyer);\\n        _;\\n    }\\n\\n    modifier onlyToken {\\n        _checkSender(address(token));\\n        _;\\n    }\\n\\n    modifier onlyOracle {\\n        _checkSender(token.oracle());\\n        _;\\n    }\\n\\n    modifier votingOpen {\\n        if (!isVotingOpen()) {\\n            revert Offer_VotingEnded();\\n        }\\n        _;\\n    }\\n\\n    function makeCompetingOffer(IOffer betterOffer) external override onlyToken {\\n        if (isAccepted()) {\\n            revert Offer_AlreadyAccepted();\\n        }\\n        uint256 newPrice = betterOffer.price();\\n        if (newPrice <= price) {\\n            revert Offer_OldOfferBetter(price, newPrice);\\n        }\\n        if (currency != betterOffer.currency()) {\\n            revert Offer_OfferInWrongCurrency();\\n        }\\n        if (!betterOffer.isWellFunded()) {\\n            revert Offer_NotWellFunded();\\n        }\\n        kill(false, \\\"replaced\\\");\\n    }\\n\\n    function hasExpired() internal view returns (bool) {\\n        // rely on time stamp is ok, no exact time stamp needed\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp > voteEnd + AQUISITION_GRACE_PERIOD; \\n    }\\n\\n    function contest() external {\\n        if (hasExpired()) {\\n            kill(false, \\\"expired\\\");\\n        } else if (isDeclined()) {\\n            kill(false, \\\"declined\\\");\\n        } else if (!isWellFunded()) {\\n            kill(false, \\\"lack of funds\\\");\\n        }\\n    }\\n\\n    function cancel() external onlyBuyer {\\n        kill(false, \\\"cancelled\\\");\\n    }\\n\\n    function execute() external onlyBuyer {\\n        if (!isAccepted()) {\\n            revert Offer_NotAccepted();\\n        }\\n        uint256 totalPrice = getTotalPrice();\\n        currency.safeTransferFrom(buyer, address(token), totalPrice);\\n        token.drag(buyer, currency);\\n        kill(true, \\\"success\\\");\\n    }\\n\\n    function getTotalPrice() internal view returns (uint256) {\\n        IERC20 tok = IERC20(address(token));\\n        return (tok.totalSupply() - tok.balanceOf(buyer)) * price;\\n    }\\n\\n    function isWellFunded() public view override returns (bool) {\\n        uint256 buyerBalance = currency.balanceOf(buyer);\\n        uint256 totalPrice = getTotalPrice();\\n        return totalPrice <= buyerBalance;\\n    }\\n\\n    function isAccepted() public view returns (bool) {\\n        if (isVotingOpen()) {\\n            // is it already clear that more than the quorum requiered will vote yes even though the vote is not over yet?\\n            return yesVotes * BPS_MUL  >= quorum * token.totalVotingTokens();\\n        } else {\\n            // did more than the quorum requiered votes say 'yes'?\\n            return yesVotes * BPS_MUL >= quorum * (yesVotes + noVotes);\\n        }\\n    }\\n\\n    function isDeclined() public view returns (bool) {\\n        if (isVotingOpen()) {\\n            // is it already clear that 25% will vote no even though the vote is not over yet?\\n            uint256 supply = token.totalVotingTokens();\\n            return (supply - noVotes) * BPS_MUL < quorum * supply;\\n        } else {\\n            // did quorum% of all cast votes say 'no'?\\n            return BPS_MUL * yesVotes < quorum * (yesVotes + noVotes);\\n        }\\n    }\\n\\n    function notifyMoved(address from, address to, uint256 value) external override onlyToken {\\n        if (isVotingOpen()) {\\n            Vote fromVoting = votes[from];\\n            Vote toVoting = votes[to];\\n            update(fromVoting, toVoting, value);\\n        }\\n    }\\n\\n    function update(Vote previousVote, Vote newVote, uint256 votes_) internal {\\n        if (previousVote != newVote) {\\n            if (previousVote == Vote.NO) {\\n                noVotes -= votes_;\\n            } else if (previousVote == Vote.YES) {\\n                yesVotes -= votes_;\\n            }\\n            if (newVote == Vote.NO) {\\n                noVotes += votes_;\\n            } else if (newVote == Vote.YES) {\\n                yesVotes += votes_;\\n            }\\n            emit VotesChanged(yesVotes, noVotes);\\n        }\\n    }\\n\\n    function isVotingOpen() public view returns (bool) {\\n        // rely on time stamp is ok, no exact time stamp needed\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp <= voteEnd;\\n    }\\n\\n    /**\\n     * Function to allow the oracle to report the votes of external votes (e.g. shares tokenized on other blockchains).\\n     * This functions is idempotent and sets the number of external yes and no votes. So when more votes come in, the\\n     * oracle should always report the total number of yes and no votes. Abstentions are not counted.\\n     */\\n    function reportExternalVotes(uint256 yes, uint256 no) external onlyOracle votingOpen {\\n        uint256 maxVotes = token.totalVotingTokens();\\n        uint256 reportingVotes = yes + no + IERC20(address(token)).totalSupply();\\n        if (reportingVotes > maxVotes) {\\n            revert Offer_TooManyVotes(maxVotes, reportingVotes);\\n        }\\n        // adjust total votes taking into account that the oralce might have reported different counts before\\n        yesVotes = yesVotes - yesExternal + yes;\\n        noVotes = noVotes - noExternal + no;\\n        // remember how the oracle voted in case the oracle later reports updated numbers\\n        yesExternal = yes;\\n        noExternal = no;\\n    }\\n\\n    function voteYes() external override{\\n        vote(Vote.YES);\\n    }\\n\\n    function voteNo() external override{ \\n        vote(Vote.NO);\\n    }\\n\\n    function vote(Vote newVote) internal votingOpen {\\n        Vote previousVote = votes[msg.sender];\\n        votes[msg.sender] = newVote;\\n        if(previousVote == Vote.NONE){\\n            token.notifyVoted(msg.sender);\\n        }\\n        update(previousVote, newVote, token.votingPower(msg.sender));\\n    }\\n\\n    function hasVotedYes(address voter) external view returns (bool) {\\n        return votes[voter] == Vote.YES;\\n    }\\n\\n    function hasVotedNo(address voter) external view returns (bool) {\\n        return votes[voter] == Vote.NO;\\n    }\\n\\n    function kill(bool success, string memory message) internal {\\n        emit OfferEnded(buyer, success, message);\\n        token.notifyOfferEnded();\\n        selfdestruct(payable(buyer));\\n    }\\n\\n    /**\\n     * Checks if msg.sender is an authorized address.\\n     * @param validSender The authorized address.\\n     */\\n    function _checkSender(address validSender) internal view {\\n        if (msg.sender != validSender) {\\n            revert Offer_InvalidSender(msg.sender);\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0xe2f95c8e7de43fbbf1a1e6682f6fbb1fddc87d0a022f7f694375b8bb67c46c53\",\"license\":\"LicenseRef-Aktionariat\"},\"src/draggable/OfferFactory.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Offer.sol\\\";\\nimport \\\"./IOffer.sol\\\";\\nimport \\\"./IOfferFactory.sol\\\";\\n\\ncontract OfferFactory is IOfferFactory{\\n\\n    // It must be possible to predict the address of the offer so one can pre-fund the allowance.\\n    function predictOfferAddress(bytes32 salt, address buyer, IDraggable token, uint256 pricePerShare, IERC20 currency, uint256 quorum, uint256 votePeriod) external view returns (address) {\\n        bytes32 initCodeHash = keccak256(abi.encodePacked(type(Offer).creationCode, abi.encode(buyer, token, pricePerShare, currency, quorum, votePeriod)));\\n        bytes32 hashResult = keccak256(abi.encodePacked(bytes1(0xff), address(this), salt, initCodeHash));\\n        return address(uint160(uint256(hashResult)));\\n    }\\n\\n    // Do not call directly, msg.sender must be the token to be acquired\\n    function create(bytes32 salt, address buyer, uint256 pricePerShare, IERC20 currency, uint256 quorum, uint256 votePeriod) override external payable returns (IOffer) {\\n        IOffer offer = new Offer{value: msg.value, salt: salt}(buyer, IDraggable(msg.sender), pricePerShare, currency, quorum, votePeriod);\\n        return offer;\\n    }\\n}\",\"keccak256\":\"0xb2e234680a7997511301cbab3e99196e9ec3dd258c60687802ab5f2e52874d3f\",\"license\":\"LicenseRef-Aktionariat\"},\"src/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\n// and modified it.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Address {\\n\\n    /// @param target Target address to call the function on.\\n    error Address_NotTransferNorContract(address target);\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n        return account.code.length > 0;\\n    }\\n    \\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 weiValue) internal returns (bytes memory) {\\n        if (data.length != 0 && !isContract(target)) {\\n            revert Address_NotTransferNorContract(target);\\n        }\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else if (returndata.length > 0) {\\n            assembly{\\n                revert (add (returndata, 0x20), mload (returndata))\\n            }\\n        } else {\\n           revert(\\\"failed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xb95d45875550203c1afb7dfc9c99ce62c77496c36e96f3adfaad2d42cb3380a2\",\"license\":\"MIT\"},\"src/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// coppied and adjusted from OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../ERC20/IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../ERC20/IERC20Permit.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        if (nonceAfter != nonceBefore + 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\",\"keccak256\":\"0xa162e550fe203915126fddc231c55d28dd3f16d39be22dd48c5fc7f5ccd6fd93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611ec5806100206000396000f3fe6080604052600436106100295760003560e01c8063452784bc1461002e5780634dc5e4311461006a575b600080fd5b34801561003a57600080fd5b5061004e6100493660046101c7565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e610078366004610238565b61014e565b60008060405180602001610090906101a2565b601f1982820381018352601f9091011660408190526100bd908a908a908a908a908a908a90602001610294565b60408051601f19818403018152908290526100db92916020016102fe565b60408051601f1981840301815282825280516020918201206001600160f81b0319828501523060601b6bffffffffffffffffffffffff19166021850152603584019c909c5260558084019c909c528151808403909c018c5260759092019052895199019890982098975050505050505050565b600080348890883389898989604051610166906101a2565b61017596959493929190610294565b82906040518091039083f591505080158015610195573d6000803e3d6000fd5b5098975050505050505050565b611b748061031c83390190565b6001600160a01b03811681146101c457600080fd5b50565b600080600080600080600060e0888a0312156101e257600080fd5b8735965060208801356101f4816101af565b95506040880135610204816101af565b945060608801359350608088013561021b816101af565b9699959850939692959460a0840135945060c09093013592915050565b60008060008060008060c0878903121561025157600080fd5b863595506020870135610263816101af565b945060408701359350606087013561027a816101af565b9598949750929560808101359460a0909101359350915050565b6001600160a01b0396871681529486166020860152604085019390935293166060830152608082019290925260a081019190915260c00190565b6000815160005b818110156102ef57602081850181015186830152016102d5565b50600093019283525090919050565b600061031361030d83866102ce565b846102ce565b94935050505056fe61014060405260405162001b7438038062001b7483398101604081905262000027916200010c565b6001600160a01b0380871660c05285811660a052831660e05261010084905260808290526200005781426200017c565b610120526040518481526001600160a01b0380851691878216918916907f4f05be72ad7f57c27e555ace8452f56d8b1e82c9e6e1cd4fd282f34518b7729a9060200160405180910390a46040517329fe8914e76da5ce2d90de98a64d0055f199d06d906000906729a2241af62c00009082818181858883f19350505050158015620000e6573d6000803e3d6000fd5b50505050505050620001a4565b6001600160a01b03811681146200010957600080fd5b50565b60008060008060008060c087890312156200012657600080fd5b86516200013381620000f3565b60208801519096506200014681620000f3565b6040880151606089015191965094506200016081620000f3565b809350506080870151915060a087015190509295509295509295565b808201808211156200019e57634e487b7160e01b600052601160045260246000fd5b92915050565b60805160a05160c05160e0516101005161012051611876620002fe60003960008181610298015281816103190152818161047f0152818161074d0152818161091f01528181610b220152818161105301526114cb01526000818161025501528181610d3b01528181610d6f0152610f670152600081816102da015281816103b4015281816105de015281816106850152610e0f0152600081816101f3015281816103870152818161057c015281816106000152818161065d01528181610c3401528181610f1a0152818161127e015261135401526000818161034e015281816104a601528181610621015281816106ad015281816107760152818161089801528181610962015281816109e801528181610afc01528181610c8901528181610f45015281816110f50152818161117f01526112e101526000818161017e0152818161052c015281816107fe015261085a01526118766000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063a035b1fe116100c3578063e5a6b10f1161007c578063e5a6b10f146102d5578063ea8a1af0146102fc578063f6c8c41e14610304578063fa7f1bae14610317578063fb286c6514610340578063fc0c546a1461034957600080fd5b8063a035b1fe14610250578063b5b47f4214610277578063bd3bc1d314610280578063ddbe8f0914610293578063e1a1810f146102ba578063e3ac83da146102cd57600080fd5b80635051a5ec116101155780635051a5ec146101de57806361461954146101e65780637150d8ae146101ee5780638f1b4c6f1461022d57806390cf581c146102405780639b4e88aa1461024857600080fd5b806311a439a01461015d5780631703a01814610179578063354e5629146101a05780633f5e3e7f146101a957806341c12a70146101c1578063448ab4c6146101cb575b600080fd5b61016660045481565b6040519081526020015b60405180910390f35b6101667f000000000000000000000000000000000000000000000000000000000000000081565b61016660035481565b6101b1610370565b6040519015158152602001610170565b6101c9610436565b005b6101b16101d9366004611683565b610442565b6101b161047b565b6101c9610577565b6102157f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610170565b6101b161023b366004611683565b610736565b6101c961073f565b6101b1610749565b6101667f000000000000000000000000000000000000000000000000000000000000000081565b61016660025481565b6101c961028e3660046116a0565b610893565b6101667f000000000000000000000000000000000000000000000000000000000000000081565b6101c96102c83660046116c2565b610af7565b6101c9610b84565b6102157f000000000000000000000000000000000000000000000000000000000000000081565b6101c9610c2f565b6101c9610312366004611683565b610c84565b7f00000000000000000000000000000000000000000000000000000000000000004211156101b1565b61016660015481565b6102157f000000000000000000000000000000000000000000000000000000000000000081565b6040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156103fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041f9190611703565b9050600061042b610f03565b919091111592915050565b6104406002611051565b565b600060015b6001600160a01b03831660009081526020819052604090205460ff1660028111156104745761047461171c565b1492915050565b60007f00000000000000000000000000000000000000000000000000000000000000004211610567577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105269190611703565b610550907f0000000000000000000000000000000000000000000000000000000000000000611748565b6127106001546105609190611748565b1015905090565b600254600154610526919061175f565b6105a07f00000000000000000000000000000000000000000000000000000000000000006111f1565b6105a861047b565b6105c55760405163d652cf2960e01b815260040160405180910390fd5b60006105cf610f03565b90506106466001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008461121c565b604051637e5bcd3f60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063fcb79a7e90604401600060405180830381600087803b1580156106f157600080fd5b505af1158015610705573d6000803e3d6000fd5b505050506107336001604051806040016040528060078152602001667375636365737360c81b81525061127c565b50565b60006002610447565b6104406001611051565b60007f000000000000000000000000000000000000000000000000000000000000000042116108445760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f69190611703565b9050610822817f0000000000000000000000000000000000000000000000000000000000000000611748565b612710600254836108339190611772565b61083d9190611748565b1091505090565b600254600154610854919061175f565b61087e907f0000000000000000000000000000000000000000000000000000000000000000611748565b60015461088d90612710611748565b10905090565b61091d7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109189190611785565b6111f1565b7f000000000000000000000000000000000000000000000000000000000000000042111561095e576040516317189a8360e31b815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e29190611703565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a689190611703565b610a72848661175f565b610a7c919061175f565b905081811115610aae576040516344ec605760e11b815260048101839052602481018290526044015b60405180910390fd5b83600454600154610abf9190611772565b610ac9919061175f565b6001556003546002548491610add91611772565b610ae7919061175f565b6002555050600491909155600355565b610b207f00000000000000000000000000000000000000000000000000000000000000006111f1565b7f00000000000000000000000000000000000000000000000000000000000000004211610b7f576001600160a01b0380841660009081526020819052604080822054928516825290205460ff9182169116610b7c82828561137e565b50505b505050565b610b8c6114c0565b15610bbb57610440600060405180604001604052806007815260200166195e1c1a5c995960ca1b81525061127c565b610bc3610749565b15610bf357610440600060405180604001604052806008815260200167191958db1a5b995960c21b81525061127c565b610bfb610370565b6104405761044060006040518060400160405280600d81526020016c6c61636b206f662066756e647360981b81525061127c565b610c587f00000000000000000000000000000000000000000000000000000000000000006111f1565b61044060006040518060400160405280600981526020016818d85b98d95b1b195960ba1b81525061127c565b610cad7f00000000000000000000000000000000000000000000000000000000000000006111f1565b610cb561047b565b15610cd357604051635fea7a8560e11b815260040160405180910390fd5b6000816001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d379190611703565b90507f00000000000000000000000000000000000000000000000000000000000000008111610da257604051633c0e47bd60e21b81527f0000000000000000000000000000000000000000000000000000000000000000600482015260248101829052604401610aa5565b816001600160a01b031663e5a6b10f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e049190611785565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610e555760405163497b781f60e11b815260040160405180910390fd5b816001600160a01b0316633f5e3e7f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb791906117a2565b610ed4576040516375677ae960e01b815260040160405180910390fd5b610eff6000604051806040016040528060088152602001671c995c1b1858d95960c21b81525061127c565b5050565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000091908316906370a0823190602401602060405180830381865afa158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd59190611703565b826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611013573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110379190611703565b6110419190611772565b61104b9190611748565b91505090565b7f0000000000000000000000000000000000000000000000000000000000000000421115611092576040516317189a8360e31b815260040160405180910390fd5b336000908152602081905260409020805460ff811691839160ff191660018360028111156110c2576110c261171c565b021790555060008160028111156110db576110db61171c565b0361115a576040516345c8a62b60e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906345c8a62b90602401600060405180830381600087803b15801561114157600080fd5b505af1158015611155573d6000803e3d6000fd5b505050505b60405163603a39fb60e11b8152336004820152610eff90829084906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c07473f6906024016020604051808303816000875af11580156111c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ec9190611703565b61137e565b336001600160a01b038216146107335760405163d600708f60e01b8152336004820152602401610aa5565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526112769085906114f6565b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167fba01adb1638f647e6baa43cb5d8d3a05ed7e59ac18415bf4c64adba235c5b2b083836040516112d79291906117e8565b60405180910390a27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166332bc320b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561133a57600080fd5b505af115801561134e573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316ff5b8160028111156113905761139061171c565b8360028111156113a2576113a261171c565b14610b7f5760028360028111156113bb576113bb61171c565b036113dd5780600260008282546113d29190611772565b9091555061140e9050565b60018360028111156113f1576113f161171c565b0361140e5780600160008282546114089190611772565b90915550505b60028260028111156114225761142261171c565b03611444578060026000828254611439919061175f565b909155506114759050565b60018260028111156114585761145861171c565b0361147557806001600082825461146f919061175f565b90915550505b7f8fcc50c2c4edd06d51ae66e9e21ed76b32a1766c57f491788e1aa24a1b58c2566001546002546040516114b3929190918252602082015260400190565b60405180910390a1505050565b60006114ef62278d007f000000000000000000000000000000000000000000000000000000000000000061175f565b4211905090565b600061150b6001600160a01b03841683611559565b9050805160001415801561153057508080602001905181019061152e91906117a2565b155b15610b7f57604051635274afe760e01b81526001600160a01b0384166004820152602401610aa5565b606061156783836000611570565b90505b92915050565b6060825160001415801561158c57506001600160a01b0384163b155b156115b557604051639eb1341360e01b81526001600160a01b0385166004820152602401610aa5565b600080856001600160a01b031684866040516115d19190611824565b60006040518083038185875af1925050503d806000811461160e576040519150601f19603f3d011682016040523d82523d6000602084013e611613565b606091505b509150915081156116275791506116679050565b80511561163657805160208201fd5b60405162461bcd60e51b815260206004820152600660248201526519985a5b195960d21b6044820152606401610aa5565b9392505050565b6001600160a01b038116811461073357600080fd5b60006020828403121561169557600080fd5b81356116678161166e565b600080604083850312156116b357600080fd5b50508035926020909101359150565b6000806000606084860312156116d757600080fd5b83356116e28161166e565b925060208401356116f28161166e565b929592945050506040919091013590565b60006020828403121561171557600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761156a5761156a611732565b8082018082111561156a5761156a611732565b8181038181111561156a5761156a611732565b60006020828403121561179757600080fd5b81516116678161166e565b6000602082840312156117b457600080fd5b8151801515811461166757600080fd5b60005b838110156117df5781810151838201526020016117c7565b50506000910152565b8215158152604060208201526000825180604084015261180f8160608501602087016117c4565b601f01601f1916919091016060019392505050565b600082516118368184602087016117c4565b919091019291505056fea2646970667358221220227039d0ffe57fc61ad899b5ada30383ca93741a1e08e960a931fd8be522224464736f6c63430008150033a2646970667358221220633a473e62d15156a4a1cf772c9b67c0a3a594d56b5502d9fa54f08511e457de64736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c8063452784bc1461002e5780634dc5e4311461006a575b600080fd5b34801561003a57600080fd5b5061004e6100493660046101c7565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e610078366004610238565b61014e565b60008060405180602001610090906101a2565b601f1982820381018352601f9091011660408190526100bd908a908a908a908a908a908a90602001610294565b60408051601f19818403018152908290526100db92916020016102fe565b60408051601f1981840301815282825280516020918201206001600160f81b0319828501523060601b6bffffffffffffffffffffffff19166021850152603584019c909c5260558084019c909c528151808403909c018c5260759092019052895199019890982098975050505050505050565b600080348890883389898989604051610166906101a2565b61017596959493929190610294565b82906040518091039083f591505080158015610195573d6000803e3d6000fd5b5098975050505050505050565b611b748061031c83390190565b6001600160a01b03811681146101c457600080fd5b50565b600080600080600080600060e0888a0312156101e257600080fd5b8735965060208801356101f4816101af565b95506040880135610204816101af565b945060608801359350608088013561021b816101af565b9699959850939692959460a0840135945060c09093013592915050565b60008060008060008060c0878903121561025157600080fd5b863595506020870135610263816101af565b945060408701359350606087013561027a816101af565b9598949750929560808101359460a0909101359350915050565b6001600160a01b0396871681529486166020860152604085019390935293166060830152608082019290925260a081019190915260c00190565b6000815160005b818110156102ef57602081850181015186830152016102d5565b50600093019283525090919050565b600061031361030d83866102ce565b846102ce565b94935050505056fe61014060405260405162001b7438038062001b7483398101604081905262000027916200010c565b6001600160a01b0380871660c05285811660a052831660e05261010084905260808290526200005781426200017c565b610120526040518481526001600160a01b0380851691878216918916907f4f05be72ad7f57c27e555ace8452f56d8b1e82c9e6e1cd4fd282f34518b7729a9060200160405180910390a46040517329fe8914e76da5ce2d90de98a64d0055f199d06d906000906729a2241af62c00009082818181858883f19350505050158015620000e6573d6000803e3d6000fd5b50505050505050620001a4565b6001600160a01b03811681146200010957600080fd5b50565b60008060008060008060c087890312156200012657600080fd5b86516200013381620000f3565b60208801519096506200014681620000f3565b6040880151606089015191965094506200016081620000f3565b809350506080870151915060a087015190509295509295509295565b808201808211156200019e57634e487b7160e01b600052601160045260246000fd5b92915050565b60805160a05160c05160e0516101005161012051611876620002fe60003960008181610298015281816103190152818161047f0152818161074d0152818161091f01528181610b220152818161105301526114cb01526000818161025501528181610d3b01528181610d6f0152610f670152600081816102da015281816103b4015281816105de015281816106850152610e0f0152600081816101f3015281816103870152818161057c015281816106000152818161065d01528181610c3401528181610f1a0152818161127e015261135401526000818161034e015281816104a601528181610621015281816106ad015281816107760152818161089801528181610962015281816109e801528181610afc01528181610c8901528181610f45015281816110f50152818161117f01526112e101526000818161017e0152818161052c015281816107fe015261085a01526118766000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063a035b1fe116100c3578063e5a6b10f1161007c578063e5a6b10f146102d5578063ea8a1af0146102fc578063f6c8c41e14610304578063fa7f1bae14610317578063fb286c6514610340578063fc0c546a1461034957600080fd5b8063a035b1fe14610250578063b5b47f4214610277578063bd3bc1d314610280578063ddbe8f0914610293578063e1a1810f146102ba578063e3ac83da146102cd57600080fd5b80635051a5ec116101155780635051a5ec146101de57806361461954146101e65780637150d8ae146101ee5780638f1b4c6f1461022d57806390cf581c146102405780639b4e88aa1461024857600080fd5b806311a439a01461015d5780631703a01814610179578063354e5629146101a05780633f5e3e7f146101a957806341c12a70146101c1578063448ab4c6146101cb575b600080fd5b61016660045481565b6040519081526020015b60405180910390f35b6101667f000000000000000000000000000000000000000000000000000000000000000081565b61016660035481565b6101b1610370565b6040519015158152602001610170565b6101c9610436565b005b6101b16101d9366004611683565b610442565b6101b161047b565b6101c9610577565b6102157f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610170565b6101b161023b366004611683565b610736565b6101c961073f565b6101b1610749565b6101667f000000000000000000000000000000000000000000000000000000000000000081565b61016660025481565b6101c961028e3660046116a0565b610893565b6101667f000000000000000000000000000000000000000000000000000000000000000081565b6101c96102c83660046116c2565b610af7565b6101c9610b84565b6102157f000000000000000000000000000000000000000000000000000000000000000081565b6101c9610c2f565b6101c9610312366004611683565b610c84565b7f00000000000000000000000000000000000000000000000000000000000000004211156101b1565b61016660015481565b6102157f000000000000000000000000000000000000000000000000000000000000000081565b6040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156103fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041f9190611703565b9050600061042b610f03565b919091111592915050565b6104406002611051565b565b600060015b6001600160a01b03831660009081526020819052604090205460ff1660028111156104745761047461171c565b1492915050565b60007f00000000000000000000000000000000000000000000000000000000000000004211610567577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105269190611703565b610550907f0000000000000000000000000000000000000000000000000000000000000000611748565b6127106001546105609190611748565b1015905090565b600254600154610526919061175f565b6105a07f00000000000000000000000000000000000000000000000000000000000000006111f1565b6105a861047b565b6105c55760405163d652cf2960e01b815260040160405180910390fd5b60006105cf610f03565b90506106466001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008461121c565b604051637e5bcd3f60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063fcb79a7e90604401600060405180830381600087803b1580156106f157600080fd5b505af1158015610705573d6000803e3d6000fd5b505050506107336001604051806040016040528060078152602001667375636365737360c81b81525061127c565b50565b60006002610447565b6104406001611051565b60007f000000000000000000000000000000000000000000000000000000000000000042116108445760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f69190611703565b9050610822817f0000000000000000000000000000000000000000000000000000000000000000611748565b612710600254836108339190611772565b61083d9190611748565b1091505090565b600254600154610854919061175f565b61087e907f0000000000000000000000000000000000000000000000000000000000000000611748565b60015461088d90612710611748565b10905090565b61091d7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109189190611785565b6111f1565b7f000000000000000000000000000000000000000000000000000000000000000042111561095e576040516317189a8360e31b815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630a81b2de6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e29190611703565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a689190611703565b610a72848661175f565b610a7c919061175f565b905081811115610aae576040516344ec605760e11b815260048101839052602481018290526044015b60405180910390fd5b83600454600154610abf9190611772565b610ac9919061175f565b6001556003546002548491610add91611772565b610ae7919061175f565b6002555050600491909155600355565b610b207f00000000000000000000000000000000000000000000000000000000000000006111f1565b7f00000000000000000000000000000000000000000000000000000000000000004211610b7f576001600160a01b0380841660009081526020819052604080822054928516825290205460ff9182169116610b7c82828561137e565b50505b505050565b610b8c6114c0565b15610bbb57610440600060405180604001604052806007815260200166195e1c1a5c995960ca1b81525061127c565b610bc3610749565b15610bf357610440600060405180604001604052806008815260200167191958db1a5b995960c21b81525061127c565b610bfb610370565b6104405761044060006040518060400160405280600d81526020016c6c61636b206f662066756e647360981b81525061127c565b610c587f00000000000000000000000000000000000000000000000000000000000000006111f1565b61044060006040518060400160405280600981526020016818d85b98d95b1b195960ba1b81525061127c565b610cad7f00000000000000000000000000000000000000000000000000000000000000006111f1565b610cb561047b565b15610cd357604051635fea7a8560e11b815260040160405180910390fd5b6000816001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d379190611703565b90507f00000000000000000000000000000000000000000000000000000000000000008111610da257604051633c0e47bd60e21b81527f0000000000000000000000000000000000000000000000000000000000000000600482015260248101829052604401610aa5565b816001600160a01b031663e5a6b10f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e049190611785565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610e555760405163497b781f60e11b815260040160405180910390fd5b816001600160a01b0316633f5e3e7f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb791906117a2565b610ed4576040516375677ae960e01b815260040160405180910390fd5b610eff6000604051806040016040528060088152602001671c995c1b1858d95960c21b81525061127c565b5050565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000091908316906370a0823190602401602060405180830381865afa158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd59190611703565b826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611013573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110379190611703565b6110419190611772565b61104b9190611748565b91505090565b7f0000000000000000000000000000000000000000000000000000000000000000421115611092576040516317189a8360e31b815260040160405180910390fd5b336000908152602081905260409020805460ff811691839160ff191660018360028111156110c2576110c261171c565b021790555060008160028111156110db576110db61171c565b0361115a576040516345c8a62b60e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906345c8a62b90602401600060405180830381600087803b15801561114157600080fd5b505af1158015611155573d6000803e3d6000fd5b505050505b60405163603a39fb60e11b8152336004820152610eff90829084906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c07473f6906024016020604051808303816000875af11580156111c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ec9190611703565b61137e565b336001600160a01b038216146107335760405163d600708f60e01b8152336004820152602401610aa5565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526112769085906114f6565b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167fba01adb1638f647e6baa43cb5d8d3a05ed7e59ac18415bf4c64adba235c5b2b083836040516112d79291906117e8565b60405180910390a27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166332bc320b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561133a57600080fd5b505af115801561134e573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316ff5b8160028111156113905761139061171c565b8360028111156113a2576113a261171c565b14610b7f5760028360028111156113bb576113bb61171c565b036113dd5780600260008282546113d29190611772565b9091555061140e9050565b60018360028111156113f1576113f161171c565b0361140e5780600160008282546114089190611772565b90915550505b60028260028111156114225761142261171c565b03611444578060026000828254611439919061175f565b909155506114759050565b60018260028111156114585761145861171c565b0361147557806001600082825461146f919061175f565b90915550505b7f8fcc50c2c4edd06d51ae66e9e21ed76b32a1766c57f491788e1aa24a1b58c2566001546002546040516114b3929190918252602082015260400190565b60405180910390a1505050565b60006114ef62278d007f000000000000000000000000000000000000000000000000000000000000000061175f565b4211905090565b600061150b6001600160a01b03841683611559565b9050805160001415801561153057508080602001905181019061152e91906117a2565b155b15610b7f57604051635274afe760e01b81526001600160a01b0384166004820152602401610aa5565b606061156783836000611570565b90505b92915050565b6060825160001415801561158c57506001600160a01b0384163b155b156115b557604051639eb1341360e01b81526001600160a01b0385166004820152602401610aa5565b600080856001600160a01b031684866040516115d19190611824565b60006040518083038185875af1925050503d806000811461160e576040519150601f19603f3d011682016040523d82523d6000602084013e611613565b606091505b509150915081156116275791506116679050565b80511561163657805160208201fd5b60405162461bcd60e51b815260206004820152600660248201526519985a5b195960d21b6044820152606401610aa5565b9392505050565b6001600160a01b038116811461073357600080fd5b60006020828403121561169557600080fd5b81356116678161166e565b600080604083850312156116b357600080fd5b50508035926020909101359150565b6000806000606084860312156116d757600080fd5b83356116e28161166e565b925060208401356116f28161166e565b929592945050506040919091013590565b60006020828403121561171557600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761156a5761156a611732565b8082018082111561156a5761156a611732565b8181038181111561156a5761156a611732565b60006020828403121561179757600080fd5b81516116678161166e565b6000602082840312156117b457600080fd5b8151801515811461166757600080fd5b60005b838110156117df5781810151838201526020016117c7565b50506000910152565b8215158152604060208201526000825180604084015261180f8160608501602087016117c4565b601f01601f1916919091016060019392505050565b600082516118368184602087016117c4565b919091019291505056fea2646970667358221220227039d0ffe57fc61ad899b5ada30383ca93741a1e08e960a931fd8be522224464736f6c63430008150033a2646970667358221220633a473e62d15156a4a1cf772c9b67c0a3a594d56b5502d9fa54f08511e457de64736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}