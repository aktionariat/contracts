{
  "address": "0x95590998c2E30F3CfAAa9646691C86719dad0A26",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract SignatureTransfer",
          "name": "_transfer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidFiller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OfferTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenMismatch",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "filler",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "amountOut",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint160",
          "name": "amountIn",
          "type": "uint160"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "exp",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "nonce",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "IntentSignal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Trade",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract PaymentHub",
          "name": "hub",
          "type": "address"
        },
        {
          "internalType": "contract IBrokerbot",
          "name": "bot",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "filler",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountOut",
              "type": "uint160"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountIn",
              "type": "uint160"
            },
            {
              "internalType": "uint48",
              "name": "expiration",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "nonce",
              "type": "uint48"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Intent",
          "name": "intent",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "investAmount",
          "type": "uint256"
        }
      ],
      "name": "buyFromBrokerbot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBrokerbot",
          "name": "bot",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "filler",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountOut",
              "type": "uint160"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountIn",
              "type": "uint160"
            },
            {
              "internalType": "uint48",
              "name": "expiration",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "nonce",
              "type": "uint48"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Intent",
          "name": "intent",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyFromBrokerbot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "filler",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountOut",
              "type": "uint160"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountIn",
              "type": "uint160"
            },
            {
              "internalType": "uint48",
              "name": "expiration",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "nonce",
              "type": "uint48"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Intent",
          "name": "intent",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getAsk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "filler",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountOut",
              "type": "uint160"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountIn",
              "type": "uint160"
            },
            {
              "internalType": "uint48",
              "name": "expiration",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "nonce",
              "type": "uint48"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Intent",
          "name": "intent",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "filler",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountOut",
              "type": "uint160"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountIn",
              "type": "uint160"
            },
            {
              "internalType": "uint48",
              "name": "expiration",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "nonce",
              "type": "uint48"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Intent",
          "name": "sellerIntent",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "filler",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountOut",
              "type": "uint160"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountIn",
              "type": "uint160"
            },
            {
              "internalType": "uint48",
              "name": "expiration",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "nonce",
              "type": "uint48"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Intent",
          "name": "buyerIntent",
          "type": "tuple"
        }
      ],
      "name": "getMaxValidAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "filler",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountOut",
              "type": "uint160"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountIn",
              "type": "uint160"
            },
            {
              "internalType": "uint48",
              "name": "expiration",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "nonce",
              "type": "uint48"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Intent",
          "name": "sellerIntent",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "sellerSig",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "filler",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountOut",
              "type": "uint160"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountIn",
              "type": "uint160"
            },
            {
              "internalType": "uint48",
              "name": "expiration",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "nonce",
              "type": "uint48"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Intent",
          "name": "buyerIntent",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "buyerSig",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "process",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "filler",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountOut",
              "type": "uint160"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountIn",
              "type": "uint160"
            },
            {
              "internalType": "uint48",
              "name": "expiration",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "nonce",
              "type": "uint48"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Intent",
          "name": "sellerIntent",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "sellerSig",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "filler",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountOut",
              "type": "uint160"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountIn",
              "type": "uint160"
            },
            {
              "internalType": "uint48",
              "name": "expiration",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "nonce",
              "type": "uint48"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Intent",
          "name": "buyerIntent",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "buyerSig",
          "type": "bytes"
        }
      ],
      "name": "process",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBrokerbot",
          "name": "bot",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "filler",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountOut",
              "type": "uint160"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountIn",
              "type": "uint160"
            },
            {
              "internalType": "uint48",
              "name": "expiration",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "nonce",
              "type": "uint48"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Intent",
          "name": "intent",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "soldShares",
          "type": "uint256"
        }
      ],
      "name": "sellToBrokerbot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PaymentHub",
          "name": "hub",
          "type": "address"
        },
        {
          "internalType": "contract IBrokerbot",
          "name": "bot",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "filler",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountOut",
              "type": "uint160"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountIn",
              "type": "uint160"
            },
            {
              "internalType": "uint48",
              "name": "expiration",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "nonce",
              "type": "uint48"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Intent",
          "name": "intent",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "soldShares",
          "type": "uint256"
        }
      ],
      "name": "sellToBrokerbot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "filler",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountOut",
              "type": "uint160"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint160",
              "name": "amountIn",
              "type": "uint160"
            },
            {
              "internalType": "uint48",
              "name": "expiration",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "nonce",
              "type": "uint48"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Intent",
          "name": "intent",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "signalIntent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "contract SignatureTransfer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x49a1e54a95388503db54037fd4a4db4b34ab8360f94b05a8e5bb002cfc92ba03",
  "receipt": {
    "to": null,
    "from": "0x447ffD9a116efb3D77f47802cc4869C3730f723C",
    "contractAddress": "0x95590998c2E30F3CfAAa9646691C86719dad0A26",
    "transactionIndex": 283,
    "gasUsed": "1690694",
    "logsBloom": "0x
    "blockHash": "0x2953061e3d961aa556dffe11d51b16216f6e48287d08627c8db584c5fe8628bb",
    "transactionHash": "0x49a1e54a95388503db54037fd4a4db4b34ab8360f94b05a8e5bb002cfc92ba03",
    "logs": [
      {
        "transactionIndex": 283,
        "blockNumber": 54696963,
        "transactionHash": "0x49a1e54a95388503db54037fd4a4db4b34ab8360f94b05a8e5bb002cfc92ba03",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000447ffd9a116efb3d77f47802cc4869c3730f723c",
          "0x000000000000000000000000957ef9a930a80e7553ba261220976f3276df3c9e"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000601ad5f4b3c000000000000000000000000000000000000000000000000001ff3658b553b4722000000000000000000000000000000000000000000000061479d48cf6afe3c400000000000000000000000000000000000000000000000001fed63ddf5f00b2200000000000000000000000000000000000000000000006147a34a7cca497840",
        "logIndex": 644,
        "blockHash": "0x2953061e3d961aa556dffe11d51b16216f6e48287d08627c8db584c5fe8628bb"
      }
    ],
    "blockNumber": 54696963,
    "cumulativeGasUsed": "23474878",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7F32339263906f639e2a883603ff88C2658451d2"
  ],
  "numDeployments": 1,
  "solcInputHash": "3e473bf99a1e7b7e4b3feb6552bf7ee8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract SignatureTransfer\",\"name\":\"_transfer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidFiller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OfferTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"amountOut\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"amountIn\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"exp\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"IntentSignal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract PaymentHub\",\"name\":\"hub\",\"type\":\"address\"},{\"internalType\":\"contract IBrokerbot\",\"name\":\"bot\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountOut\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountIn\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"investAmount\",\"type\":\"uint256\"}],\"name\":\"buyFromBrokerbot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBrokerbot\",\"name\":\"bot\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountOut\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountIn\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyFromBrokerbot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountOut\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountIn\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAsk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountOut\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountIn\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountOut\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountIn\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Intent\",\"name\":\"sellerIntent\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountOut\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountIn\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Intent\",\"name\":\"buyerIntent\",\"type\":\"tuple\"}],\"name\":\"getMaxValidAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountOut\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountIn\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Intent\",\"name\":\"sellerIntent\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sellerSig\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountOut\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountIn\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Intent\",\"name\":\"buyerIntent\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"buyerSig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"process\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountOut\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountIn\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Intent\",\"name\":\"sellerIntent\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sellerSig\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountOut\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountIn\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Intent\",\"name\":\"buyerIntent\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"buyerSig\",\"type\":\"bytes\"}],\"name\":\"process\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBrokerbot\",\"name\":\"bot\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountOut\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountIn\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"soldShares\",\"type\":\"uint256\"}],\"name\":\"sellToBrokerbot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PaymentHub\",\"name\":\"hub\",\"type\":\"address\"},{\"internalType\":\"contract IBrokerbot\",\"name\":\"bot\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountOut\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountIn\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"soldShares\",\"type\":\"uint256\"}],\"name\":\"sellToBrokerbot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountOut\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amountIn\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"signalIntent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"contract SignatureTransfer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract uses the SignatureTransfer contract for secure transfers with signatures.\",\"events\":{\"IntentSignal(address,address,address,uint160,address,uint160,uint48,uint48,bytes,bytes)\":{\"details\":\"Emitted when an intent to trade is signaled.\",\"params\":{\"amountIn\":\"The amount of the tokenIn the owner wants to receive.\",\"amountOut\":\"The amount of the tokenOut the owner wants to sell or exchange.\",\"data\":\"Additional data that may be used in the trade execution.\",\"exp\":\"The expiration time of the intent.\",\"filler\":\"The address of the filler, if any, that the intent is specifically directed to.\",\"nonce\":\"A nonce to ensure the uniqueness of the intent.\",\"owner\":\"The address of the intent owner.\",\"signature\":\"The signature of the owner authorizing the intent.\",\"tokenIn\":\"The address of the token the owner wants to receive in exchange.\",\"tokenOut\":\"The address of the token the owner wants to sell or exchange.\"}}},\"kind\":\"dev\",\"methods\":{\"buyFromBrokerbot(address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)\":{\"details\":\"This function allows a user to buy tokens from a Brokerbot by transferring the specified amount of investment token to the Brokerbot and receiving the purchased tokens in return. The function ensures that the offer is not too low by comparing the invested amount to the bid price.\",\"params\":{\"amount\":\"The amount of tokens to invest in the purchase.\",\"bot\":\"The Brokerbot from which tokens are being bought.\",\"intent\":\"The trade intent data structure.\",\"signature\":\"The signature of the intent owner.\"},\"returns\":{\"_0\":\"The amount of tokens received from the Brokerbot.\"}},\"buyFromBrokerbot(address,address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)\":{\"details\":\"This function allows a user to buy tokens from a Brokerbot through a specified PaymentHub. It transfers the specified amount of investment token to the Brokerbot and receives the purchased tokens in return. The function ensures that the offer is not too low by comparing the invested amount to the bid price.\",\"params\":{\"bot\":\"The Brokerbot from which tokens are being bought.\",\"hub\":\"The PaymentHub through which the transaction is processed.\",\"intent\":\"The trade intent data structure.\",\"investAmount\":\"The amount of tokens to invest in the purchase.\",\"signature\":\"The signature of the intent owner.\"},\"returns\":{\"_0\":\"The amount of tokens received from the Brokerbot.\"}},\"getAsk((address,address,address,uint160,address,uint160,uint48,uint48,bytes),uint256)\":{\"details\":\"Ideally called with an intent where tokenIn is a currency with many (e.g. 18) decimals.TokenOut can have very few decimals.\",\"params\":{\"amount\":\"The amount of tokenOut.\",\"intent\":\"The trade intent data structure.\"},\"returns\":{\"_0\":\"The calculated asking price.\"}},\"getBid((address,address,address,uint160,address,uint160,uint48,uint48,bytes),uint256)\":{\"details\":\"Ideally called with an intent where tokenOut is a currency with many (e.g. 18) decimals.TokenIn can have very few decimals.\",\"params\":{\"amount\":\"The amount of tokenIn.\",\"intent\":\"The trade intent data structure.\"},\"returns\":{\"_0\":\"The calculated bidding price.\"}},\"getMaxValidAmount((address,address,address,uint160,address,uint160,uint48,uint48,bytes),(address,address,address,uint160,address,uint160,uint48,uint48,bytes))\":{\"params\":{\"buyerIntent\":\"The buyer's trade intent.\",\"sellerIntent\":\"The seller's trade intent.\"},\"returns\":{\"_0\":\"The maximum valid trade amount.\"}},\"process(address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes)\":{\"params\":{\"buyerIntent\":\"The buyer's trade intent.\",\"buyerSig\":\"The buyer's signature.\",\"feeRecipient\":\"The address that will receive the fee.\",\"sellerIntent\":\"The seller's trade intent.\",\"sellerSig\":\"The seller's signature.\"}},\"process(address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)\":{\"params\":{\"amount\":\"The amount of the token to trade.\",\"buyerIntent\":\"The buyer's trade intent.\",\"buyerSig\":\"The buyer's signature.\",\"feeRecipient\":\"The address that will receive the fee.\",\"sellerIntent\":\"The seller's trade intent.\",\"sellerSig\":\"The seller's signature.\"}},\"sellToBrokerbot(address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)\":{\"details\":\"This function allows a user to sell tokens to a Brokerbot by transferring the specified amount of tokens to the Brokerbot and receiving the payment in return. The function ensures that the received amount is not lower than the ask price.\",\"params\":{\"bot\":\"The Brokerbot to which tokens are being sold.\",\"intent\":\"The trade intent data structure.\",\"signature\":\"The signature of the intent owner.\",\"soldShares\":\"The amount of tokens being sold.\"},\"returns\":{\"_0\":\"The amount of payment received from the Brokerbot.\"}},\"sellToBrokerbot(address,address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)\":{\"details\":\"This function allows a user to sell tokens to a Brokerbot through a specified PaymentHub. It transfers the specified amount of tokens to the Brokerbot and receives the payment in return. The function ensures that the received amount is not lower than the ask price.\",\"params\":{\"bot\":\"The Brokerbot to which tokens are being sold.\",\"hub\":\"The PaymentHub through which the transaction is processed.\",\"intent\":\"The trade intent data structure.\",\"signature\":\"The signature of the intent owner.\",\"soldShares\":\"The amount of tokens being sold.\"},\"returns\":{\"_0\":\"The amount of payment received from the Brokerbot.\"}},\"signalIntent((address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes)\":{\"params\":{\"intent\":\"The trade intent data structure. \",\"signature\":\"The signature of the intent owner.\"}}},\"title\":\"TradeReactor Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyFromBrokerbot(address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)\":{\"notice\":\"Buys tokens from a Brokerbot.\"},\"buyFromBrokerbot(address,address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)\":{\"notice\":\"Buys tokens from a Brokerbot using a specific PaymentHub.\"},\"getAsk((address,address,address,uint160,address,uint160,uint48,uint48,bytes),uint256)\":{\"notice\":\"Calculates the asking price for a given amount of tokenOut.\"},\"getBid((address,address,address,uint160,address,uint160,uint48,uint48,bytes),uint256)\":{\"notice\":\"Calculates the bidding price for a given amount of tokenIn.\"},\"getMaxValidAmount((address,address,address,uint160,address,uint160,uint48,uint48,bytes),(address,address,address,uint160,address,uint160,uint48,uint48,bytes))\":{\"notice\":\"Determines the maximum valid amount that can be traded based on seller and buyer intents.\"},\"process(address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes)\":{\"notice\":\"Processes a trade between a seller and a buyer with the maximum valid amount.\"},\"process(address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)\":{\"notice\":\"Processes a trade between a seller and a buyer for a specified amount.\"},\"sellToBrokerbot(address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)\":{\"notice\":\"Sells tokens to a Brokerbot.\"},\"sellToBrokerbot(address,address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)\":{\"notice\":\"Sells tokens to a Brokerbot using a specific PaymentHub.\"},\"signalIntent((address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes)\":{\"notice\":\"A function to publicly signal an intent to buy or sell a token so it can be picked up by the filler for processing. Alternaticely, the owner can directly communicate with the filler, without recording the intent on chain.\"}},\"notice\":\"This contract handles the signaling and processing of trade intents between buyers and sellers.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/brokerbot/TradeReactor.sol\":\"TradeReactor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"},\"src/ERC20/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0x2224189bcdeb28cbadfdb8d126c278df60ec39875c7929e7ffa9e2055cded960\",\"license\":\"MIT\"},\"src/ERC20/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit is IERC20 {\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n\\t//////////////////////////////////////////////////////////////*/\\n    /// Block timestamp must to be before deadline.\\n    /// @param deadline The deadline of the permit.\\n    /// @param blockTimestamp The timestamp of the execution block.\\n    error Permit_DeadlineExpired(uint256 deadline, uint256 blockTimestamp);\\n    /// Recovered address must be owner and not zero address.\\n    /// @param signerAddress The recovered signer address.\\n    error Permit_InvalidSigner(address signerAddress);\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\",\"keccak256\":\"0x9c6c4c49deffc8176f13b34150dd580526b45dd85ce1b71fe2ed340ff0489ebd\",\"license\":\"MIT\"},\"src/brokerbot/IBrokerbot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../ERC20/IERC20Permit.sol\\\";\\n\\ninterface IBrokerbot {\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n  //////////////////////////////////////////////////////////////*/\\n  error Brokerbot_BuyingDisabled();\\n  error Brokerbot_SellingDisabled();\\n  /// Sender(msg.sender) has to be incoming token or paymenthub.\\n  /// @param sender The msg.sender.\\n  error Brokerbot_InvalidSender(address sender);\\n  /// target.call() wasn't successful.\\n  /// @param target The receiver of the Eth.\\n  /// @param amount The withdraw amount.\\n  error Brokerbot_WithdrawFailed(address target, uint256 amount);\\n  /// Sender(msg.sender) needs to be owner or paymenthub.\\n  /// @param sender The msg.sender.\\n  error Brokerbot_NotAuthorized(address sender);\\n\\n  function paymenthub() external view returns (address);\\n\\n  function base() external view returns (IERC20);\\n\\n  function token() external view returns (IERC20Permit);\\n  \\n  function settings() external view returns (uint256);\\n\\n  // @return The amount of shares bought on buying or how much in the base currency is transfered on selling\\n  function processIncoming(IERC20 token_, address from, uint256 amount, bytes calldata ref) external payable returns (uint256);\\n\\n  function getBuyPrice(uint256 shares) external view returns (uint256);\\n\\n  function getSellPrice(uint256 shares) external view returns (uint256);\\n\\n}\",\"keccak256\":\"0xb41ad02c5b587309ecd6c84d4677d457e4cdb9f993447e97a605b10ec24de7b5\",\"license\":\"MIT\"},\"src/brokerbot/IUniswapV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from \\n// https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol\\n// https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ninterface IQuoter {\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n    \\n    // solhint-disable-next-line func-name-mixedcase\\n    function WETH9() external view returns (address);\\n}\\n\\ninterface ISwapRouter {\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n    \\n    function refundETH() external payable;\\n}\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xd1fe06efa70710c24624abbfe0ed5ab69a47e9d3ec70734ea6e813711ff69784\",\"license\":\"MIT\"},\"src/brokerbot/PaymentHub.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../ERC20/IERC20Permit.sol\\\";\\nimport \\\"./IUniswapV3.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"./IBrokerbot.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\n\\n/**\\n * A hub for payments. This allows tokens that do not support ERC 677 to enjoy similar functionality,\\n * namely interacting with a token-handling smart contract in one transaction, without having to set an allowance first.\\n * Instead, an allowance needs to be set only once, namely for this contract.\\n * Further, it supports automatic conversion from Ether to the payment currency through Uniswap or the reception of Ether\\n * using the current exchange rate as found in the chainlink oracle.\\n */\\ncontract PaymentHub {\\n\\n    using SafeERC20 for IERC20;\\n\\n    // Version history\\n    // Version 4: added path to pay with any ecr20 via uniswap\\n    // Version 5: added sell via permit\\n    // Version 6: added transferEther function\\n    // Version 7: added sell against eth and erc20, version, add permitinfo/swapinfo struct\\n    // Version 8: use SafeERC20 for transfers\\n    uint8 public constant VERSION = 0x8;\\n\\n    address public trustedForwarder;\\n\\n    uint24 private constant DEFAULT_FEE = 3000;\\n    uint256 private constant DENOMINATOR = 1e8;\\n    address private constant CHF_TOKEN = 0xB4272071eCAdd69d933AdcD19cA99fe80664fc08;\\n\\n    uint8 private constant KEEP_ETHER = 0x4; // copied from brokerbot\\n    \\n    IQuoter private immutable uniswapQuoter;\\n    ISwapRouter private immutable uniswapRouter;\\n    AggregatorV3Interface internal immutable priceFeedCHFUSD;\\n    AggregatorV3Interface internal immutable priceFeedETHUSD;\\n\\n    struct PermitInfo {\\n        uint256 exFee;\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    // event to when new forwarder is set\\n    event ForwarderChanged(address indexed _oldForwarder, address indexed _newForwarder);\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n    //////////////////////////////////////////////////////////////*/\\n    /// Failguard when an erc20 transfer returns false. \\n    error PaymentHub_TransferFailed();\\n    /// Sender not trusted.\\n    /// @param sender The msg.sender of this transaction.\\n    error PaymentHub_InvalidSender(address sender);\\n    /// swap with less base token as required.\\n    /// @param amountBase Required amount.\\n    /// @param swappedAmount Swapped amount.\\n    error PaymentHub_SwapError(uint256 amountBase, uint256 swappedAmount);\\n\\n    constructor(address _trustedForwarder, IQuoter _quoter, ISwapRouter swapRouter, AggregatorV3Interface _aggregatorCHFUSD, AggregatorV3Interface _aggregatorETHUSD) {\\n        trustedForwarder = _trustedForwarder;\\n        uniswapQuoter = _quoter;\\n        uniswapRouter = swapRouter;\\n        priceFeedCHFUSD = _aggregatorCHFUSD;\\n        priceFeedETHUSD = _aggregatorETHUSD;\\n    }\\n\\n    modifier onlySellerAndForwarder(address seller) {\\n        if (msg.sender != trustedForwarder && msg.sender != seller) {\\n            revert PaymentHub_InvalidSender(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyForwarder() {\\n        if (msg.sender != trustedForwarder) {\\n            revert PaymentHub_InvalidSender(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Change the trusted forwarder.\\n     * @param newForwarder The new trusted forwarder.\\n     */\\n     function changeForwarder(address newForwarder) external onlyForwarder {\\n        trustedForwarder = newForwarder;\\n        emit ForwarderChanged(msg.sender, newForwarder);\\n    }\\n\\n    /**  \\n     * Get price in ERC20\\n     * This is the method that the Brokerbot widget should use to quote the price to the user.\\n     * @param amountInBase The amount of the base currency for the exact output.\\n     * @param path The encoded path of the swap from erc20 to base.\\n     * @return amount quoted to pay\\n     */\\n    function getPriceInERC20(uint256 amountInBase, bytes memory path) public returns (uint256) {\\n        return getPriceERC20(amountInBase, path, true);\\n    }\\n    \\n    /**\\n     * @notice Get price for given amount and path swapped via uniswap. \\n     * @param amount The exact amount which you want get out (exactOutput) or you put in (exactInput).\\n     * @param path The path of the swap (inreverse order for exactOutput).\\n     * @param exactOutput True if exactOutput should be used or false if exactInput should be used.\\n     */\\n    function getPriceERC20(uint256 amount, bytes memory path, bool exactOutput) public returns (uint256) {\\n        if (exactOutput) {\\n            return uniswapQuoter.quoteExactOutput(\\n                path,\\n                amount\\n            );\\n        } else {\\n            return uniswapQuoter.quoteExactInput(\\n                path,\\n                amount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Get price in Ether depding on brokerbot setting.\\n     * If keep ETH is set price is from oracle.\\n     * This is the method that the Brokerbot widget should use to quote the price to the user.\\n     * @return The price in wei.\\n     */\\n    function getPriceInEther(uint256 amountInBase, IBrokerbot brokerBot) public returns (uint256) {\\n        if ((address(brokerBot) != address(0)) && hasSettingKeepEther(brokerBot)) {\\n            return getPriceInEtherFromOracle(amountInBase, IBrokerbot(brokerBot).base());\\n        } else {\\n            return uniswapQuoter.quoteExactOutputSingle(uniswapQuoter.WETH9(), address(brokerBot.base()), DEFAULT_FEE, amountInBase, 0);\\n        }\\n    }\\n\\n    /**\\n     * Price in ETH with 18 decimals\\n     */\\n    function getPriceInEtherFromOracle(uint256 amountInBase, IERC20 base) public view returns (uint256) {\\n        if(address(base) == CHF_TOKEN) {\\n            return getLatestPriceCHFUSD() * amountInBase / getLatestPriceETHUSD();\\n        } else {\\n            return amountInBase * DENOMINATOR / getLatestPriceETHUSD();\\n        }\\n    }\\n\\n    /**\\n     * Returns the latest price of eth/usd pair from chainlink with 8 decimals\\n     */\\n    function getLatestPriceETHUSD() public view returns (uint256) {\\n        (, int256 price, , , ) = priceFeedETHUSD.latestRoundData();\\n        return uint256(price);\\n    }\\n\\n    /**\\n     * Returns the latest price of chf/usd pair from chainlink with 8 decimals\\n     */\\n    function getLatestPriceCHFUSD() public view returns (uint256) {\\n        (, int256 price, , , ) = priceFeedCHFUSD.latestRoundData();\\n        return uint256(price);\\n    }\\n\\n    /**\\n     * Convenience method to swap ether into base and pay a target address\\n     */\\n    function payFromEther(address recipient, uint256 amountInBase, IERC20 base) public payable returns (uint256 amountIn) {\\n        ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter.ExactOutputSingleParams(\\n            // rely on time stamp is ok, no exact time stamp needed\\n            // solhint-disable-next-line not-rely-on-time\\n            uniswapQuoter.WETH9(), address(base), DEFAULT_FEE, recipient, block.timestamp, amountInBase, msg.value, 0);\\n\\n        ISwapRouter swapRouter = uniswapRouter;\\n        // Executes the swap returning the amountIn needed to spend to receive the desired amountOut.\\n        amountIn = swapRouter.exactOutputSingle{value: msg.value}(params);\\n\\n        // For exact output swaps, the amountInMaximum may not have all been spent.\\n        // If the actual amount spent (amountIn) is less than the specified maximum amount, we must refund the msg.sender and approve the swapRouter to spend 0.\\n        if (amountIn < msg.value) {\\n            swapRouter.refundETH();\\n            (bool success, ) = msg.sender.call{value:msg.value - amountIn}(\\\"\\\"); // return change\\n            if (!success) {\\n                revert PaymentHub_TransferFailed();\\n            }\\n        }\\n    }\\n\\n    /// @dev The calling address must approve this contract to spend its ERC20 for this function to succeed. As the amount of input ERC20 is variable,\\n    /// the calling address will need to approve for a slightly higher or infinit amount, anticipating some variance.\\n    /// @param amountOut The desired amount of baseCurrency.\\n    /// @param amountInMaximum The maximum amount of ERC20 willing to be swapped for the specified amountOut of baseCurrency.\\n    /// @param erc20In The address of the erc20 token to pay with.\\n    /// @param path The encoded path of the swap from erc20 to base.\\n    /// @param recipient The reciving address - brokerbot.\\n    /// @return amountIn The amountIn of ERC20 actually spent to receive the desired amountOut.\\n    function payFromERC20(uint256 amountOut, uint256 amountInMaximum, address erc20In, bytes memory path, address recipient) public returns (uint256 amountIn) {\\n        ISwapRouter swapRouter = uniswapRouter;\\n        // Transfer the specified `amountInMaximum` to this contract.\\n        IERC20(erc20In).safeTransferFrom(msg.sender, address(this), amountInMaximum);\\n\\n        // The parameter path is encoded as (tokenOut, fee, tokenIn/tokenOut, fee, tokenIn)\\n        ISwapRouter.ExactOutputParams memory params =\\n            ISwapRouter.ExactOutputParams({\\n                path: path,\\n                recipient: recipient,\\n                // solhint-disable-next-line not-rely-on-time\\n                deadline: block.timestamp,\\n                amountOut: amountOut,\\n                amountInMaximum: amountInMaximum\\n            });\\n\\n        // Executes the swap, returning the amountIn actually spent.\\n        amountIn = swapRouter.exactOutput(params);\\n\\n        // If the swap did not require the full amountInMaximum to achieve the exact amountOut then we refund msg.sender and approve the router to spend 0.\\n        if (amountIn < amountInMaximum) {\\n            IERC20(erc20In).safeTransfer(msg.sender, amountInMaximum - amountIn);\\n        }\\n    }\\n\\n    ///This function appoves infinite allowance for Uniswap, this is safe as the paymenthub should never hold any token (see also recover() ).\\n    ///@dev This function needs to be called before using the PaymentHub the first time with a new ERC20 token.\\n    ///@param erc20In The erc20 addresse to approve.\\n    function approveERC20(address erc20In) external {\\n        IERC20(erc20In).approve(address(uniswapRouter), type(uint256).max);\\n    }\\n\\n    function multiPay(IERC20 token, address[] calldata recipients, uint256[] calldata amounts) public {\\n        for (uint i=0; i<recipients.length; i++) {\\n            IERC20(token).safeTransferFrom(msg.sender, recipients[i], amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * Can (at least in theory) save some gas as the sender balance only is touched in one transaction.\\n     */\\n    function multiPayAndNotify(IERC20 token, IBrokerbot[] calldata brokerbots, uint256[] calldata amounts, bytes calldata ref) external {\\n        for (uint i=0; i<brokerbots.length; i++) {\\n            payAndNotify(token, brokerbots[i], amounts[i], ref);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows to make a base currency payment from the sender to the brokerbot, given an allowance to this contract.\\n     * @dev Equivalent to xchf.transferAndCall(brokerbot, amountInBase)\\n     * @param brokerbot The brokerbot to pay and receive the shares from.\\n     * @param amountInBase The amount of base currency used to buy shares.\\n     * @param ref The reference data blob.\\n     * @return The amount of shares bought\\n     */\\n    function payAndNotify(IBrokerbot brokerbot, uint256 amountInBase, bytes calldata ref) external returns (uint256) {\\n        return payAndNotify(brokerbot.base(), brokerbot, amountInBase, ref);\\n    }\\n\\n    function payAndNotify(IERC20 token, IBrokerbot brokerbot, uint256 amount, bytes calldata ref) public returns (uint256) {\\n        token.safeTransferFrom(msg.sender, address(brokerbot), amount);\\n        return brokerbot.processIncoming(token, msg.sender, amount, ref);\\n    }\\n\\n    /**\\n     * @notice Pay with Ether to buy shares.\\n     * @param brokerbot The brokerbot to pay and receive the shares from.\\n     * @param amountInBase The amount of base currency used to buy shares.\\n     * @param ref The reference data blob.\\n     * @return priceInEther The amount of Ether spent.\\n     * @return sharesOut The amount of shares bought.\\n     */\\n    function payFromEtherAndNotify(IBrokerbot brokerbot, uint256 amountInBase, bytes calldata ref) external payable returns (uint256 priceInEther, uint256 sharesOut) {\\n        IERC20 base = brokerbot.base();\\n        // Check if the brokerbot has setting to keep ETH\\n        if (hasSettingKeepEther(brokerbot)) {\\n            priceInEther = getPriceInEtherFromOracle(amountInBase, base);\\n            sharesOut = brokerbot.processIncoming{value: priceInEther}(base, msg.sender, amountInBase, ref);\\n\\n            // Pay back ETH that was overpaid\\n            if (priceInEther < msg.value) {\\n                (bool success, ) = msg.sender.call{value:msg.value - priceInEther}(\\\"\\\"); // return change\\n                if (!success) {\\n                    revert PaymentHub_TransferFailed();\\n                }\\n            }\\n\\n        } else {\\n            priceInEther = payFromEther(address(brokerbot), amountInBase, base);\\n            sharesOut = brokerbot.processIncoming(base, msg.sender, amountInBase, ref);\\n        }\\n    }\\n\\n    /***\\n     * @notice Pay from any ERC20 token (which has Uniswapv3 ERC20-ETH pool) and send swapped base currency to brokerbot.\\n     * @notice The needed amount needs to be approved at the ERC20 contract beforehand\\n     * @param brokerbot The brokerbot to pay and receive the shares from.\\n     * @param amountBase The amount of base currency used to buy shares.\\n     * @param erc20 The address of the ERC20 token to pay.\\n     * @param amountInMaximum The maximum amount of the ERC20 to pay (should include some slippage).\\n     * @param path The encoded path of the swap from erc20 to base currency.\\n     * @param ref Reference data blob.\\n     * @return amountIn The amount erc20 spent to buy shares.\\n     * @return amountOut The amount of shares received by the brokerbot.\\n     */\\n    function payFromERC20AndNotify(IBrokerbot brokerbot, uint256 amountBase, address erc20, uint256 amountInMaximum, bytes memory path, bytes calldata ref) external returns (uint256 amountIn, uint256 amountOut) {\\n        IERC20 base = brokerbot.base();\\n        uint256 balanceBefore = IERC20(base).balanceOf(address(brokerbot));\\n        amountIn = payFromERC20(amountBase, amountInMaximum, erc20, path, address(brokerbot));\\n        uint256 balanceAfter = IERC20(base).balanceOf(address(brokerbot));\\n        if (amountBase != (balanceAfter - balanceBefore)) {\\n            revert PaymentHub_SwapError(amountBase, balanceAfter - balanceBefore);\\n        }        \\n        amountOut = brokerbot.processIncoming(base, msg.sender, balanceAfter - balanceBefore, ref);\\n    }\\n\\n    /**\\n     * @notice Sell shares with permit\\n     * @param brokerbot The brokerbot to recive the shares.\\n     * @param seller The address of the seller.\\n     * @param recipient The address of the recipient of the sell preceeds.\\n     * @param amountToSell The amount the seller wants to sell.\\n     * @param ref Reference e.g. insider declaration and the type of sell.\\n     * @param permitInfo Information about the permit.\\n     * @return The base currency amount for the selling of the shares.\\n     */\\n    function sellSharesWithPermit(IBrokerbot brokerbot, IERC20Permit shares, address seller, address recipient, uint256 amountToSell, bytes calldata ref, PermitInfo calldata permitInfo) public onlySellerAndForwarder(seller) returns (uint256) {\\n        // Call permit to set allowance\\n        shares.permit(seller, address(this), amountToSell, permitInfo.deadline, permitInfo.v, permitInfo.r,permitInfo.s);\\n        // process sell\\n        if (permitInfo.exFee > 0){\\n            uint256 proceeds = _sellShares(brokerbot, shares, seller, address(this), amountToSell, ref);\\n            IERC20 currency = brokerbot.base();\\n            currency.safeTransfer(msg.sender, permitInfo.exFee);\\n            currency.safeTransfer(recipient, proceeds - permitInfo.exFee);\\n            return proceeds - permitInfo.exFee;\\n        } else {\\n            return _sellShares(brokerbot, shares, seller, recipient, amountToSell, ref);\\n        }\\n    }\\n\\n    /**\\n     * @notice With this function a user can sell shares with permit and swap them to a desired token.\\n     * @param brokerbot The brokerbot of the shares to sell.\\n     * @param shares The (draggable)shares address.\\n     * @param seller The seller address.\\n     * @param amountToSell The amount of shares to sell.\\n     * @param ref Reference e.g. insider declaration and the type of sell.\\n     * @param permitInfo Information about the permit.\\n     * @param params Information about the swap.\\n     * @return The output amount of the swap to the desired token.\\n     */\\n    function sellSharesWithPermitAndSwap(IBrokerbot brokerbot, IERC20Permit shares, address seller,  uint256 amountToSell, bytes calldata ref, PermitInfo calldata permitInfo, ISwapRouter.ExactInputParams memory params, bool unwrapWeth) external onlySellerAndForwarder(seller) returns (uint256) {\\n        params.amountIn = sellSharesWithPermit(brokerbot, shares, seller, address(this), amountToSell, ref, permitInfo);\\n        return _swap(params, unwrapWeth);\\n    }\\n\\n    /**\\n     * @notice With this function a user can sell shares and swap them to a desired token. The user has to approve the paymenthub before on the shares contract.\\n     * @param brokerbot The brokerbot of the shares to sell.\\n     * @param shares The (draggable)shares address.\\n     * @param amountToSell The amount of shares to sell.\\n     * @param ref Reference e.g. insider declaration and the type of sell.\\n     * @param params Information about the swap.\\n     * @return The output amount of the swap to the desired token.\\n     */\\n    function sellSharesAndSwap(IBrokerbot brokerbot, IERC20 shares, uint256 amountToSell,  bytes calldata ref, ISwapRouter.ExactInputParams memory params, bool unwrapWeth) external returns (uint256) {\\n        params.amountIn = _sellShares(brokerbot, shares, msg.sender, address(this), amountToSell, ref);\\n        return _swap(params, unwrapWeth);\\n    }\\n\\n    /**\\n     * @notice Transfers shares to brokerbot and executes the selling.\\n     * @param brokerbot The brokerbot of the shares to sell.\\n     * @param shares The (draggable)shares address.\\n     * @param seller The seller address.\\n     * @param recipient The recipient of the base currency tokens. (this can be a 3rd party to off-ramp or the paymenthub itself if a swap will be done direct after)\\n     * @param amountToSell The amount of shares to sell.\\n     * @param ref Reference e.g. insider declaration and the type of sell.\\n     * @return The base currency amount for the selling of the shares.\\n     */ \\n    function _sellShares(IBrokerbot brokerbot, IERC20 shares, address seller, address recipient, uint256 amountToSell, bytes calldata ref ) internal returns (uint256) {\\n        // send shares token to brokerbot\\n        shares.safeTransferFrom(seller, address(brokerbot), amountToSell);\\n        // process sell on brokerbot\\n        return brokerbot.processIncoming(shares, recipient, amountToSell, ref);\\n    }\\n\\n    /**\\n     * @notice Swap (base currency) token according to given path and unwrap weth if needed.\\n     * @param params Information about the swap (includes path).\\n     * @return amountOut The output amount of the swap to the desired token.\\n     */\\n    function _swap(ISwapRouter.ExactInputParams memory params, bool unwrapWeth) internal returns(uint256 amountOut) {\\n        // if weth should be unwrapped, swap recipient is this contract and eth is send to seller\\n        if (unwrapWeth){\\n            address seller = params.recipient;\\n            params.recipient = address(this);\\n            amountOut = _swapToERC20(params);\\n            IWETH9(uniswapQuoter.WETH9()).withdraw(amountOut);\\n            (bool success, ) = payable(seller).call{value:amountOut}(\\\"\\\");\\n            if (!success) revert PaymentHub_TransferFailed();\\n        } else {\\n            amountOut = _swapToERC20(params);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calls the Uniswap router to swap tokens according to given path.\\n     * @param params Information about the swap (includes path).\\n     * @return amountOut The output amount of the swap to the desired token.\\n     */\\n    function _swapToERC20(ISwapRouter.ExactInputParams memory params) internal returns(uint256 amountOut) {\\n        amountOut = uniswapRouter.exactInput(params);\\n        if (amountOut < params.amountOutMinimum){\\n            revert PaymentHub_SwapError(params.amountOutMinimum, amountOut);\\n        }\\n    }\\n\\n    /**\\n     * Checks if the brokerbot has setting enabled to keep ether\\n     */\\n    function hasSettingKeepEther(IBrokerbot brokerbot) public view returns (bool) {\\n        return brokerbot.settings() & KEEP_ETHER == KEEP_ETHER;\\n    }\\n\\n    /**\\n     * @notice In case tokens have been accidentally sent directly to this contract. Only Forwarder can withdraw, else a MEV bot will intercept it.\\n     * @param ercAddress The erc20 address.\\n     * @param to The address to transfer tokens to.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function recover(IERC20 ercAddress, address to, uint256 amount) external onlyForwarder {\\n        ercAddress.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer ether to a given address. Only Forwarder can withdraw, else a MEV bot will intercept it.\\n     * @param to The address to transfer ether to.\\n     */\\n    function withdrawEther(address to, uint256 amount) external onlyForwarder {\\n        (bool success, ) = payable(to).call{value:amount}(\\\"\\\");\\n        if (!success) {\\n            revert PaymentHub_TransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer ether to a given address.\\n     * @dev Used with the mutlisigwallet.\\n     * @param to The address to transfer ether to.\\n     */\\n    function transferEther(address to) external payable {\\n        (bool success, ) = payable(to).call{value:msg.value}(\\\"\\\");\\n        if (!success) {\\n            revert PaymentHub_TransferFailed();\\n        }\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {\\n        // Important to receive ETH refund from Uniswap\\n    }\\n}\\n\",\"keccak256\":\"0x98eb5a732c441639825e35753466ee1ecd66e9f5a6fd8efd4e48ac0523e56d1e\",\"license\":\"LicenseRef-Aktionariat\"},\"src/brokerbot/TradeReactor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {SignatureTransfer} from \\\"../lib/SignatureTransfer.sol\\\";\\nimport {ISignatureTransfer} from \\\"../lib/ISignatureTransfer.sol\\\";\\nimport {IERC20Permit} from \\\"../ERC20/IERC20Permit.sol\\\";\\nimport {IERC20} from \\\"../ERC20/IERC20.sol\\\";\\nimport {Intent, IntentHash} from \\\"../lib/IntentHash.sol\\\";\\nimport {PaymentHub} from \\\"./PaymentHub.sol\\\";\\nimport {IBrokerbot} from \\\"./IBrokerbot.sol\\\";\\nimport {console} from \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title TradeReactor Contract\\n * @notice This contract handles the signaling and processing of trade intents between buyers and sellers.\\n * @dev This contract uses the SignatureTransfer contract for secure transfers with signatures.\\n*/\\ncontract TradeReactor {\\n\\n    using IntentHash for Intent;\\n\\n    error OfferTooLow();\\n    error InvalidFiller();\\n    error TokenMismatch();\\n\\n    // copied from brokerbot for compatibility\\n    event Trade(address seller, address buyer, address indexed token, uint amount, address currency, uint price, uint fee);\\n\\n    /// @dev Emitted when an intent to trade is signaled.\\n    /// @param owner The address of the intent owner.\\n    /// @param filler The address of the filler, if any, that the intent is specifically directed to.\\n    /// @param tokenOut The address of the token the owner wants to sell or exchange.\\n    /// @param amountOut The amount of the tokenOut the owner wants to sell or exchange.\\n    /// @param tokenIn The address of the token the owner wants to receive in exchange.\\n    /// @param amountIn The amount of the tokenIn the owner wants to receive.\\n    /// @param exp The expiration time of the intent.\\n    /// @param nonce A nonce to ensure the uniqueness of the intent.\\n    /// @param data Additional data that may be used in the trade execution.\\n    /// @param signature The signature of the owner authorizing the intent.\\n    event IntentSignal(address owner, address filler, address tokenOut, uint160 amountOut, address tokenIn, uint160 amountIn, uint48 exp, uint48 nonce, bytes data, bytes signature);\\n\\n    SignatureTransfer immutable public transfer;\\n\\n    constructor(SignatureTransfer _transfer){\\n        transfer = _transfer;\\n    }\\n\\n    /**\\n     * @notice A function to publicly signal an intent to buy or sell a token so it can be picked up by the filler for processing.\\n     * Alternaticely, the owner can directly communicate with the filler, without recording the intent on chain.\\n     * @param intent The trade intent data structure. \\n     * @param signature The signature of the intent owner.\\n    */\\n    function signalIntent(Intent calldata intent, bytes calldata signature) public {\\n        emit IntentSignal(intent.owner, intent.filler, intent.tokenOut, intent.amountOut, intent.tokenIn, intent.amountIn, intent.expiration, intent.nonce, intent.data, signature);\\n    }\\n\\n    /**\\n     * @notice Calculates the asking price for a given amount of tokenOut.\\n     * @dev Ideally called with an intent where tokenIn is a currency with many (e.g. 18) decimals.\\n     * @dev TokenOut can have very few decimals.\\n     * @param intent The trade intent data structure.\\n     * @param amount The amount of tokenOut.\\n     * @return The calculated asking price.\\n     */\\n    function getAsk(Intent calldata intent, uint256 amount) public pure returns (uint256) {\\n        // We should make sure that the rounding is always for the benefit of the intent owner to prevent exploits\\n        // Example: when the seller offers to sell 7 ABC for 10 CHF, the accurate price would be 4.2857....\\n        // The naive approach to calculate the same price using integers would be 3 * 10 / 7 = 3\\n        // But with the given approach, we get 10 - (7 - 3) * 10 / 7 = 5, which is higher than tha accurate price.\\n        return intent.amountIn - intent.amountIn * (intent.amountOut - amount) / intent.amountOut;\\n    }\\n\\n    /**\\n     * @notice Calculates the bidding price for a given amount of tokenIn.\\n     * @dev Ideally called with an intent where tokenOut is a currency with many (e.g. 18) decimals.\\n     * @dev TokenIn can have very few decimals.\\n     * @param intent The trade intent data structure.\\n     * @param amount The amount of tokenIn.\\n     * @return The calculated bidding price.\\n     */\\n    function getBid(Intent calldata intent, uint256 amount) public pure returns (uint256) {\\n        // We should make sure that the rounding is always for the benefit of the intent owner to prevent exploits\\n        // Example: when the buyer offers to buy 7 ABC for 10 CHF, but only 3 can be filled, the accurate price would be 4.2857....\\n        // With this calculation, we get a rounded down bid of 10 * 3 / 7 = 4\\n        return intent.amountOut * amount / intent.amountIn;\\n    }\\n\\n    /**\\n     * @notice Determines the maximum valid amount that can be traded based on seller and buyer intents.\\n     * @param sellerIntent The seller's trade intent.\\n     * @param buyerIntent The buyer's trade intent.\\n     * @return The maximum valid trade amount.\\n     */\\n    function getMaxValidAmount(Intent calldata sellerIntent, Intent calldata buyerIntent) public view returns (uint256) {\\n        uint256 sellerAvailable = transfer.getPermittedAmount(sellerIntent.owner, toPermit(sellerIntent));\\n        uint256 buyerAvailable = transfer.getPermittedAmount(buyerIntent.owner, toPermit(buyerIntent));\\n        uint256 biddingFor = buyerIntent.amountIn * buyerAvailable / buyerIntent.amountOut;\\n        uint256 maxAmount = biddingFor > sellerAvailable ? sellerAvailable : biddingFor;\\n        uint256 ask = getAsk(sellerIntent, maxAmount);\\n        uint256 bid = getBid(buyerIntent, maxAmount);\\n        if (bid < ask) revert OfferTooLow();\\n        return maxAmount;\\n    }\\n\\n    /**\\n     * @notice Processes a trade between a seller and a buyer with the maximum valid amount.\\n     * @param feeRecipient The address that will receive the fee.\\n     * @param sellerIntent The seller's trade intent.\\n     * @param sellerSig The seller's signature.\\n     * @param buyerIntent The buyer's trade intent.\\n     * @param buyerSig The buyer's signature.\\n     */    \\n    function process(address feeRecipient, Intent calldata sellerIntent, bytes calldata sellerSig, Intent calldata buyerIntent, bytes calldata buyerSig) public {\\n        process(feeRecipient, sellerIntent, sellerSig, buyerIntent, buyerSig, getMaxValidAmount(sellerIntent, buyerIntent));\\n    }\\n\\n    /**\\n     * @notice Processes a trade between a seller and a buyer for a specified amount.\\n     * @param feeRecipient The address that will receive the fee.\\n     * @param sellerIntent The seller's trade intent.\\n     * @param sellerSig The seller's signature.\\n     * @param buyerIntent The buyer's trade intent.\\n     * @param buyerSig The buyer's signature.\\n     * @param amount The amount of the token to trade.\\n     */\\n    function process(address feeRecipient, Intent calldata sellerIntent, bytes calldata sellerSig, Intent calldata buyerIntent, bytes calldata buyerSig, uint256 amount) public {\\n        // signatures will be verified in SignatureTransfer\\n        if (sellerIntent.tokenOut != buyerIntent.tokenIn || sellerIntent.tokenIn != buyerIntent.tokenOut) revert TokenMismatch();\\n        if (sellerIntent.filler != address(0x0) && sellerIntent.filler != msg.sender) revert InvalidFiller();\\n        if (buyerIntent.filler != address(0x0) && buyerIntent.filler != msg.sender) revert InvalidFiller();\\n        uint256 ask = getAsk(sellerIntent, amount);\\n        uint256 bid = getBid(buyerIntent, amount);\\n        if (bid < ask) revert OfferTooLow();\\n        // move tokens to reactor in order to implicitly allowlist target address in case reactor is powerlisted\\n        transfer.permitWitnessTransferFrom(toPermit(sellerIntent), toDetails(address(this), amount), sellerIntent.owner, sellerIntent.hash(), IntentHash.PERMIT2_INTENT_TYPE, sellerSig);\\n        transfer.permitWitnessTransferFrom(toPermit(buyerIntent), toDetails(address(this), bid), buyerIntent.owner, buyerIntent.hash(), IntentHash.PERMIT2_INTENT_TYPE, buyerSig);\\n        // move tokens to target addresses\\n        IERC20(sellerIntent.tokenOut).transfer(buyerIntent.owner, amount);\\n        IERC20(sellerIntent.tokenIn).transfer(sellerIntent.owner, ask);\\n        IERC20(sellerIntent.tokenIn).transfer(feeRecipient, bid - ask); // collect spread as fee\\n        emit Trade(sellerIntent.owner, buyerIntent.owner, sellerIntent.tokenOut, amount, sellerIntent.tokenIn, ask, bid - ask);\\n    }\\n\\n    /**\\n     * @notice Buys tokens from a Brokerbot.\\n     * @dev This function allows a user to buy tokens from a Brokerbot by transferring the specified amount of investment token to the Brokerbot and receiving the purchased tokens in return. The function ensures that the offer is not too low by comparing the invested amount to the bid price.\\n     * @param bot The Brokerbot from which tokens are being bought.\\n     * @param intent The trade intent data structure.\\n     * @param signature The signature of the intent owner.\\n     * @param amount The amount of tokens to invest in the purchase.\\n     * @return The amount of tokens received from the Brokerbot.\\n     */\\n    function buyFromBrokerbot(IBrokerbot bot, Intent calldata intent, bytes calldata signature, uint256 amount) public returns (uint256) {\\n        return buyFromBrokerbot(PaymentHub(payable(bot.paymenthub())), bot, intent, signature, amount);\\n    }\\n\\n    /**\\n     * @notice Buys tokens from a Brokerbot using a specific PaymentHub.\\n     * @dev This function allows a user to buy tokens from a Brokerbot through a specified PaymentHub. It transfers the specified amount of investment token to the Brokerbot and receives the purchased tokens in return. The function ensures that the offer is not too low by comparing the invested amount to the bid price.\\n     * @param hub The PaymentHub through which the transaction is processed.\\n     * @param bot The Brokerbot from which tokens are being bought.\\n     * @param intent The trade intent data structure.\\n     * @param signature The signature of the intent owner.\\n     * @param investAmount The amount of tokens to invest in the purchase.\\n     * @return The amount of tokens received from the Brokerbot.\\n     */\\n    function buyFromBrokerbot(PaymentHub hub, IBrokerbot bot, Intent calldata intent, bytes calldata signature, uint256 investAmount) public returns (uint256) {\\n        transfer.permitTransferFrom(toPermit(intent), toDetails(address(this), investAmount), intent.owner, signature);\\n        IERC20(intent.tokenOut).approve(address(hub), investAmount);\\n        // uint256 received = hub.payAndNotify(bot, investAmount, \\\"\\\");\\n        uint256 received = hub.payAndNotify(bot, investAmount, intent.data);\\n        if (investAmount > getBid(intent, received)) revert OfferTooLow();\\n        return received;\\n    }\\n\\n    /**\\n     * @notice Sells tokens to a Brokerbot.\\n     * @dev This function allows a user to sell tokens to a Brokerbot by transferring the specified amount of tokens to the Brokerbot and receiving the payment in return. The function ensures that the received amount is not lower than the ask price.\\n     * @param bot The Brokerbot to which tokens are being sold.\\n     * @param intent The trade intent data structure.\\n     * @param signature The signature of the intent owner.\\n     * @param soldShares The amount of tokens being sold.\\n     * @return The amount of payment received from the Brokerbot.\\n     */\\n    function sellToBrokerbot(IBrokerbot bot, Intent calldata intent, bytes calldata signature, uint256 soldShares)public returns (uint256) {\\n        return sellToBrokerbot(PaymentHub(payable(bot.paymenthub())), bot, intent, signature, soldShares);\\n    }\\n\\n    /**\\n     * @notice Sells tokens to a Brokerbot using a specific PaymentHub.\\n     * @dev This function allows a user to sell tokens to a Brokerbot through a specified PaymentHub. It transfers the specified amount of tokens to the Brokerbot and receives the payment in return. The function ensures that the received amount is not lower than the ask price.\\n     * @param hub The PaymentHub through which the transaction is processed.\\n     * @param bot The Brokerbot to which tokens are being sold.\\n     * @param intent The trade intent data structure.\\n     * @param signature The signature of the intent owner.\\n     * @param soldShares The amount of tokens being sold.\\n     * @return The amount of payment received from the Brokerbot.\\n     */\\n    function sellToBrokerbot(PaymentHub hub, IBrokerbot bot, Intent calldata intent, bytes calldata signature, uint256 soldShares) public returns (uint256) {\\n        transfer.permitTransferFrom(toPermit(intent), toDetails(address(this), soldShares), intent.owner, signature);\\n        IERC20(intent.tokenOut).approve(address(hub), soldShares);\\n        // uint256 received = hub.payAndNotify(bot, soldShares, \\\"\\\");\\n        uint256 received = hub.payAndNotify(bot, soldShares, intent.data);\\n        if (received < getAsk(intent, received)) revert OfferTooLow();\\n        return received;\\n    }\\n\\n    function toDetails(address recipient, uint256 amount) internal pure returns (ISignatureTransfer.SignatureTransferDetails memory){\\n        return ISignatureTransfer.SignatureTransferDetails({to: recipient, requestedAmount: amount});\\n    }\\n \\n    function toPermit(Intent memory intent) internal pure returns (ISignatureTransfer.PermitTransferFrom memory) {\\n        return ISignatureTransfer.PermitTransferFrom({\\n            permitted: ISignatureTransfer.TokenPermissions({\\n                token: address(intent.tokenOut),\\n                amount: intent.amountOut\\n            }),\\n            nonce: intent.nonce,\\n            deadline: intent.expiration\\n        });\\n    }\\n\\n}\",\"keccak256\":\"0x2b17a62b85b4c07ac1c2b8adc1c5818eabafccb19bc33f03f925f4012f4a5d39\",\"license\":\"MIT\"},\"src/lib/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * Copied from github.com/Uniswap/permit2/blob/main/src/SignatureTransfer.sol and modified.\\n */\\n\\n/// @notice EIP712 helpers for permit2\\n/// @dev Maintains cross-chain replay protection in the event of a fork\\n/// @dev Reference: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/EIP712.sol\\ncontract EIP712 {\\n    // Cache the domain separator as an immutable value, but also store the chain id that it\\n    // corresponds to, in order to invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private constant _HASHED_NAME = keccak256(\\\"Permit2\\\"); // TODO: what name should we use here?\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    constructor() {\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME);\\n    }\\n\\n    /// @notice Returns the domain separator for the current chain.\\n    /// @dev Uses cached version if chainid and address are unchanged from construction.\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        return block.chainid == _CACHED_CHAIN_ID\\n            ? _CACHED_DOMAIN_SEPARATOR\\n            : _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME);\\n    }\\n\\n    /// @notice Builds a domain separator using the current chainId and contract address.\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 nameHash) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, block.chainid, address(this)));\\n    }\\n\\n    /// @notice Creates an EIP-712 typed data hash\\n    function _hashTypedData(bytes32 dataHash) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), dataHash));\\n    }\\n}\",\"keccak256\":\"0x462809d614ef3ff0f66b648b6f42a1fdeaddfd9d67a8ebb31892b841d55035e7\",\"license\":\"MIT\"},\"src/lib/ISignatureTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title SignatureTransfer\\n/// @notice Handles ERC20 token transfers through signature based actions\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface ISignatureTransfer {\\n    /// @notice Thrown when the requested amount for a transfer is larger than the permissioned amount\\n    /// @param maxAmount The maximum amount a spender can request to transfer\\n    error InvalidAmount(uint256 maxAmount);\\n\\n    /// @notice Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\\n    /// @dev If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\\n    error LengthMismatch();\\n\\n    /// @notice Emits an event when the owner successfully invalidates an unordered nonce.\\n    event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask);\\n\\n    /// @notice The token and amount details for a transfer signed in the permit transfer signature\\n    struct TokenPermissions {\\n        // ERC20 token address\\n        address token;\\n        // the maximum amount that can be spent\\n        uint256 amount;\\n    }\\n\\n    /// @notice The signed permit message for a single token transfer\\n    struct PermitTransferFrom {\\n        TokenPermissions permitted;\\n        // a unique value for every token owner's signature to prevent signature replays\\n        uint256 nonce;\\n        // deadline on the permit signature\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Specifies the recipient address and amount for batched transfers.\\n    /// @dev Recipients and amounts correspond to the index of the signed token permissions array.\\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount.\\n    struct SignatureTransferDetails {\\n        // recipient address\\n        address to;\\n        // spender requested amount\\n        uint256 requestedAmount;\\n    }\\n\\n    /// @notice A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\\n    /// @dev Uses unordered nonces so that permit messages do not need to be spent in a certain order\\n    /// @dev The mapping is indexed first by the token owner, then by an index specified in the nonce\\n    /// @dev It returns a uint256 bitmap\\n    /// @dev The index, or wordPosition is capped at type(uint248).max\\n    function nonceBitmap(address, uint256) external view returns (uint256);\\n\\n    /// @notice Transfers a token using a signed permit message\\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n    /// @param permit The permit data signed over by the owner\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails The spender's requested transfer details for the permitted token\\n    /// @param signature The signature to verify\\n    function permitTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes calldata signature\\n    ) external;\\n\\n    /// @notice Transfers a token using a signed permit message\\n    /// @notice Includes extra data provided by the caller to verify signature over\\n    /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n    /// @param permit The permit data signed over by the owner\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails The spender's requested transfer details for the permitted token\\n    /// @param witness Extra data to include when checking the user signature\\n    /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n    /// @param signature The signature to verify\\n    function permitWitnessTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes32 witness,\\n        string calldata witnessTypeString,\\n        bytes calldata signature\\n    ) external;\\n\\n\\n    /// @notice Invalidates the bits specified in mask for the bitmap at the word position\\n    /// @dev The wordPos is maxed at type(uint248).max\\n    /// @param wordPos A number to index the nonceBitmap at\\n    /// @param mask A bitmap masked against msg.sender's current bitmap at the word position\\n    function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external;\\n}\",\"keccak256\":\"0x86104c66cc0214eb509507b3c4f8d01867a4c6ccf438ed2ec8290894b97d90a9\",\"license\":\"MIT\"},\"src/lib/IntentHash.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../ERC20/IERC20.sol\\\";\\nimport {PermitHash} from \\\"./PermitHash.sol\\\";\\n\\nstruct Intent {\\n\\taddress owner;\\n\\taddress filler;\\n\\taddress tokenOut; // The ERC20 token sent out\\n\\tuint160 amountOut; // The maximum amount\\n\\taddress tokenIn; // The ERC20 token received\\n\\tuint160 amountIn; // The amount received in exchange for the maximum of the sent token\\n\\tuint48 expiration; // timestamp at which the intent expires\\n\\tuint48 nonce; // a unique value indexed per owner,token,and spender for each signature\\n\\tbytes data;\\n}\\n\\n/// @notice helpers for handling dutch order objects\\nlibrary IntentHash {\\n\\n\\tbytes internal constant INTENT_TYPE =\\n\\t\\tabi.encodePacked(\\n\\t\\t\\t\\\"Intent(\\\",\\n\\t\\t\\t\\\"address owner,\\\",\\n\\t\\t\\t\\\"address filler,\\\",\\n\\t\\t\\t\\\"address tokenOut,\\\",\\n\\t\\t\\t\\\"uint160 amountOut,\\\",\\n\\t\\t\\t\\\"address tokenIn,\\\",\\n\\t\\t\\t\\\"uint160 amountIn,\\\",\\n\\t\\t\\t\\\"uint48 expiration,\\\",\\n\\t\\t\\t\\\"uint48 nonce,\\\",\\n\\t\\t\\t\\\"bytes data)\\\"\\n\\t\\t);\\n\\n\\tbytes32 internal constant INTENT_TYPE_HASH = keccak256(INTENT_TYPE);\\n\\n\\tstring internal constant PERMIT2_INTENT_TYPE =\\n        string(abi.encodePacked(\\\"Intent witness)\\\", INTENT_TYPE, PermitHash._TOKEN_PERMISSIONS_TYPESTRING));\\n\\n\\t/// @notice hash the given intent\\n\\t/// @param intent the intent to hash\\n\\t/// @return the eip-712 intent hash\\n\\tfunction hash(Intent calldata intent) internal pure returns (bytes32) {\\n\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\tINTENT_TYPE_HASH,\\n\\t\\t\\t\\t\\tintent.owner,\\n\\t\\t\\t\\t\\tintent.filler,\\n\\t\\t\\t\\t\\tintent.tokenOut,\\n\\t\\t\\t\\t\\tintent.amountOut,\\n\\t\\t\\t\\t\\tintent.tokenIn,\\n\\t\\t\\t\\t\\tintent.amountIn,\\n\\t\\t\\t\\t\\tintent.expiration,\\n\\t\\t\\t\\t\\tintent.nonce,\\n\\t\\t\\t\\t\\tkeccak256(intent.data)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xd04db21a5713fd2ab5e5d33fe19088a7f90b4bac1bc93f67fd6484fbbb155c1f\",\"license\":\"GPL-2.0-or-later\"},\"src/lib/PermitHash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * Copied from github.com/Uniswap/permit2/blob/main/src/SignatureTransfer.sol and modified.\\n */\\nimport {ISignatureTransfer} from \\\"./ISignatureTransfer.sol\\\";\\n\\nlibrary PermitHash {\\n    bytes32 public constant _PERMIT_DETAILS_TYPEHASH =\\n        keccak256(\\\"PermitDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)\\\");\\n\\n    bytes32 public constant _PERMIT_SINGLE_TYPEHASH = keccak256(\\n        \\\"PermitSingle(PermitDetails details,address spender,uint256 sigDeadline)PermitDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)\\\"\\n    );\\n\\n    bytes32 public constant _TOKEN_PERMISSIONS_TYPEHASH = keccak256(\\\"TokenPermissions(address token,uint256 amount)\\\");\\n\\n    bytes32 public constant _PERMIT_TRANSFER_FROM_TYPEHASH = keccak256(\\n        \\\"PermitTransferFrom(TokenPermissions permitted,address spender,uint256 nonce,uint256 deadline)TokenPermissions(address token,uint256 amount)\\\"\\n    );\\n\\n    string public constant _TOKEN_PERMISSIONS_TYPESTRING = \\\"TokenPermissions(address token,uint256 amount)\\\";\\n\\n    string public constant _PERMIT_TRANSFER_FROM_WITNESS_TYPEHASH_STUB =\\n        \\\"PermitWitnessTransferFrom(TokenPermissions permitted,address spender,uint256 nonce,uint256 deadline,\\\";\\n\\n    function hash(ISignatureTransfer.PermitTransferFrom memory permit) internal view returns (bytes32) {\\n        bytes32 tokenPermissionsHash = _hashTokenPermissions(permit.permitted);\\n        return keccak256(\\n            abi.encode(_PERMIT_TRANSFER_FROM_TYPEHASH, tokenPermissionsHash, msg.sender, permit.nonce, permit.deadline)\\n        );\\n    }\\n\\n    function hashWithWitness(\\n        ISignatureTransfer.PermitTransferFrom memory permit,\\n        bytes32 witness,\\n        string calldata witnessTypeString\\n    ) internal view returns (bytes32) {\\n        bytes32 typeHash = keccak256(abi.encodePacked(_PERMIT_TRANSFER_FROM_WITNESS_TYPEHASH_STUB, witnessTypeString));\\n\\n        bytes32 tokenPermissionsHash = _hashTokenPermissions(permit.permitted);\\n        return keccak256(abi.encode(typeHash, tokenPermissionsHash, msg.sender, permit.nonce, permit.deadline, witness));\\n    }\\n\\n    function _hashTokenPermissions(ISignatureTransfer.TokenPermissions memory permitted)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(_TOKEN_PERMISSIONS_TYPEHASH, permitted));\\n    }\\n}\",\"keccak256\":\"0x9ad760b0f02bc0c9f96e0f655eec4c171b3d88f015e66b650dc99f3cceb15c6a\",\"license\":\"MIT\"},\"src/lib/SignatureTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * Copied from github.com/Uniswap/permit2/blob/main/src/SignatureTransfer.sol and modified.\\n */\\nimport {ISignatureTransfer} from \\\"./ISignatureTransfer.sol\\\";\\nimport {IERC20} from \\\"../ERC20/IERC20.sol\\\";\\nimport {SignatureVerification} from \\\"./SignatureVerification.sol\\\";\\nimport {PermitHash} from \\\"./PermitHash.sol\\\";\\nimport {EIP712} from \\\"./EIP712.sol\\\";\\n\\ncontract SignatureTransfer is ISignatureTransfer, EIP712 {\\n\\n    using SignatureVerification for bytes;\\n    using PermitHash for PermitTransferFrom;\\n\\n    /// @inheritdoc ISignatureTransfer\\n    mapping(address => mapping(uint256 => uint256)) public nonceBitmap;\\n    mapping(address => mapping(uint256 => uint256)) public partialFills;\\n\\n    /// @notice Thrown when validating an inputted signature that is stale\\n    /// @param signatureDeadline The timestamp at which a signature is no longer valid\\n    error SignatureExpired(uint256 signatureDeadline);\\n\\n    /// @notice Thrown when validating that the inputted nonce has not been used\\n    error InvalidNonce();\\n\\n    error OverFilled();\\n\\n    function permitTransferFrom(PermitTransferFrom memory permit, SignatureTransferDetails calldata transferDetails, address owner, bytes calldata signature) external {\\n        _permitTransferFrom(permit, transferDetails, owner, permit.hash(), signature);\\n    }\\n\\n    /// @inheritdoc ISignatureTransfer\\n    function permitWitnessTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes32 witness,\\n        string calldata witnessTypeString,\\n        bytes calldata signature\\n    ) external {\\n        _permitTransferFrom(permit, transferDetails, owner, permit.hashWithWitness(witness, witnessTypeString), signature);\\n    }\\n\\n    /**\\n     * Find a nonce that looks free given the data on the blockchain.\\n     * Of course, this method cannot take into account nonces of valid but unused permits.\\n     */\\n    function findFreeNonce(address owner, uint256 start) public view returns (uint256){\\n        while (!isFreeNonce(owner, start)){\\n            start++;\\n        }\\n        return start;\\n    }\\n\\n    function isFreeNonce(address owner, uint256 nonce) public view returns (bool){\\n        (uint256 wordPos, uint256 bitPos) = bitmapPositions(nonce);\\n        uint256 bit = 1 << bitPos;\\n        return nonceBitmap[owner][wordPos] & bit == 0 && partialFills[owner][nonce] == 0;\\n    }\\n\\n    function getPermittedAmount(address owner, PermitTransferFrom calldata permit) public view returns (uint256) {\\n        if (isFreeNonce(owner, permit.nonce)){\\n            return permit.permitted.amount - partialFills[owner][permit.nonce];\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice Transfers a token using a signed permit message.\\n    /// @param permit The permit data signed over by the owner\\n    /// @param dataHash The EIP-712 hash of permit data to include when checking signature\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails The spender's requested transfer details for the permitted token\\n    /// @param signature The signature to verify\\n    function _permitTransferFrom(PermitTransferFrom memory permit, SignatureTransferDetails calldata transferDetails, address owner, bytes32 dataHash, bytes calldata signature) private {\\n        uint256 requestedAmount = transferDetails.requestedAmount;\\n\\n        if (block.timestamp > permit.deadline) revert SignatureExpired(permit.deadline);\\n\\n        _useUnorderedNonce(owner, permit.nonce, requestedAmount, permit.permitted.amount);\\n\\n        signature.verify(_hashTypedData(dataHash), owner);\\n\\n        IERC20(permit.permitted.token).transferFrom(owner, transferDetails.to, requestedAmount);\\n    }\\n\\n    /// @inheritdoc ISignatureTransfer\\n    function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external {\\n        nonceBitmap[msg.sender][wordPos] |= mask;\\n\\n        emit UnorderedNonceInvalidation(msg.sender, wordPos, mask);\\n    }\\n\\n    /// @notice Returns the index of the bitmap and the bit position within the bitmap. Used for unordered nonces\\n    /// @param nonce The nonce to get the associated word and bit positions\\n    /// @return wordPos The word position or index into the nonceBitmap\\n    /// @return bitPos The bit position\\n    /// @dev The first 248 bits of the nonce value is the index of the desired bitmap\\n    /// @dev The last 8 bits of the nonce value is the position of the bit in the bitmap\\n    function bitmapPositions(uint256 nonce) private pure returns (uint256 wordPos, uint256 bitPos) {\\n        wordPos = uint248(nonce >> 8);\\n        bitPos = uint8(nonce);\\n    }\\n\\n    /// @notice Checks whether a nonce is taken and sets the bit at the bit position in the bitmap at the word position\\n    /// @param from The address to use the nonce at\\n    /// @param nonce The nonce to spend\\n    function _useUnorderedNonce(address from, uint256 nonce, uint256 amount, uint256 max) internal {\\n        (uint256 wordPos, uint256 bitPos) = bitmapPositions(nonce);\\n        uint256 bit = 1 << bitPos;\\n        uint256 state = nonceBitmap[from][wordPos];\\n        if (state & bit != 0) revert InvalidNonce();\\n\\n        uint256 alreadyFilled = partialFills[from][nonce];\\n        if (alreadyFilled + amount > max) revert OverFilled();\\n        if (alreadyFilled + amount < max){\\n            partialFills[from][nonce] = alreadyFilled + amount;\\n        } else {\\n            if (alreadyFilled > 0) delete partialFills[from][nonce]; // get some gas back \\n            nonceBitmap[from][wordPos] |= bit; // flag done\\n        }\\n    }\\n}\",\"keccak256\":\"0xc5d761714e26c6d8c76aa7a1e617e3febf67f1aafe4a99767bedc4fa8dd732bd\",\"license\":\"MIT\"},\"src/lib/SignatureVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * Copied from github.com/Uniswap/permit2/blob/main/src/SignatureTransfer.sol and modified.\\n */\\nlibrary SignatureVerification {\\n    /// @notice Thrown when the passed in signature is not a valid length\\n    error InvalidSignatureLength();\\n\\n    /// @notice Thrown when the recovered signer is equal to the zero address\\n    error InvalidSignature();\\n\\n    /// @notice Thrown when the recovered signer does not equal the claimedSigner\\n    error InvalidSigner();\\n\\n    /// @notice Thrown when the recovered contract signature is incorrect\\n    error InvalidContractSignature();\\n\\n    bytes32 constant UPPER_BIT_MASK = (0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n\\n    function verify(bytes calldata signature, bytes32 hash, address claimedSigner) internal view {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        if (claimedSigner.code.length == 0) {\\n            if (signature.length == 65) {\\n                (r, s) = abi.decode(signature, (bytes32, bytes32));\\n                v = uint8(signature[64]);\\n            } else if (signature.length == 64) {\\n                // EIP-2098\\n                bytes32 vs;\\n                (r, vs) = abi.decode(signature, (bytes32, bytes32));\\n                s = vs & UPPER_BIT_MASK;\\n                v = uint8(uint256(vs >> 255)) + 27;\\n            } else {\\n                revert InvalidSignatureLength();\\n            }\\n            address signer = ecrecover(hash, v, r, s);\\n            if (signer == address(0)) revert InvalidSignature();\\n            if (signer != claimedSigner) revert InvalidSigner();\\n        } else {\\n            bytes4 magicValue = IERC1271(claimedSigner).isValidSignature(hash, signature);\\n            if (magicValue != IERC1271.isValidSignature.selector) revert InvalidContractSignature();\\n        }\\n    }\\n}\\n\\ninterface IERC1271 {\\n    /// @dev Should return whether the signature provided is valid for the provided data\\n    /// @param hash      Hash of the data to be signed\\n    /// @param signature Signature byte array associated with _data\\n    /// @return magicValue The bytes4 magic value 0x1626ba7e\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\",\"keccak256\":\"0x0a7e2a987eff6d4e75094eb0cd01c4db7c7ad287fb848d6ee802cdd6299345d9\",\"license\":\"MIT\"},\"src/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\n// and modified it.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Address {\\n\\n    /// @param target Target address to call the function on.\\n    error Address_NotTransferNorContract(address target);\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n        return account.code.length > 0;\\n    }\\n    \\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 weiValue) internal returns (bytes memory) {\\n        if (data.length != 0 && !isContract(target)) {\\n            revert Address_NotTransferNorContract(target);\\n        }\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else if (returndata.length > 0) {\\n            assembly{\\n                revert (add (returndata, 0x20), mload (returndata))\\n            }\\n        } else {\\n           revert(\\\"failed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xb95d45875550203c1afb7dfc9c99ce62c77496c36e96f3adfaad2d42cb3380a2\",\"license\":\"MIT\"},\"src/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n//\\n// Modifications:\\n// - Replaced Context._msgSender() with msg.sender\\n// - Made leaner\\n// - Extracted interface\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    error Ownable_NotOwner(address sender);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor (address initialOwner) {\\n        owner = initialOwner;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    function _checkOwner() internal view {\\n        if (msg.sender != owner) {\\n            revert Ownable_NotOwner(msg.sender);\\n        }\\n    }\\n}\",\"keccak256\":\"0x9057578671d192c7891a59854cf8bab2698450c5b271f21e0696036fb65cae3b\",\"license\":\"MIT\"},\"src/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// coppied and adjusted from OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../ERC20/IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../ERC20/IERC20Permit.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        if (nonceAfter != nonceBefore + 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\",\"keccak256\":\"0xa162e550fe203915126fddc231c55d28dd3f16d39be22dd48c5fc7f5ccd6fd93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052348015600f57600080fd5b50604051611e4b380380611e4b833981016040819052602c91603c565b6001600160a01b0316608052606a565b600060208284031215604d57600080fd5b81516001600160a01b0381168114606357600080fd5b9392505050565b608051611d9c6100af60003960008181610160015281816101cc01528181610514015281816105be0152818161091101528181610a0d0152610f120152611d9c6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633eae8237116100715780633eae8237146101205780634e03ba4b14610135578063548d4051146101485780638a4068dd1461015b578063befbde5d1461019a578063ebc0a967146101ad57600080fd5b806303ae7bd3146100ae57806305cc7606146100d45780631424404e146100e7578063214fe96c146100fa578063294623ce1461010d575b600080fd5b6100c16100bc3660046112df565b6101c0565b6040519081526020015b60405180910390f35b6100c16100e2366004611377565b610426565b6100c16100f5366004611377565b610478565b6100c16101083660046113bc565b610507565b6100c161011b366004611420565b610704565b61013361012e3660046114b1565b61077f565b005b610133610143366004611582565b610da4565b6100c1610156366004611420565b610dc1565b6101827f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100cb565b6101336101a836600461164e565b610e32565b6100c16101bb3660046112df565b610f06565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166330f28b7a61027a6101fd8861179a565b6040805160a0810182526000606082018181526080830182905282526020820181905291810191909152506040805160a081018252828201516001600160a01b0390811660608084019182528501519091166080830152815260e083015165ffffffffffff908116602083015260c0909301519092169082015290565b61028430866110e4565b61029160208a018a61186d565b88886040518663ffffffff1660e01b81526004016102b39594939291906118f0565b600060405180830381600087803b1580156102cd57600080fd5b505af11580156102e1573d6000803e3d6000fd5b506102f692505050606086016040870161186d565b60405163095ea7b360e01b81526001600160a01b03898116600483015260248201859052919091169063095ea7b3906044016020604051808303816000875af1158015610347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036b9190611948565b5060006001600160a01b0388166317f565d2888561038d6101008b018b61196a565b6040518563ffffffff1660e01b81526004016103ac94939291906119b1565b6020604051808303816000875af11580156103cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ef91906119d9565b90506103fb8682610426565b83111561041b576040516372351e5360e01b815260040160405180910390fd5b979650505050505050565b600061043860c0840160a0850161186d565b6001600160a01b031682610452608086016060870161186d565b6001600160a01b03166104659190611a08565b61046f9190611a1f565b90505b92915050565b600061048a608084016060850161186d565b6001600160a01b0316826104a4608086016060870161186d565b6001600160a01b03166104b79190611a41565b6104c760c0860160a0870161186d565b6001600160a01b03166104da9190611a08565b6104e49190611a1f565b6104f460c0850160a0860161186d565b6001600160a01b031661046f9190611a41565b6000806001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639f098293610546602087018761186d565b6105526101fd8861179a565b6040518363ffffffff1660e01b815260040161056f929190611a54565b602060405180830381865afa15801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b091906119d9565b905060006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639f0982936105f0602087018761186d565b6105fc6101fd8861179a565b6040518363ffffffff1660e01b8152600401610619929190611a54565b602060405180830381865afa158015610636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065a91906119d9565b9050600061066e608086016060870161186d565b6001600160a01b03168261068860c0880160a0890161186d565b6001600160a01b031661069b9190611a08565b6106a59190611a1f565b905060008382116106b657816106b8565b835b905060006106c68883610478565b905060006106d48884610426565b9050818110156106f7576040516372351e5360e01b815260040160405180910390fd5b5090979650505050505050565b6000610775866001600160a01b031663777adcf06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b9190611a71565b87878787876101c0565b9695505050505050565b61078f60a085016080860161186d565b6001600160a01b03166107a86060890160408a0161186d565b6001600160a01b03161415806107ee57506107c9606085016040860161186d565b6001600160a01b03166107e260a0890160808a0161186d565b6001600160a01b031614155b1561080c5760405163936bb5ad60e01b815260040160405180910390fd5b600061081e6040890160208a0161186d565b6001600160a01b03161415801561084d5750336108416040890160208a0161186d565b6001600160a01b031614155b1561086b5760405163017ae39960e11b815260040160405180910390fd5b600061087d604086016020870161186d565b6001600160a01b0316141580156108ac5750336108a0604086016020870161186d565b6001600160a01b031614155b156108ca5760405163017ae39960e11b815260040160405180910390fd5b60006108d68883610478565b905060006108e48684610426565b905081811015610907576040516372351e5360e01b815260040160405180910390fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663137c29fe6109426101fd8c61179a565b61094c30876110e4565b61095960208e018e61186d565b6109628e611115565b60405160200161097190611a8e565b60408051601f1981840301815260608301909152602e808352909190611d3960208301396040516020016109a6929190611ba1565b6040516020818303038152906040528e8e6040518863ffffffff1660e01b81526004016109d99796959493929190611bee565b600060405180830381600087803b1580156109f357600080fd5b505af1158015610a07573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663137c29fe610a47886101fd9061179a565b610a5130856110e4565b610a5e60208b018b61186d565b610a678b611115565b604051602001610a7690611a8e565b60408051601f1981840301815260608301909152602e808352909190611d396020830139604051602001610aab929190611ba1565b6040516020818303038152906040528b8b6040518863ffffffff1660e01b8152600401610ade9796959493929190611bee565b600060405180830381600087803b158015610af857600080fd5b505af1158015610b0c573d6000803e3d6000fd5b50610b219250505060608a0160408b0161186d565b6001600160a01b031663a9059cbb610b3c602089018961186d565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018690526044016020604051808303816000875af1158015610b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bad9190611948565b50610bbe60a08a0160808b0161186d565b6001600160a01b031663a9059cbb610bd960208c018c61186d565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015610c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4a9190611948565b50610c5b60a08a0160808b0161186d565b6001600160a01b031663a9059cbb8b610c748585611a41565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce39190611948565b50610cf460608a0160408b0161186d565b6001600160a01b03167f8a181b821b6fbc45fb158a5ade70964c9d58849c1ac3cd4078aa9cff7f5d2049610d2b60208c018c61186d565b610d3860208a018a61186d565b868d6080016020810190610d4c919061186d565b87610d578189611a41565b604080516001600160a01b039788168152958716602087015285019390935293166060830152608082019290925260a081019190915260c00160405180910390a250505050505050505050565b610db88787878787878761012e8e8c610507565b50505050505050565b6000610775866001600160a01b031663777adcf06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e289190611a71565b8787878787610f06565b7f64d58e5a032b3dff51a1bebcb1818be4d39cf1e8a658e3ca52bba8542b638224610e60602085018561186d565b610e70604086016020870161186d565b610e80606087016040880161186d565b610e90608088016060890161186d565b610ea060a0890160808a0161186d565b610eb060c08a0160a08b0161186d565b610ec060e08b0160c08c01611c81565b610ed16101008c0160e08d01611c81565b610edf6101008d018d61196a565b8c8c604051610ef99c9b9a99989796959493929190611c9c565b60405180910390a1505050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166330f28b7a610f436101fd8861179a565b610f4d30866110e4565b610f5a60208a018a61186d565b88886040518663ffffffff1660e01b8152600401610f7c9594939291906118f0565b600060405180830381600087803b158015610f9657600080fd5b505af1158015610faa573d6000803e3d6000fd5b50610fbf92505050606086016040870161186d565b60405163095ea7b360e01b81526001600160a01b03898116600483015260248201859052919091169063095ea7b3906044016020604051808303816000875af1158015611010573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110349190611948565b5060006001600160a01b0388166317f565d288856110566101008b018b61196a565b6040518563ffffffff1660e01b815260040161107594939291906119b1565b6020604051808303816000875af1158015611094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b891906119d9565b90506110c48682610478565b81101561041b576040516372351e5360e01b815260040160405180910390fd5b604080518082018252600080825260209182015281518083019092526001600160a01b039390931681529182015290565b600060405160200161112690611a8e565b60408051601f1981840301815291905280516020918201209061114b9084018461186d565b61115b604085016020860161186d565b61116b606086016040870161186d565b61117b608087016060880161186d565b61118b60a088016080890161186d565b61119b60c0890160a08a0161186d565b6111ab60e08a0160c08b01611c81565b6111bc6101008b0160e08c01611c81565b6111ca6101008c018c61196a565b6040516111d8929190611d28565b60408051918290038220602083019b909b526001600160a01b03998a16908201529688166060880152948716608087015292861660a086015290851660c085015290931660e083015265ffffffffffff9283166101008301529190911661012082015261014081019190915261016001604051602081830303815290604052805190602001209050919050565b6001600160a01b038116811461127a57600080fd5b50565b6000610120828403121561129057600080fd5b50919050565b60008083601f8401126112a857600080fd5b50813567ffffffffffffffff8111156112c057600080fd5b6020830191508360208285010111156112d857600080fd5b9250929050565b60008060008060008060a087890312156112f857600080fd5b863561130381611265565b9550602087013561131381611265565b9450604087013567ffffffffffffffff8082111561133057600080fd5b61133c8a838b0161127d565b9550606089013591508082111561135257600080fd5b5061135f89828a01611296565b979a9699509497949695608090950135949350505050565b6000806040838503121561138a57600080fd5b823567ffffffffffffffff8111156113a157600080fd5b6113ad8582860161127d565b95602094909401359450505050565b600080604083850312156113cf57600080fd5b823567ffffffffffffffff808211156113e757600080fd5b6113f38683870161127d565b9350602085013591508082111561140957600080fd5b506114168582860161127d565b9150509250929050565b60008060008060006080868803121561143857600080fd5b853561144381611265565b9450602086013567ffffffffffffffff8082111561146057600080fd5b61146c89838a0161127d565b9550604088013591508082111561148257600080fd5b5061148f88828901611296565b96999598509660600135949350505050565b80356114ac81611265565b919050565b60008060008060008060008060c0898b0312156114cd57600080fd5b6114d6896114a1565b9750602089013567ffffffffffffffff808211156114f357600080fd5b6114ff8c838d0161127d565b985060408b013591508082111561151557600080fd5b6115218c838d01611296565b909850965060608b013591508082111561153a57600080fd5b6115468c838d0161127d565b955060808b013591508082111561155c57600080fd5b506115698b828c01611296565b999c989b50969995989497949560a00135949350505050565b600080600080600080600060a0888a03121561159d57600080fd5b87356115a881611265565b9650602088013567ffffffffffffffff808211156115c557600080fd5b6115d18b838c0161127d565b975060408a01359150808211156115e757600080fd5b6115f38b838c01611296565b909750955060608a013591508082111561160c57600080fd5b6116188b838c0161127d565b945060808a013591508082111561162e57600080fd5b5061163b8a828b01611296565b989b979a50959850939692959293505050565b60008060006040848603121561166357600080fd5b833567ffffffffffffffff8082111561167b57600080fd5b6116878783880161127d565b9450602086013591508082111561169d57600080fd5b506116aa86828701611296565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156116f1576116f16116b7565b60405290565b803565ffffffffffff811681146114ac57600080fd5b600082601f83011261171e57600080fd5b813567ffffffffffffffff80821115611739576117396116b7565b604051601f8301601f19908116603f01168101908282118183101715611761576117616116b7565b8160405283815286602085880101111561177a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600061012082360312156117ad57600080fd5b6117b56116cd565b6117be836114a1565b81526117cc602084016114a1565b60208201526117dd604084016114a1565b60408201526117ee606084016114a1565b60608201526117ff608084016114a1565b608082015261181060a084016114a1565b60a082015261182160c084016116f7565b60c082015261183260e084016116f7565b60e08201526101008084013567ffffffffffffffff81111561185357600080fd5b61185f3682870161170d565b918301919091525092915050565b60006020828403121561187f57600080fd5b813561188a81611265565b9392505050565b6118af82825180516001600160a01b03168252602090810151910152565b60208101516040830152604081015160608301525050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006101006118ff8389611891565b86516001600160a01b03166080840152602087015160a08401526001600160a01b03861660c084015260e0830181905261193c81840185876118c7565b98975050505050505050565b60006020828403121561195a57600080fd5b8151801515811461188a57600080fd5b6000808335601e1984360301811261198157600080fd5b83018035915067ffffffffffffffff82111561199c57600080fd5b6020019150368190038213156112d857600080fd5b60018060a01b03851681528360208201526060604082015260006107756060830184866118c7565b6000602082840312156119eb57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610472576104726119f2565b600082611a3c57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610472576104726119f2565b6001600160a01b038316815260a0810161188a6020830184611891565b600060208284031215611a8357600080fd5b815161188a81611265565b66092dce8cadce8560cb1b81526d1859191c995cdcc81bdddb995c8b60921b60078201526e1859191c995cdcc8199a5b1b195c8b608a1b6015820152701859191c995cdcc81d1bdad95b93dd5d0b607a1b6024820152711d5a5b9d0c4d8c08185b5bdd5b9d13dd5d0b60721b60358201526f1859191c995cdcc81d1bdad95b925b8b60821b6047820152701d5a5b9d0c4d8c08185b5bdd5b9d125b8b607a1b6057820152711d5a5b9d0d0e08195e1c1a5c985d1a5bdb8b60721b60688201526c1d5a5b9d0d0e081b9bdb98d94b609a1b607a8201526a627974657320646174612960a81b608782015260920190565b60005b83811015611b98578181015183820152602001611b80565b50506000910152565b6e496e74656e74207769746e6573732960881b815260008351611bcb81600f850160208801611b7d565b835190830190611be281600f840160208801611b7d565b01600f01949350505050565b6000610140611bfd838b611891565b88516001600160a01b03166080840152602089015160a08401526001600160a01b03881660c084015260e083018790526101008301819052855190830181905261016090611c518183860160208a01611b7d565b601f01601f191683018381038201610120850152611c7282820186886118c7565b9b9a5050505050505050505050565b600060208284031215611c9357600080fd5b61046f826116f7565b6001600160a01b038d811682528c811660208301528b811660408301528a811660608301528981166080830152881660a082015265ffffffffffff87811660c0830152861660e08201526101406101008201819052600090611d0190830186886118c7565b828103610120840152611d158185876118c7565b9f9e505050505050505050505050505050565b818382376000910190815291905056fe546f6b656e5065726d697373696f6e73286164647265737320746f6b656e2c75696e7432353620616d6f756e7429a26469706673582212202eb261fcce0071f3e5f19cc2c338ccab551a2785dd32fcee86005412e467796164736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80633eae8237116100715780633eae8237146101205780634e03ba4b14610135578063548d4051146101485780638a4068dd1461015b578063befbde5d1461019a578063ebc0a967146101ad57600080fd5b806303ae7bd3146100ae57806305cc7606146100d45780631424404e146100e7578063214fe96c146100fa578063294623ce1461010d575b600080fd5b6100c16100bc3660046112df565b6101c0565b6040519081526020015b60405180910390f35b6100c16100e2366004611377565b610426565b6100c16100f5366004611377565b610478565b6100c16101083660046113bc565b610507565b6100c161011b366004611420565b610704565b61013361012e3660046114b1565b61077f565b005b610133610143366004611582565b610da4565b6100c1610156366004611420565b610dc1565b6101827f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100cb565b6101336101a836600461164e565b610e32565b6100c16101bb3660046112df565b610f06565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166330f28b7a61027a6101fd8861179a565b6040805160a0810182526000606082018181526080830182905282526020820181905291810191909152506040805160a081018252828201516001600160a01b0390811660608084019182528501519091166080830152815260e083015165ffffffffffff908116602083015260c0909301519092169082015290565b61028430866110e4565b61029160208a018a61186d565b88886040518663ffffffff1660e01b81526004016102b39594939291906118f0565b600060405180830381600087803b1580156102cd57600080fd5b505af11580156102e1573d6000803e3d6000fd5b506102f692505050606086016040870161186d565b60405163095ea7b360e01b81526001600160a01b03898116600483015260248201859052919091169063095ea7b3906044016020604051808303816000875af1158015610347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036b9190611948565b5060006001600160a01b0388166317f565d2888561038d6101008b018b61196a565b6040518563ffffffff1660e01b81526004016103ac94939291906119b1565b6020604051808303816000875af11580156103cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ef91906119d9565b90506103fb8682610426565b83111561041b576040516372351e5360e01b815260040160405180910390fd5b979650505050505050565b600061043860c0840160a0850161186d565b6001600160a01b031682610452608086016060870161186d565b6001600160a01b03166104659190611a08565b61046f9190611a1f565b90505b92915050565b600061048a608084016060850161186d565b6001600160a01b0316826104a4608086016060870161186d565b6001600160a01b03166104b79190611a41565b6104c760c0860160a0870161186d565b6001600160a01b03166104da9190611a08565b6104e49190611a1f565b6104f460c0850160a0860161186d565b6001600160a01b031661046f9190611a41565b6000806001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639f098293610546602087018761186d565b6105526101fd8861179a565b6040518363ffffffff1660e01b815260040161056f929190611a54565b602060405180830381865afa15801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b091906119d9565b905060006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639f0982936105f0602087018761186d565b6105fc6101fd8861179a565b6040518363ffffffff1660e01b8152600401610619929190611a54565b602060405180830381865afa158015610636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065a91906119d9565b9050600061066e608086016060870161186d565b6001600160a01b03168261068860c0880160a0890161186d565b6001600160a01b031661069b9190611a08565b6106a59190611a1f565b905060008382116106b657816106b8565b835b905060006106c68883610478565b905060006106d48884610426565b9050818110156106f7576040516372351e5360e01b815260040160405180910390fd5b5090979650505050505050565b6000610775866001600160a01b031663777adcf06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b9190611a71565b87878787876101c0565b9695505050505050565b61078f60a085016080860161186d565b6001600160a01b03166107a86060890160408a0161186d565b6001600160a01b03161415806107ee57506107c9606085016040860161186d565b6001600160a01b03166107e260a0890160808a0161186d565b6001600160a01b031614155b1561080c5760405163936bb5ad60e01b815260040160405180910390fd5b600061081e6040890160208a0161186d565b6001600160a01b03161415801561084d5750336108416040890160208a0161186d565b6001600160a01b031614155b1561086b5760405163017ae39960e11b815260040160405180910390fd5b600061087d604086016020870161186d565b6001600160a01b0316141580156108ac5750336108a0604086016020870161186d565b6001600160a01b031614155b156108ca5760405163017ae39960e11b815260040160405180910390fd5b60006108d68883610478565b905060006108e48684610426565b905081811015610907576040516372351e5360e01b815260040160405180910390fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663137c29fe6109426101fd8c61179a565b61094c30876110e4565b61095960208e018e61186d565b6109628e611115565b60405160200161097190611a8e565b60408051601f1981840301815260608301909152602e808352909190611d3960208301396040516020016109a6929190611ba1565b6040516020818303038152906040528e8e6040518863ffffffff1660e01b81526004016109d99796959493929190611bee565b600060405180830381600087803b1580156109f357600080fd5b505af1158015610a07573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663137c29fe610a47886101fd9061179a565b610a5130856110e4565b610a5e60208b018b61186d565b610a678b611115565b604051602001610a7690611a8e565b60408051601f1981840301815260608301909152602e808352909190611d396020830139604051602001610aab929190611ba1565b6040516020818303038152906040528b8b6040518863ffffffff1660e01b8152600401610ade9796959493929190611bee565b600060405180830381600087803b158015610af857600080fd5b505af1158015610b0c573d6000803e3d6000fd5b50610b219250505060608a0160408b0161186d565b6001600160a01b031663a9059cbb610b3c602089018961186d565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018690526044016020604051808303816000875af1158015610b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bad9190611948565b50610bbe60a08a0160808b0161186d565b6001600160a01b031663a9059cbb610bd960208c018c61186d565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015610c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4a9190611948565b50610c5b60a08a0160808b0161186d565b6001600160a01b031663a9059cbb8b610c748585611a41565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce39190611948565b50610cf460608a0160408b0161186d565b6001600160a01b03167f8a181b821b6fbc45fb158a5ade70964c9d58849c1ac3cd4078aa9cff7f5d2049610d2b60208c018c61186d565b610d3860208a018a61186d565b868d6080016020810190610d4c919061186d565b87610d578189611a41565b604080516001600160a01b039788168152958716602087015285019390935293166060830152608082019290925260a081019190915260c00160405180910390a250505050505050505050565b610db88787878787878761012e8e8c610507565b50505050505050565b6000610775866001600160a01b031663777adcf06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e289190611a71565b8787878787610f06565b7f64d58e5a032b3dff51a1bebcb1818be4d39cf1e8a658e3ca52bba8542b638224610e60602085018561186d565b610e70604086016020870161186d565b610e80606087016040880161186d565b610e90608088016060890161186d565b610ea060a0890160808a0161186d565b610eb060c08a0160a08b0161186d565b610ec060e08b0160c08c01611c81565b610ed16101008c0160e08d01611c81565b610edf6101008d018d61196a565b8c8c604051610ef99c9b9a99989796959493929190611c9c565b60405180910390a1505050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166330f28b7a610f436101fd8861179a565b610f4d30866110e4565b610f5a60208a018a61186d565b88886040518663ffffffff1660e01b8152600401610f7c9594939291906118f0565b600060405180830381600087803b158015610f9657600080fd5b505af1158015610faa573d6000803e3d6000fd5b50610fbf92505050606086016040870161186d565b60405163095ea7b360e01b81526001600160a01b03898116600483015260248201859052919091169063095ea7b3906044016020604051808303816000875af1158015611010573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110349190611948565b5060006001600160a01b0388166317f565d288856110566101008b018b61196a565b6040518563ffffffff1660e01b815260040161107594939291906119b1565b6020604051808303816000875af1158015611094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b891906119d9565b90506110c48682610478565b81101561041b576040516372351e5360e01b815260040160405180910390fd5b604080518082018252600080825260209182015281518083019092526001600160a01b039390931681529182015290565b600060405160200161112690611a8e565b60408051601f1981840301815291905280516020918201209061114b9084018461186d565b61115b604085016020860161186d565b61116b606086016040870161186d565b61117b608087016060880161186d565b61118b60a088016080890161186d565b61119b60c0890160a08a0161186d565b6111ab60e08a0160c08b01611c81565b6111bc6101008b0160e08c01611c81565b6111ca6101008c018c61196a565b6040516111d8929190611d28565b60408051918290038220602083019b909b526001600160a01b03998a16908201529688166060880152948716608087015292861660a086015290851660c085015290931660e083015265ffffffffffff9283166101008301529190911661012082015261014081019190915261016001604051602081830303815290604052805190602001209050919050565b6001600160a01b038116811461127a57600080fd5b50565b6000610120828403121561129057600080fd5b50919050565b60008083601f8401126112a857600080fd5b50813567ffffffffffffffff8111156112c057600080fd5b6020830191508360208285010111156112d857600080fd5b9250929050565b60008060008060008060a087890312156112f857600080fd5b863561130381611265565b9550602087013561131381611265565b9450604087013567ffffffffffffffff8082111561133057600080fd5b61133c8a838b0161127d565b9550606089013591508082111561135257600080fd5b5061135f89828a01611296565b979a9699509497949695608090950135949350505050565b6000806040838503121561138a57600080fd5b823567ffffffffffffffff8111156113a157600080fd5b6113ad8582860161127d565b95602094909401359450505050565b600080604083850312156113cf57600080fd5b823567ffffffffffffffff808211156113e757600080fd5b6113f38683870161127d565b9350602085013591508082111561140957600080fd5b506114168582860161127d565b9150509250929050565b60008060008060006080868803121561143857600080fd5b853561144381611265565b9450602086013567ffffffffffffffff8082111561146057600080fd5b61146c89838a0161127d565b9550604088013591508082111561148257600080fd5b5061148f88828901611296565b96999598509660600135949350505050565b80356114ac81611265565b919050565b60008060008060008060008060c0898b0312156114cd57600080fd5b6114d6896114a1565b9750602089013567ffffffffffffffff808211156114f357600080fd5b6114ff8c838d0161127d565b985060408b013591508082111561151557600080fd5b6115218c838d01611296565b909850965060608b013591508082111561153a57600080fd5b6115468c838d0161127d565b955060808b013591508082111561155c57600080fd5b506115698b828c01611296565b999c989b50969995989497949560a00135949350505050565b600080600080600080600060a0888a03121561159d57600080fd5b87356115a881611265565b9650602088013567ffffffffffffffff808211156115c557600080fd5b6115d18b838c0161127d565b975060408a01359150808211156115e757600080fd5b6115f38b838c01611296565b909750955060608a013591508082111561160c57600080fd5b6116188b838c0161127d565b945060808a013591508082111561162e57600080fd5b5061163b8a828b01611296565b989b979a50959850939692959293505050565b60008060006040848603121561166357600080fd5b833567ffffffffffffffff8082111561167b57600080fd5b6116878783880161127d565b9450602086013591508082111561169d57600080fd5b506116aa86828701611296565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156116f1576116f16116b7565b60405290565b803565ffffffffffff811681146114ac57600080fd5b600082601f83011261171e57600080fd5b813567ffffffffffffffff80821115611739576117396116b7565b604051601f8301601f19908116603f01168101908282118183101715611761576117616116b7565b8160405283815286602085880101111561177a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600061012082360312156117ad57600080fd5b6117b56116cd565b6117be836114a1565b81526117cc602084016114a1565b60208201526117dd604084016114a1565b60408201526117ee606084016114a1565b60608201526117ff608084016114a1565b608082015261181060a084016114a1565b60a082015261182160c084016116f7565b60c082015261183260e084016116f7565b60e08201526101008084013567ffffffffffffffff81111561185357600080fd5b61185f3682870161170d565b918301919091525092915050565b60006020828403121561187f57600080fd5b813561188a81611265565b9392505050565b6118af82825180516001600160a01b03168252602090810151910152565b60208101516040830152604081015160608301525050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006101006118ff8389611891565b86516001600160a01b03166080840152602087015160a08401526001600160a01b03861660c084015260e0830181905261193c81840185876118c7565b98975050505050505050565b60006020828403121561195a57600080fd5b8151801515811461188a57600080fd5b6000808335601e1984360301811261198157600080fd5b83018035915067ffffffffffffffff82111561199c57600080fd5b6020019150368190038213156112d857600080fd5b60018060a01b03851681528360208201526060604082015260006107756060830184866118c7565b6000602082840312156119eb57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610472576104726119f2565b600082611a3c57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610472576104726119f2565b6001600160a01b038316815260a0810161188a6020830184611891565b600060208284031215611a8357600080fd5b815161188a81611265565b66092dce8cadce8560cb1b81526d1859191c995cdcc81bdddb995c8b60921b60078201526e1859191c995cdcc8199a5b1b195c8b608a1b6015820152701859191c995cdcc81d1bdad95b93dd5d0b607a1b6024820152711d5a5b9d0c4d8c08185b5bdd5b9d13dd5d0b60721b60358201526f1859191c995cdcc81d1bdad95b925b8b60821b6047820152701d5a5b9d0c4d8c08185b5bdd5b9d125b8b607a1b6057820152711d5a5b9d0d0e08195e1c1a5c985d1a5bdb8b60721b60688201526c1d5a5b9d0d0e081b9bdb98d94b609a1b607a8201526a627974657320646174612960a81b608782015260920190565b60005b83811015611b98578181015183820152602001611b80565b50506000910152565b6e496e74656e74207769746e6573732960881b815260008351611bcb81600f850160208801611b7d565b835190830190611be281600f840160208801611b7d565b01600f01949350505050565b6000610140611bfd838b611891565b88516001600160a01b03166080840152602089015160a08401526001600160a01b03881660c084015260e083018790526101008301819052855190830181905261016090611c518183860160208a01611b7d565b601f01601f191683018381038201610120850152611c7282820186886118c7565b9b9a5050505050505050505050565b600060208284031215611c9357600080fd5b61046f826116f7565b6001600160a01b038d811682528c811660208301528b811660408301528a811660608301528981166080830152881660a082015265ffffffffffff87811660c0830152861660e08201526101406101008201819052600090611d0190830186886118c7565b828103610120840152611d158185876118c7565b9f9e505050505050505050505050505050565b818382376000910190815291905056fe546f6b656e5065726d697373696f6e73286164647265737320746f6b656e2c75696e7432353620616d6f756e7429a26469706673582212202eb261fcce0071f3e5f19cc2c338ccab551a2785dd32fcee86005412e467796164736f6c63430008190033",
  "devdoc": {
    "details": "This contract uses the SignatureTransfer contract for secure transfers with signatures.",
    "events": {
      "IntentSignal(address,address,address,uint160,address,uint160,uint48,uint48,bytes,bytes)": {
        "details": "Emitted when an intent to trade is signaled.",
        "params": {
          "amountIn": "The amount of the tokenIn the owner wants to receive.",
          "amountOut": "The amount of the tokenOut the owner wants to sell or exchange.",
          "data": "Additional data that may be used in the trade execution.",
          "exp": "The expiration time of the intent.",
          "filler": "The address of the filler, if any, that the intent is specifically directed to.",
          "nonce": "A nonce to ensure the uniqueness of the intent.",
          "owner": "The address of the intent owner.",
          "signature": "The signature of the owner authorizing the intent.",
          "tokenIn": "The address of the token the owner wants to receive in exchange.",
          "tokenOut": "The address of the token the owner wants to sell or exchange."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "buyFromBrokerbot(address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)": {
        "details": "This function allows a user to buy tokens from a Brokerbot by transferring the specified amount of investment token to the Brokerbot and receiving the purchased tokens in return. The function ensures that the offer is not too low by comparing the invested amount to the bid price.",
        "params": {
          "amount": "The amount of tokens to invest in the purchase.",
          "bot": "The Brokerbot from which tokens are being bought.",
          "intent": "The trade intent data structure.",
          "signature": "The signature of the intent owner."
        },
        "returns": {
          "_0": "The amount of tokens received from the Brokerbot."
        }
      },
      "buyFromBrokerbot(address,address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)": {
        "details": "This function allows a user to buy tokens from a Brokerbot through a specified PaymentHub. It transfers the specified amount of investment token to the Brokerbot and receives the purchased tokens in return. The function ensures that the offer is not too low by comparing the invested amount to the bid price.",
        "params": {
          "bot": "The Brokerbot from which tokens are being bought.",
          "hub": "The PaymentHub through which the transaction is processed.",
          "intent": "The trade intent data structure.",
          "investAmount": "The amount of tokens to invest in the purchase.",
          "signature": "The signature of the intent owner."
        },
        "returns": {
          "_0": "The amount of tokens received from the Brokerbot."
        }
      },
      "getAsk((address,address,address,uint160,address,uint160,uint48,uint48,bytes),uint256)": {
        "details": "Ideally called with an intent where tokenIn is a currency with many (e.g. 18) decimals.TokenOut can have very few decimals.",
        "params": {
          "amount": "The amount of tokenOut.",
          "intent": "The trade intent data structure."
        },
        "returns": {
          "_0": "The calculated asking price."
        }
      },
      "getBid((address,address,address,uint160,address,uint160,uint48,uint48,bytes),uint256)": {
        "details": "Ideally called with an intent where tokenOut is a currency with many (e.g. 18) decimals.TokenIn can have very few decimals.",
        "params": {
          "amount": "The amount of tokenIn.",
          "intent": "The trade intent data structure."
        },
        "returns": {
          "_0": "The calculated bidding price."
        }
      },
      "getMaxValidAmount((address,address,address,uint160,address,uint160,uint48,uint48,bytes),(address,address,address,uint160,address,uint160,uint48,uint48,bytes))": {
        "params": {
          "buyerIntent": "The buyer's trade intent.",
          "sellerIntent": "The seller's trade intent."
        },
        "returns": {
          "_0": "The maximum valid trade amount."
        }
      },
      "process(address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes)": {
        "params": {
          "buyerIntent": "The buyer's trade intent.",
          "buyerSig": "The buyer's signature.",
          "feeRecipient": "The address that will receive the fee.",
          "sellerIntent": "The seller's trade intent.",
          "sellerSig": "The seller's signature."
        }
      },
      "process(address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)": {
        "params": {
          "amount": "The amount of the token to trade.",
          "buyerIntent": "The buyer's trade intent.",
          "buyerSig": "The buyer's signature.",
          "feeRecipient": "The address that will receive the fee.",
          "sellerIntent": "The seller's trade intent.",
          "sellerSig": "The seller's signature."
        }
      },
      "sellToBrokerbot(address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)": {
        "details": "This function allows a user to sell tokens to a Brokerbot by transferring the specified amount of tokens to the Brokerbot and receiving the payment in return. The function ensures that the received amount is not lower than the ask price.",
        "params": {
          "bot": "The Brokerbot to which tokens are being sold.",
          "intent": "The trade intent data structure.",
          "signature": "The signature of the intent owner.",
          "soldShares": "The amount of tokens being sold."
        },
        "returns": {
          "_0": "The amount of payment received from the Brokerbot."
        }
      },
      "sellToBrokerbot(address,address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)": {
        "details": "This function allows a user to sell tokens to a Brokerbot through a specified PaymentHub. It transfers the specified amount of tokens to the Brokerbot and receives the payment in return. The function ensures that the received amount is not lower than the ask price.",
        "params": {
          "bot": "The Brokerbot to which tokens are being sold.",
          "hub": "The PaymentHub through which the transaction is processed.",
          "intent": "The trade intent data structure.",
          "signature": "The signature of the intent owner.",
          "soldShares": "The amount of tokens being sold."
        },
        "returns": {
          "_0": "The amount of payment received from the Brokerbot."
        }
      },
      "signalIntent((address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes)": {
        "params": {
          "intent": "The trade intent data structure. ",
          "signature": "The signature of the intent owner."
        }
      }
    },
    "title": "TradeReactor Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyFromBrokerbot(address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)": {
        "notice": "Buys tokens from a Brokerbot."
      },
      "buyFromBrokerbot(address,address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)": {
        "notice": "Buys tokens from a Brokerbot using a specific PaymentHub."
      },
      "getAsk((address,address,address,uint160,address,uint160,uint48,uint48,bytes),uint256)": {
        "notice": "Calculates the asking price for a given amount of tokenOut."
      },
      "getBid((address,address,address,uint160,address,uint160,uint48,uint48,bytes),uint256)": {
        "notice": "Calculates the bidding price for a given amount of tokenIn."
      },
      "getMaxValidAmount((address,address,address,uint160,address,uint160,uint48,uint48,bytes),(address,address,address,uint160,address,uint160,uint48,uint48,bytes))": {
        "notice": "Determines the maximum valid amount that can be traded based on seller and buyer intents."
      },
      "process(address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes)": {
        "notice": "Processes a trade between a seller and a buyer with the maximum valid amount."
      },
      "process(address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)": {
        "notice": "Processes a trade between a seller and a buyer for a specified amount."
      },
      "sellToBrokerbot(address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)": {
        "notice": "Sells tokens to a Brokerbot."
      },
      "sellToBrokerbot(address,address,(address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes,uint256)": {
        "notice": "Sells tokens to a Brokerbot using a specific PaymentHub."
      },
      "signalIntent((address,address,address,uint160,address,uint160,uint48,uint48,bytes),bytes)": {
        "notice": "A function to publicly signal an intent to buy or sell a token so it can be picked up by the filler for processing. Alternaticely, the owner can directly communicate with the filler, without recording the intent on chain."
      }
    },
    "notice": "This contract handles the signaling and processing of trade intents between buyers and sellers.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}