{
  "address": "0x7F32339263906f639e2a883603ff88C2658451d2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        }
      ],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidContractSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSigner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OverFilled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "signatureDeadline",
          "type": "uint256"
        }
      ],
      "name": "SignatureExpired",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "word",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mask",
          "type": "uint256"
        }
      ],
      "name": "UnorderedNonceInvalidation",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        }
      ],
      "name": "findFreeNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ISignatureTransfer.TokenPermissions",
              "name": "permitted",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISignatureTransfer.PermitTransferFrom",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "getPermittedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wordPos",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mask",
          "type": "uint256"
        }
      ],
      "name": "invalidateUnorderedNonces",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "isFreeNonce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nonceBitmap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "partialFills",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ISignatureTransfer.TokenPermissions",
              "name": "permitted",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISignatureTransfer.PermitTransferFrom",
          "name": "permit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "requestedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISignatureTransfer.SignatureTransferDetails",
          "name": "transferDetails",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "permitTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ISignatureTransfer.TokenPermissions",
              "name": "permitted",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISignatureTransfer.PermitTransferFrom",
          "name": "permit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "requestedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISignatureTransfer.SignatureTransferDetails",
          "name": "transferDetails",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "witness",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "witnessTypeString",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "permitWitnessTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x38f8a51006425212df897ebc617e14957aa21e895d329d375e101cd4486c3eaf",
  "receipt": {
    "to": null,
    "from": "0x447ffD9a116efb3D77f47802cc4869C3730f723C",
    "contractAddress": "0x7F32339263906f639e2a883603ff88C2658451d2",
    "transactionIndex": 209,
    "gasUsed": "880533",
    "logsBloom": "0x
    "blockHash": "0x698a80827b5325059c721d485b550d51f4b9f929b7eb8d81220f4a32b1c36b4e",
    "transactionHash": "0x38f8a51006425212df897ebc617e14957aa21e895d329d375e101cd4486c3eaf",
    "logs": [
      {
        "transactionIndex": 209,
        "blockNumber": 54696166,
        "transactionHash": "0x38f8a51006425212df897ebc617e14957aa21e895d329d375e101cd4486c3eaf",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000447ffd9a116efb3d77f47802cc4869c3730f723c",
          "0x000000000000000000000000957ef9a930a80e7553ba261220976f3276df3c9e"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000320d710ad920000000000000000000000000000000000000000000000000020c5544eea52035f000000000000000000000000000000000000000000000060bce79481d337dca700000000000000000000000000000000000000000000000020c23377d9a4715f000000000000000000000000000000000000000000000060bceab558e3e56ea7",
        "logIndex": 712,
        "blockHash": "0x698a80827b5325059c721d485b550d51f4b9f929b7eb8d81220f4a32b1c36b4e"
      }
    ],
    "blockNumber": 54696166,
    "cumulativeGasUsed": "21840148",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3e473bf99a1e7b7e4b3feb6552bf7ee8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContractSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverFilled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signatureDeadline\",\"type\":\"uint256\"}],\"name\":\"SignatureExpired\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"word\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"UnorderedNonceInvalidation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"findFreeNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"getPermittedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wordPos\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"invalidateUnorderedNonces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"isFreeNonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonceBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partialFills\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails\",\"name\":\"transferDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails\",\"name\":\"transferDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"witness\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"witnessTypeString\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitWitnessTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidAmount(uint256)\":[{\"params\":{\"maxAmount\":\"The maximum amount a spender can request to transfer\"}}],\"LengthMismatch()\":[{\"details\":\"If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\"}],\"SignatureExpired(uint256)\":[{\"params\":{\"signatureDeadline\":\"The timestamp at which a signature is no longer valid\"}}]},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Uses cached version if chainid and address are unchanged from construction.\"},\"invalidateUnorderedNonces(uint256,uint256)\":{\"details\":\"The wordPos is maxed at type(uint248).max\",\"params\":{\"mask\":\"A bitmap masked against msg.sender's current bitmap at the word position\",\"wordPos\":\"A number to index the nonceBitmap at\"}},\"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)\":{\"details\":\"Reverts if the requested amount is greater than the permitted signed amount\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"The spender's requested transfer details for the permitted token\"}},\"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)\":{\"details\":\"The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definitionReverts if the requested amount is greater than the permitted signed amount\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"The spender's requested transfer details for the permitted token\",\"witness\":\"Extra data to include when checking the user signature\",\"witnessTypeString\":\"The EIP-712 type definition for remaining string stub of the typehash\"}}},\"stateVariables\":{\"nonceBitmap\":{\"details\":\"Uses unordered nonces so that permit messages do not need to be spent in a certain orderThe mapping is indexed first by the token owner, then by an index specified in the nonceIt returns a uint256 bitmapThe index, or wordPosition is capped at type(uint248).max\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidAmount(uint256)\":[{\"notice\":\"Thrown when the requested amount for a transfer is larger than the permissioned amount\"}],\"InvalidContractSignature()\":[{\"notice\":\"Thrown when the recovered contract signature is incorrect\"}],\"InvalidNonce()\":[{\"notice\":\"Thrown when validating that the inputted nonce has not been used\"}],\"InvalidSignature()\":[{\"notice\":\"Thrown when the recovered signer is equal to the zero address\"}],\"InvalidSignatureLength()\":[{\"notice\":\"Thrown when the passed in signature is not a valid length\"}],\"InvalidSigner()\":[{\"notice\":\"Thrown when the recovered signer does not equal the claimedSigner\"}],\"LengthMismatch()\":[{\"notice\":\"Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\"}],\"SignatureExpired(uint256)\":[{\"notice\":\"Thrown when validating an inputted signature that is stale\"}]},\"events\":{\"UnorderedNonceInvalidation(address,uint256,uint256)\":{\"notice\":\"Emits an event when the owner successfully invalidates an unordered nonce.\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"Returns the domain separator for the current chain.\"},\"findFreeNonce(address,uint256)\":{\"notice\":\"Find a nonce that looks free given the data on the blockchain. Of course, this method cannot take into account nonces of valid but unused permits.\"},\"invalidateUnorderedNonces(uint256,uint256)\":{\"notice\":\"Invalidates the bits specified in mask for the bitmap at the word position\"},\"nonceBitmap(address,uint256)\":{\"notice\":\"A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\"},\"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)\":{\"notice\":\"Transfers a token using a signed permit message\"},\"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)\":{\"notice\":\"Transfers a token using a signed permit messageIncludes extra data provided by the caller to verify signature over\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/lib/SignatureTransfer.sol\":\"SignatureTransfer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/ERC20/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0x2224189bcdeb28cbadfdb8d126c278df60ec39875c7929e7ffa9e2055cded960\",\"license\":\"MIT\"},\"src/lib/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * Copied from github.com/Uniswap/permit2/blob/main/src/SignatureTransfer.sol and modified.\\n */\\n\\n/// @notice EIP712 helpers for permit2\\n/// @dev Maintains cross-chain replay protection in the event of a fork\\n/// @dev Reference: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/EIP712.sol\\ncontract EIP712 {\\n    // Cache the domain separator as an immutable value, but also store the chain id that it\\n    // corresponds to, in order to invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private constant _HASHED_NAME = keccak256(\\\"Permit2\\\"); // TODO: what name should we use here?\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    constructor() {\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME);\\n    }\\n\\n    /// @notice Returns the domain separator for the current chain.\\n    /// @dev Uses cached version if chainid and address are unchanged from construction.\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        return block.chainid == _CACHED_CHAIN_ID\\n            ? _CACHED_DOMAIN_SEPARATOR\\n            : _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME);\\n    }\\n\\n    /// @notice Builds a domain separator using the current chainId and contract address.\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 nameHash) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, block.chainid, address(this)));\\n    }\\n\\n    /// @notice Creates an EIP-712 typed data hash\\n    function _hashTypedData(bytes32 dataHash) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), dataHash));\\n    }\\n}\",\"keccak256\":\"0x462809d614ef3ff0f66b648b6f42a1fdeaddfd9d67a8ebb31892b841d55035e7\",\"license\":\"MIT\"},\"src/lib/ISignatureTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title SignatureTransfer\\n/// @notice Handles ERC20 token transfers through signature based actions\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface ISignatureTransfer {\\n    /// @notice Thrown when the requested amount for a transfer is larger than the permissioned amount\\n    /// @param maxAmount The maximum amount a spender can request to transfer\\n    error InvalidAmount(uint256 maxAmount);\\n\\n    /// @notice Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\\n    /// @dev If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\\n    error LengthMismatch();\\n\\n    /// @notice Emits an event when the owner successfully invalidates an unordered nonce.\\n    event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask);\\n\\n    /// @notice The token and amount details for a transfer signed in the permit transfer signature\\n    struct TokenPermissions {\\n        // ERC20 token address\\n        address token;\\n        // the maximum amount that can be spent\\n        uint256 amount;\\n    }\\n\\n    /// @notice The signed permit message for a single token transfer\\n    struct PermitTransferFrom {\\n        TokenPermissions permitted;\\n        // a unique value for every token owner's signature to prevent signature replays\\n        uint256 nonce;\\n        // deadline on the permit signature\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Specifies the recipient address and amount for batched transfers.\\n    /// @dev Recipients and amounts correspond to the index of the signed token permissions array.\\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount.\\n    struct SignatureTransferDetails {\\n        // recipient address\\n        address to;\\n        // spender requested amount\\n        uint256 requestedAmount;\\n    }\\n\\n    /// @notice A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\\n    /// @dev Uses unordered nonces so that permit messages do not need to be spent in a certain order\\n    /// @dev The mapping is indexed first by the token owner, then by an index specified in the nonce\\n    /// @dev It returns a uint256 bitmap\\n    /// @dev The index, or wordPosition is capped at type(uint248).max\\n    function nonceBitmap(address, uint256) external view returns (uint256);\\n\\n    /// @notice Transfers a token using a signed permit message\\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n    /// @param permit The permit data signed over by the owner\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails The spender's requested transfer details for the permitted token\\n    /// @param signature The signature to verify\\n    function permitTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes calldata signature\\n    ) external;\\n\\n    /// @notice Transfers a token using a signed permit message\\n    /// @notice Includes extra data provided by the caller to verify signature over\\n    /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n    /// @param permit The permit data signed over by the owner\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails The spender's requested transfer details for the permitted token\\n    /// @param witness Extra data to include when checking the user signature\\n    /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\\n    /// @param signature The signature to verify\\n    function permitWitnessTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes32 witness,\\n        string calldata witnessTypeString,\\n        bytes calldata signature\\n    ) external;\\n\\n\\n    /// @notice Invalidates the bits specified in mask for the bitmap at the word position\\n    /// @dev The wordPos is maxed at type(uint248).max\\n    /// @param wordPos A number to index the nonceBitmap at\\n    /// @param mask A bitmap masked against msg.sender's current bitmap at the word position\\n    function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external;\\n}\",\"keccak256\":\"0x86104c66cc0214eb509507b3c4f8d01867a4c6ccf438ed2ec8290894b97d90a9\",\"license\":\"MIT\"},\"src/lib/PermitHash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * Copied from github.com/Uniswap/permit2/blob/main/src/SignatureTransfer.sol and modified.\\n */\\nimport {ISignatureTransfer} from \\\"./ISignatureTransfer.sol\\\";\\n\\nlibrary PermitHash {\\n    bytes32 public constant _PERMIT_DETAILS_TYPEHASH =\\n        keccak256(\\\"PermitDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)\\\");\\n\\n    bytes32 public constant _PERMIT_SINGLE_TYPEHASH = keccak256(\\n        \\\"PermitSingle(PermitDetails details,address spender,uint256 sigDeadline)PermitDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)\\\"\\n    );\\n\\n    bytes32 public constant _TOKEN_PERMISSIONS_TYPEHASH = keccak256(\\\"TokenPermissions(address token,uint256 amount)\\\");\\n\\n    bytes32 public constant _PERMIT_TRANSFER_FROM_TYPEHASH = keccak256(\\n        \\\"PermitTransferFrom(TokenPermissions permitted,address spender,uint256 nonce,uint256 deadline)TokenPermissions(address token,uint256 amount)\\\"\\n    );\\n\\n    string public constant _TOKEN_PERMISSIONS_TYPESTRING = \\\"TokenPermissions(address token,uint256 amount)\\\";\\n\\n    string public constant _PERMIT_TRANSFER_FROM_WITNESS_TYPEHASH_STUB =\\n        \\\"PermitWitnessTransferFrom(TokenPermissions permitted,address spender,uint256 nonce,uint256 deadline,\\\";\\n\\n    function hash(ISignatureTransfer.PermitTransferFrom memory permit) internal view returns (bytes32) {\\n        bytes32 tokenPermissionsHash = _hashTokenPermissions(permit.permitted);\\n        return keccak256(\\n            abi.encode(_PERMIT_TRANSFER_FROM_TYPEHASH, tokenPermissionsHash, msg.sender, permit.nonce, permit.deadline)\\n        );\\n    }\\n\\n    function hashWithWitness(\\n        ISignatureTransfer.PermitTransferFrom memory permit,\\n        bytes32 witness,\\n        string calldata witnessTypeString\\n    ) internal view returns (bytes32) {\\n        bytes32 typeHash = keccak256(abi.encodePacked(_PERMIT_TRANSFER_FROM_WITNESS_TYPEHASH_STUB, witnessTypeString));\\n\\n        bytes32 tokenPermissionsHash = _hashTokenPermissions(permit.permitted);\\n        return keccak256(abi.encode(typeHash, tokenPermissionsHash, msg.sender, permit.nonce, permit.deadline, witness));\\n    }\\n\\n    function _hashTokenPermissions(ISignatureTransfer.TokenPermissions memory permitted)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(_TOKEN_PERMISSIONS_TYPEHASH, permitted));\\n    }\\n}\",\"keccak256\":\"0x9ad760b0f02bc0c9f96e0f655eec4c171b3d88f015e66b650dc99f3cceb15c6a\",\"license\":\"MIT\"},\"src/lib/SignatureTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * Copied from github.com/Uniswap/permit2/blob/main/src/SignatureTransfer.sol and modified.\\n */\\nimport {ISignatureTransfer} from \\\"./ISignatureTransfer.sol\\\";\\nimport {IERC20} from \\\"../ERC20/IERC20.sol\\\";\\nimport {SignatureVerification} from \\\"./SignatureVerification.sol\\\";\\nimport {PermitHash} from \\\"./PermitHash.sol\\\";\\nimport {EIP712} from \\\"./EIP712.sol\\\";\\n\\ncontract SignatureTransfer is ISignatureTransfer, EIP712 {\\n\\n    using SignatureVerification for bytes;\\n    using PermitHash for PermitTransferFrom;\\n\\n    /// @inheritdoc ISignatureTransfer\\n    mapping(address => mapping(uint256 => uint256)) public nonceBitmap;\\n    mapping(address => mapping(uint256 => uint256)) public partialFills;\\n\\n    /// @notice Thrown when validating an inputted signature that is stale\\n    /// @param signatureDeadline The timestamp at which a signature is no longer valid\\n    error SignatureExpired(uint256 signatureDeadline);\\n\\n    /// @notice Thrown when validating that the inputted nonce has not been used\\n    error InvalidNonce();\\n\\n    error OverFilled();\\n\\n    function permitTransferFrom(PermitTransferFrom memory permit, SignatureTransferDetails calldata transferDetails, address owner, bytes calldata signature) external {\\n        _permitTransferFrom(permit, transferDetails, owner, permit.hash(), signature);\\n    }\\n\\n    /// @inheritdoc ISignatureTransfer\\n    function permitWitnessTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes32 witness,\\n        string calldata witnessTypeString,\\n        bytes calldata signature\\n    ) external {\\n        _permitTransferFrom(permit, transferDetails, owner, permit.hashWithWitness(witness, witnessTypeString), signature);\\n    }\\n\\n    /**\\n     * Find a nonce that looks free given the data on the blockchain.\\n     * Of course, this method cannot take into account nonces of valid but unused permits.\\n     */\\n    function findFreeNonce(address owner, uint256 start) public view returns (uint256){\\n        while (!isFreeNonce(owner, start)){\\n            start++;\\n        }\\n        return start;\\n    }\\n\\n    function isFreeNonce(address owner, uint256 nonce) public view returns (bool){\\n        (uint256 wordPos, uint256 bitPos) = bitmapPositions(nonce);\\n        uint256 bit = 1 << bitPos;\\n        return nonceBitmap[owner][wordPos] & bit == 0 && partialFills[owner][nonce] == 0;\\n    }\\n\\n    function getPermittedAmount(address owner, PermitTransferFrom calldata permit) public view returns (uint256) {\\n        if (isFreeNonce(owner, permit.nonce)){\\n            return permit.permitted.amount - partialFills[owner][permit.nonce];\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice Transfers a token using a signed permit message.\\n    /// @param permit The permit data signed over by the owner\\n    /// @param dataHash The EIP-712 hash of permit data to include when checking signature\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails The spender's requested transfer details for the permitted token\\n    /// @param signature The signature to verify\\n    function _permitTransferFrom(PermitTransferFrom memory permit, SignatureTransferDetails calldata transferDetails, address owner, bytes32 dataHash, bytes calldata signature) private {\\n        uint256 requestedAmount = transferDetails.requestedAmount;\\n\\n        if (block.timestamp > permit.deadline) revert SignatureExpired(permit.deadline);\\n\\n        _useUnorderedNonce(owner, permit.nonce, requestedAmount, permit.permitted.amount);\\n\\n        signature.verify(_hashTypedData(dataHash), owner);\\n\\n        IERC20(permit.permitted.token).transferFrom(owner, transferDetails.to, requestedAmount);\\n    }\\n\\n    /// @inheritdoc ISignatureTransfer\\n    function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external {\\n        nonceBitmap[msg.sender][wordPos] |= mask;\\n\\n        emit UnorderedNonceInvalidation(msg.sender, wordPos, mask);\\n    }\\n\\n    /// @notice Returns the index of the bitmap and the bit position within the bitmap. Used for unordered nonces\\n    /// @param nonce The nonce to get the associated word and bit positions\\n    /// @return wordPos The word position or index into the nonceBitmap\\n    /// @return bitPos The bit position\\n    /// @dev The first 248 bits of the nonce value is the index of the desired bitmap\\n    /// @dev The last 8 bits of the nonce value is the position of the bit in the bitmap\\n    function bitmapPositions(uint256 nonce) private pure returns (uint256 wordPos, uint256 bitPos) {\\n        wordPos = uint248(nonce >> 8);\\n        bitPos = uint8(nonce);\\n    }\\n\\n    /// @notice Checks whether a nonce is taken and sets the bit at the bit position in the bitmap at the word position\\n    /// @param from The address to use the nonce at\\n    /// @param nonce The nonce to spend\\n    function _useUnorderedNonce(address from, uint256 nonce, uint256 amount, uint256 max) internal {\\n        (uint256 wordPos, uint256 bitPos) = bitmapPositions(nonce);\\n        uint256 bit = 1 << bitPos;\\n        uint256 state = nonceBitmap[from][wordPos];\\n        if (state & bit != 0) revert InvalidNonce();\\n\\n        uint256 alreadyFilled = partialFills[from][nonce];\\n        if (alreadyFilled + amount > max) revert OverFilled();\\n        if (alreadyFilled + amount < max){\\n            partialFills[from][nonce] = alreadyFilled + amount;\\n        } else {\\n            if (alreadyFilled > 0) delete partialFills[from][nonce]; // get some gas back \\n            nonceBitmap[from][wordPos] |= bit; // flag done\\n        }\\n    }\\n}\",\"keccak256\":\"0xc5d761714e26c6d8c76aa7a1e617e3febf67f1aafe4a99767bedc4fa8dd732bd\",\"license\":\"MIT\"},\"src/lib/SignatureVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * Copied from github.com/Uniswap/permit2/blob/main/src/SignatureTransfer.sol and modified.\\n */\\nlibrary SignatureVerification {\\n    /// @notice Thrown when the passed in signature is not a valid length\\n    error InvalidSignatureLength();\\n\\n    /// @notice Thrown when the recovered signer is equal to the zero address\\n    error InvalidSignature();\\n\\n    /// @notice Thrown when the recovered signer does not equal the claimedSigner\\n    error InvalidSigner();\\n\\n    /// @notice Thrown when the recovered contract signature is incorrect\\n    error InvalidContractSignature();\\n\\n    bytes32 constant UPPER_BIT_MASK = (0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n\\n    function verify(bytes calldata signature, bytes32 hash, address claimedSigner) internal view {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        if (claimedSigner.code.length == 0) {\\n            if (signature.length == 65) {\\n                (r, s) = abi.decode(signature, (bytes32, bytes32));\\n                v = uint8(signature[64]);\\n            } else if (signature.length == 64) {\\n                // EIP-2098\\n                bytes32 vs;\\n                (r, vs) = abi.decode(signature, (bytes32, bytes32));\\n                s = vs & UPPER_BIT_MASK;\\n                v = uint8(uint256(vs >> 255)) + 27;\\n            } else {\\n                revert InvalidSignatureLength();\\n            }\\n            address signer = ecrecover(hash, v, r, s);\\n            if (signer == address(0)) revert InvalidSignature();\\n            if (signer != claimedSigner) revert InvalidSigner();\\n        } else {\\n            bytes4 magicValue = IERC1271(claimedSigner).isValidSignature(hash, signature);\\n            if (magicValue != IERC1271.isValidSignature.selector) revert InvalidContractSignature();\\n        }\\n    }\\n}\\n\\ninterface IERC1271 {\\n    /// @dev Should return whether the signature provided is valid for the provided data\\n    /// @param hash      Hash of the data to be signed\\n    /// @param signature Signature byte array associated with _data\\n    /// @return magicValue The bytes4 magic value 0x1626ba7e\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\",\"keccak256\":\"0x0a7e2a987eff6d4e75094eb0cd01c4db7c7ad287fb848d6ee802cdd6299345d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052348015600f57600080fd5b504660a0818152604080517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666020808301919091527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a828401526060820194909452306080808301919091528251808303909101815292019052805191012060805260805160a051610eee6100b660003960006101c70152600061026d0152610eee6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80634fe02b44116100665780634fe02b44146100ee5780639444b48d146101165780639a157e6a146101415780639f09829314610154578063fddc23a61461016757600080fd5b8063137c29fe1461009857806330f28b7a146100ad5780633644e515146100c05780633ff9dcb1146100db575b600080fd5b6100ab6100a6366004610b3a565b61018a565b005b6100ab6100bb366004610bea565b6101ad565b6100c86101c3565b6040519081526020015b60405180910390f35b6100ab6100e9366004610c63565b61028f565b6100c86100fc366004610c85565b600060208181529281526040808220909352908152205481565b6100c8610124366004610c85565b600160209081526000928352604080842090915290825290205481565b6100c861014f366004610c85565b6102e8565b6100c8610162366004610caf565b610314565b61017a610175366004610c85565b61036b565b60405190151581526020016100d2565b6101a388888861019c838a8a8a6103d5565b8686610488565b5050505050505050565b6101bc85858561019c89610589565b5050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461461026a5750604080517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666020808301919091527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a82840152466060830152306080808401919091528351808403909101815260a0909201909252805191012090565b507f000000000000000000000000000000000000000000000000000000000000000090565b3360008181526020818152604080832086845282529182902080548517905581518581529081018490527f3704902f963766a4e561bbaab6e6cdc1b1dd12f6e9e99648da8843b3f46b918d910160405180910390a25050565b60005b6102f5838361036b565b61030b578161030381610d04565b9250506102eb565b50805b92915050565b600061032483836040013561036b565b15610363576001600160a01b038316600090815260016020908152604080832085820135845282529091205461035c91840135610d1d565b905061030e565b50600061030e565b6001600160a01b038216600090815260208181526040808320600885901c808552925282205460ff8416906001821b9081161580156103cb57506001600160a01b0386166000908152600160209081526040808320888452909152902054155b9695505050505050565b6000806040518060a0016040528060648152602001610e5560649139848460405160200161040593929190610d30565b604051602081830303815290604052805190602001209050600061042c876000015161060c565b6020808901516040808b01518151938401879052908301849052336060840152608083019190915260a082015260c0810188905290915060e0016040516020818303038152906040528051906020012092505050949350505050565b60408601516020860135904211156104c457866040015160405163cd21db4f60e01b81526004016104bb91815260200190565b60405180910390fd5b6104dc858860200151838a600001516020015161067d565b6104f26104e8856107bf565b84908490886107ee565b8651516001600160a01b03166323b872dd8661051160208a018a610d6e565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018490526064016020604051808303816000875af1158015610565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a39190610d90565b600080610599836000015161060c565b60208085015160408087015181517f939c21a48a8dbe3a9a2404a1d46691e4d39f6583d6ec6b35714604c986d8010694810194909452908301849052336060840152608083019190915260a082015290915060c00160405160208183030381529060405280519060200120915050919050565b60007f618358ac3db8dc274f0cd8829da7e234bd48cd73c4a740aede1adec9846d06a18260405160200161066092919091825280516001600160a01b03166020808401919091520151604082015260600190565b604051602081830303815290604052805190602001209050919050565b6001600160a01b038416600090815260208181526040808320600887901c80855292529091205460ff8516906001821b90818116156106cf57604051633ab3447f60e11b815260040160405180910390fd5b6001600160a01b03881660009081526001602090815260408083208a8452909152902054856106fe8883610db2565b111561071d5760405163447f595960e11b815260040160405180910390fd5b856107288883610db2565b1015610761576107388782610db2565b6001600160a01b038a1660009081526001602090815260408083208c84529091529020556107b4565b801561078c576001600160a01b03891660009081526001602090815260408083208b84529091528120555b6001600160a01b03891660009081526020818152604080832088845290915290208054841790555b505050505050505050565b60006107c96101c3565b60405161190160f01b6020820152602281019190915260428101839052606201610660565b6000806000836001600160a01b03163b60000361095b5760418690036108435761081a86880188610c63565b90935091508686604081811061083257610832610dc5565b919091013560f81c915061089b9050565b604086900361088257600061085a87890189610c63565b9094506001600160ff1b0381169350905061087a60ff82901c601b610ddb565b91505061089b565b604051634be6321b60e01b815260040160405180910390fd5b6040805160008082526020820180845288905260ff841692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156108ef573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661092357604051638baa579f60e01b815260040160405180910390fd5b846001600160a01b0316816001600160a01b03161461095557604051632057875960e21b815260040160405180910390fd5b50610a02565b604051630b135d3f60e11b81526000906001600160a01b03861690631626ba7e9061098e9089908c908c90600401610df4565b602060405180830381865afa1580156109ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cf9190610e2a565b90506001600160e01b03198116630b135d3f60e11b146101a357604051632c19a72f60e21b815260040160405180910390fd5b50505050505050565b80356001600160a01b0381168114610a2257600080fd5b919050565b60008183036080811215610a3a57600080fd5b6040516060810167ffffffffffffffff8282108183111715610a6c57634e487b7160e01b600052604160045260246000fd5b8294506040841215610a7d57600080fd5b60a0830193508184108185111715610aa557634e487b7160e01b600052604160045260246000fd5b5082604052610ab385610a0b565b815260208501356080830152808252506040840135602082015260608401356040820152505092915050565b60006040828403121561030b57600080fd5b60008083601f840112610b0357600080fd5b50813567ffffffffffffffff811115610b1b57600080fd5b602083019150836020828501011115610b3357600080fd5b9250929050565b600080600080600080600080610140898b031215610b5757600080fd5b610b618a8a610a27565b9750610b708a60808b01610adf565b9650610b7e60c08a01610a0b565b955060e0890135945061010089013567ffffffffffffffff80821115610ba357600080fd5b610baf8c838d01610af1565b90965094506101208b0135915080821115610bc957600080fd5b50610bd68b828c01610af1565b999c989b5096995094979396929594505050565b60008060008060006101008688031215610c0357600080fd5b610c0d8787610a27565b9450610c1c8760808801610adf565b9350610c2a60c08701610a0b565b925060e086013567ffffffffffffffff811115610c4657600080fd5b610c5288828901610af1565b969995985093965092949392505050565b60008060408385031215610c7657600080fd5b50508035926020909101359150565b60008060408385031215610c9857600080fd5b610ca183610a0b565b946020939093013593505050565b60008082840360a0811215610cc357600080fd5b610ccc84610a0b565b92506080601f1982011215610ce057600080fd5b506020830190509250929050565b634e487b7160e01b600052601160045260246000fd5b600060018201610d1657610d16610cee565b5060010190565b8181038181111561030e5761030e610cee565b6000845160005b81811015610d515760208188018101518583015201610d37565b506000908301908152838582376000930192835250909392505050565b600060208284031215610d8057600080fd5b610d8982610a0b565b9392505050565b600060208284031215610da257600080fd5b81518015158114610d8957600080fd5b8082018082111561030e5761030e610cee565b634e487b7160e01b600052603260045260246000fd5b60ff818116838216019081111561030e5761030e610cee565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600060208284031215610e3c57600080fd5b81516001600160e01b031981168114610d8957600080fdfe5065726d69745769746e6573735472616e7366657246726f6d28546f6b656e5065726d697373696f6e73207065726d69747465642c61646472657373207370656e6465722c75696e74323536206e6f6e63652c75696e7432353620646561646c696e652ca2646970667358221220c58333beb0020e8f0c3a6162371b6606e528de6f9c4701cf2cc97f7385dd5fb864736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80634fe02b44116100665780634fe02b44146100ee5780639444b48d146101165780639a157e6a146101415780639f09829314610154578063fddc23a61461016757600080fd5b8063137c29fe1461009857806330f28b7a146100ad5780633644e515146100c05780633ff9dcb1146100db575b600080fd5b6100ab6100a6366004610b3a565b61018a565b005b6100ab6100bb366004610bea565b6101ad565b6100c86101c3565b6040519081526020015b60405180910390f35b6100ab6100e9366004610c63565b61028f565b6100c86100fc366004610c85565b600060208181529281526040808220909352908152205481565b6100c8610124366004610c85565b600160209081526000928352604080842090915290825290205481565b6100c861014f366004610c85565b6102e8565b6100c8610162366004610caf565b610314565b61017a610175366004610c85565b61036b565b60405190151581526020016100d2565b6101a388888861019c838a8a8a6103d5565b8686610488565b5050505050505050565b6101bc85858561019c89610589565b5050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461461026a5750604080517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666020808301919091527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a82840152466060830152306080808401919091528351808403909101815260a0909201909252805191012090565b507f000000000000000000000000000000000000000000000000000000000000000090565b3360008181526020818152604080832086845282529182902080548517905581518581529081018490527f3704902f963766a4e561bbaab6e6cdc1b1dd12f6e9e99648da8843b3f46b918d910160405180910390a25050565b60005b6102f5838361036b565b61030b578161030381610d04565b9250506102eb565b50805b92915050565b600061032483836040013561036b565b15610363576001600160a01b038316600090815260016020908152604080832085820135845282529091205461035c91840135610d1d565b905061030e565b50600061030e565b6001600160a01b038216600090815260208181526040808320600885901c808552925282205460ff8416906001821b9081161580156103cb57506001600160a01b0386166000908152600160209081526040808320888452909152902054155b9695505050505050565b6000806040518060a0016040528060648152602001610e5560649139848460405160200161040593929190610d30565b604051602081830303815290604052805190602001209050600061042c876000015161060c565b6020808901516040808b01518151938401879052908301849052336060840152608083019190915260a082015260c0810188905290915060e0016040516020818303038152906040528051906020012092505050949350505050565b60408601516020860135904211156104c457866040015160405163cd21db4f60e01b81526004016104bb91815260200190565b60405180910390fd5b6104dc858860200151838a600001516020015161067d565b6104f26104e8856107bf565b84908490886107ee565b8651516001600160a01b03166323b872dd8661051160208a018a610d6e565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018490526064016020604051808303816000875af1158015610565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a39190610d90565b600080610599836000015161060c565b60208085015160408087015181517f939c21a48a8dbe3a9a2404a1d46691e4d39f6583d6ec6b35714604c986d8010694810194909452908301849052336060840152608083019190915260a082015290915060c00160405160208183030381529060405280519060200120915050919050565b60007f618358ac3db8dc274f0cd8829da7e234bd48cd73c4a740aede1adec9846d06a18260405160200161066092919091825280516001600160a01b03166020808401919091520151604082015260600190565b604051602081830303815290604052805190602001209050919050565b6001600160a01b038416600090815260208181526040808320600887901c80855292529091205460ff8516906001821b90818116156106cf57604051633ab3447f60e11b815260040160405180910390fd5b6001600160a01b03881660009081526001602090815260408083208a8452909152902054856106fe8883610db2565b111561071d5760405163447f595960e11b815260040160405180910390fd5b856107288883610db2565b1015610761576107388782610db2565b6001600160a01b038a1660009081526001602090815260408083208c84529091529020556107b4565b801561078c576001600160a01b03891660009081526001602090815260408083208b84529091528120555b6001600160a01b03891660009081526020818152604080832088845290915290208054841790555b505050505050505050565b60006107c96101c3565b60405161190160f01b6020820152602281019190915260428101839052606201610660565b6000806000836001600160a01b03163b60000361095b5760418690036108435761081a86880188610c63565b90935091508686604081811061083257610832610dc5565b919091013560f81c915061089b9050565b604086900361088257600061085a87890189610c63565b9094506001600160ff1b0381169350905061087a60ff82901c601b610ddb565b91505061089b565b604051634be6321b60e01b815260040160405180910390fd5b6040805160008082526020820180845288905260ff841692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156108ef573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661092357604051638baa579f60e01b815260040160405180910390fd5b846001600160a01b0316816001600160a01b03161461095557604051632057875960e21b815260040160405180910390fd5b50610a02565b604051630b135d3f60e11b81526000906001600160a01b03861690631626ba7e9061098e9089908c908c90600401610df4565b602060405180830381865afa1580156109ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cf9190610e2a565b90506001600160e01b03198116630b135d3f60e11b146101a357604051632c19a72f60e21b815260040160405180910390fd5b50505050505050565b80356001600160a01b0381168114610a2257600080fd5b919050565b60008183036080811215610a3a57600080fd5b6040516060810167ffffffffffffffff8282108183111715610a6c57634e487b7160e01b600052604160045260246000fd5b8294506040841215610a7d57600080fd5b60a0830193508184108185111715610aa557634e487b7160e01b600052604160045260246000fd5b5082604052610ab385610a0b565b815260208501356080830152808252506040840135602082015260608401356040820152505092915050565b60006040828403121561030b57600080fd5b60008083601f840112610b0357600080fd5b50813567ffffffffffffffff811115610b1b57600080fd5b602083019150836020828501011115610b3357600080fd5b9250929050565b600080600080600080600080610140898b031215610b5757600080fd5b610b618a8a610a27565b9750610b708a60808b01610adf565b9650610b7e60c08a01610a0b565b955060e0890135945061010089013567ffffffffffffffff80821115610ba357600080fd5b610baf8c838d01610af1565b90965094506101208b0135915080821115610bc957600080fd5b50610bd68b828c01610af1565b999c989b5096995094979396929594505050565b60008060008060006101008688031215610c0357600080fd5b610c0d8787610a27565b9450610c1c8760808801610adf565b9350610c2a60c08701610a0b565b925060e086013567ffffffffffffffff811115610c4657600080fd5b610c5288828901610af1565b969995985093965092949392505050565b60008060408385031215610c7657600080fd5b50508035926020909101359150565b60008060408385031215610c9857600080fd5b610ca183610a0b565b946020939093013593505050565b60008082840360a0811215610cc357600080fd5b610ccc84610a0b565b92506080601f1982011215610ce057600080fd5b506020830190509250929050565b634e487b7160e01b600052601160045260246000fd5b600060018201610d1657610d16610cee565b5060010190565b8181038181111561030e5761030e610cee565b6000845160005b81811015610d515760208188018101518583015201610d37565b506000908301908152838582376000930192835250909392505050565b600060208284031215610d8057600080fd5b610d8982610a0b565b9392505050565b600060208284031215610da257600080fd5b81518015158114610d8957600080fd5b8082018082111561030e5761030e610cee565b634e487b7160e01b600052603260045260246000fd5b60ff818116838216019081111561030e5761030e610cee565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600060208284031215610e3c57600080fd5b81516001600160e01b031981168114610d8957600080fdfe5065726d69745769746e6573735472616e7366657246726f6d28546f6b656e5065726d697373696f6e73207065726d69747465642c61646472657373207370656e6465722c75696e74323536206e6f6e63652c75696e7432353620646561646c696e652ca2646970667358221220c58333beb0020e8f0c3a6162371b6606e528de6f9c4701cf2cc97f7385dd5fb864736f6c63430008190033",
  "devdoc": {
    "errors": {
      "InvalidAmount(uint256)": [
        {
          "params": {
            "maxAmount": "The maximum amount a spender can request to transfer"
          }
        }
      ],
      "LengthMismatch()": [
        {
          "details": "If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred"
        }
      ],
      "SignatureExpired(uint256)": [
        {
          "params": {
            "signatureDeadline": "The timestamp at which a signature is no longer valid"
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "Uses cached version if chainid and address are unchanged from construction."
      },
      "invalidateUnorderedNonces(uint256,uint256)": {
        "details": "The wordPos is maxed at type(uint248).max",
        "params": {
          "mask": "A bitmap masked against msg.sender's current bitmap at the word position",
          "wordPos": "A number to index the nonceBitmap at"
        }
      },
      "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": {
        "details": "Reverts if the requested amount is greater than the permitted signed amount",
        "params": {
          "owner": "The owner of the tokens to transfer",
          "permit": "The permit data signed over by the owner",
          "signature": "The signature to verify",
          "transferDetails": "The spender's requested transfer details for the permitted token"
        }
      },
      "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": {
        "details": "The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definitionReverts if the requested amount is greater than the permitted signed amount",
        "params": {
          "owner": "The owner of the tokens to transfer",
          "permit": "The permit data signed over by the owner",
          "signature": "The signature to verify",
          "transferDetails": "The spender's requested transfer details for the permitted token",
          "witness": "Extra data to include when checking the user signature",
          "witnessTypeString": "The EIP-712 type definition for remaining string stub of the typehash"
        }
      }
    },
    "stateVariables": {
      "nonceBitmap": {
        "details": "Uses unordered nonces so that permit messages do not need to be spent in a certain orderThe mapping is indexed first by the token owner, then by an index specified in the nonceIt returns a uint256 bitmapThe index, or wordPosition is capped at type(uint248).max"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidAmount(uint256)": [
        {
          "notice": "Thrown when the requested amount for a transfer is larger than the permissioned amount"
        }
      ],
      "InvalidContractSignature()": [
        {
          "notice": "Thrown when the recovered contract signature is incorrect"
        }
      ],
      "InvalidNonce()": [
        {
          "notice": "Thrown when validating that the inputted nonce has not been used"
        }
      ],
      "InvalidSignature()": [
        {
          "notice": "Thrown when the recovered signer is equal to the zero address"
        }
      ],
      "InvalidSignatureLength()": [
        {
          "notice": "Thrown when the passed in signature is not a valid length"
        }
      ],
      "InvalidSigner()": [
        {
          "notice": "Thrown when the recovered signer does not equal the claimedSigner"
        }
      ],
      "LengthMismatch()": [
        {
          "notice": "Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred"
        }
      ],
      "SignatureExpired(uint256)": [
        {
          "notice": "Thrown when validating an inputted signature that is stale"
        }
      ]
    },
    "events": {
      "UnorderedNonceInvalidation(address,uint256,uint256)": {
        "notice": "Emits an event when the owner successfully invalidates an unordered nonce."
      }
    },
    "kind": "user",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "notice": "Returns the domain separator for the current chain."
      },
      "findFreeNonce(address,uint256)": {
        "notice": "Find a nonce that looks free given the data on the blockchain. Of course, this method cannot take into account nonces of valid but unused permits."
      },
      "invalidateUnorderedNonces(uint256,uint256)": {
        "notice": "Invalidates the bits specified in mask for the bitmap at the word position"
      },
      "nonceBitmap(address,uint256)": {
        "notice": "A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection"
      },
      "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": {
        "notice": "Transfers a token using a signed permit message"
      },
      "permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": {
        "notice": "Transfers a token using a signed permit messageIncludes extra data provided by the caller to verify signature over"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16304,
        "contract": "src/lib/SignatureTransfer.sol:SignatureTransfer",
        "label": "nonceBitmap",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 16310,
        "contract": "src/lib/SignatureTransfer.sol:SignatureTransfer",
        "label": "partialFills",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}