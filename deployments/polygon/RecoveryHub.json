{
  "address": "0xaea2886cb865bab01fc43f3c3f51b27b720ae185",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "Address_NotTransferNorContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "RecoveryHub_AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralType",
          "type": "address"
        }
      ],
      "name": "RecoveryHub_BadCollateral",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "RecoveryHub_ClaimNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimPeriodEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentTimestamp",
          "type": "uint256"
        }
      ],
      "name": "RecoveryHub_InClaimPeriod",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RecoveryHub_InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "RecoveryHub_NothingToRecover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "RecoveryHub_RecoveryDisabled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "ClaimCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "ClaimDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "ClaimMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "ClaimResolved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRecoverable",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claims",
      "outputs": [
        {
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "currencyUsed",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "clearClaimFromToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "clearClaimFromUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "collateralType",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "declareLost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "deleteClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "getClaimant",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "getCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "getCollateralType",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "getTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "isRecoverable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRecoverable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lostAddress",
          "type": "address"
        }
      ],
      "name": "recover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "recoveryDisabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setRecoverable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd7e57370459a55021f15f08b1b56cbd5856c41327569c244b44dc999c402c3a2",
  "receipt": {
    "to": null,
    "from": "0x447ffd9a116efb3d77f47802cc4869c3730f723c",
    "contractAddress": "0xaea2886cb865bab01fc43f3c3f51b27b720ae185",
    "transactionIndex": "0x2a",
    "gasUsed": "0xe2cdc",
    "logsBloom": "0x
    "blockHash": "0xd02b2e0974746a0b09f5a41323811ea77f57d70c31fad3f8b30333990ee27a76",
    "transactionHash": "0xdaaaa8bdd519ab4b16ad47f6afa57fad44d1de14280c5e65a8022abca075fac9",
    "logs": [
      {
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000447ffd9a116efb3d77f47802cc4869c3730f723c",
          "0x000000000000000000000000ef46d5fe753c988606e6f703260d816af53b03eb"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001248ddaef5350ac0000000000000000000000000000000000000000000000001a6a4ff06a7c31c900000000000000000000000000000000000000000000038c6fa511c31d77cf3a0000000000000000000000000000000000000000000000001945c2157b28e11d00000000000000000000000000000000000000000000038c70c99f9e0ccb1fe6",
        "blockNumber": "0x354d8fa",
        "transactionHash": "0xdaaaa8bdd519ab4b16ad47f6afa57fad44d1de14280c5e65a8022abca075fac9",
        "transactionIndex": "0x2a",
        "blockHash": "0xd02b2e0974746a0b09f5a41323811ea77f57d70c31fad3f8b30333990ee27a76",
        "logIndex": "0xda",
        "removed": false
      }
    ],
    "blockNumber": "0x354d8fa",
    "cumulativeGasUsed": "0x61eaf8",
    "status": "0x1"
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "83214f1fbffc5658be3cb2753dec8430",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Address_NotTransferNorContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"RecoveryHub_AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralType\",\"type\":\"address\"}],\"name\":\"RecoveryHub_BadCollateral\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"RecoveryHub_ClaimNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimPeriodEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"}],\"name\":\"RecoveryHub_InClaimPeriod\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RecoveryHub_InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"RecoveryHub_NothingToRecover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"RecoveryHub_RecoveryDisabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"ClaimCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"ClaimDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ClaimMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"ClaimResolved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IRecoverable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currencyUsed\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"clearClaimFromToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"clearClaimFromUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralType\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"declareLost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"deleteClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"getClaimant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"getCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"getCollateralType\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"getTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isRecoverable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRecoverable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lostAddress\",\"type\":\"address\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recoveryDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setRecoverable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"Address_NotTransferNorContract(address)\":[{\"params\":{\"target\":\"Target address to call the function on.\"}}],\"RecoveryHub_AlreadyClaimed(address,address)\":[{\"params\":{\"lostAddress\":\"The lost address.\",\"token\":\"The token address.\"}}],\"RecoveryHub_BadCollateral(address)\":[{\"params\":{\"collateralType\":\"The address of collateral type token\"}}],\"RecoveryHub_ClaimNotFound(address)\":[{\"params\":{\"lostAddress\":\"The checked address \"}}],\"RecoveryHub_InClaimPeriod(uint256,uint256)\":[{\"params\":{\"claimPeriodEnd\":\"The timestamp when the period ends\",\"currentTimestamp\":\"The block timestamp of the call\"}}],\"RecoveryHub_InvalidSender(address)\":[{\"params\":{\"sender\":\"The msg.sender of the call\"}}],\"RecoveryHub_NothingToRecover(address,address)\":[{\"params\":{\"lostAddress\":\"The lost address.\",\"token\":\"The token address which is checked for recovery.\"}}],\"RecoveryHub_RecoveryDisabled(address)\":[{\"params\":{\"lostAddress\":\"The address for which the recovery is disabled.\"}}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"RecoveryHub_AlreadyClaimed(address,address)\":[{\"notice\":\"The was already a claim for this token and address.\"}],\"RecoveryHub_BadCollateral(address)\":[{\"notice\":\"No valid collateral type\"}],\"RecoveryHub_ClaimNotFound(address)\":[{\"notice\":\"No claim for this address exists\"}],\"RecoveryHub_InClaimPeriod(uint256,uint256)\":[{\"notice\":\"Recover can only be called after the claim period\"}],\"RecoveryHub_InvalidSender(address)\":[{\"notice\":\"Sender has to be claimant\"}],\"RecoveryHub_NothingToRecover(address,address)\":[{\"notice\":\"No token to able to recover on the lost address\"}],\"RecoveryHub_RecoveryDisabled(address)\":[{\"notice\":\"Recovery can be disabled per address.\"}]},\"kind\":\"user\",\"methods\":{\"clearClaimFromToken(address)\":{\"notice\":\"Clears a claim after the key has been found again and assigns the collateral to the \\\"lost\\\" address. This is the price an adverse claimer pays for filing a false claim and makes it risky to do so.\"},\"declareLost(address,address,address)\":{\"notice\":\"Anyone can declare that the private key to a certain address was lost by calling declareLost providing a deposit/collateral. There are three possibilities of what can happen with the claim: 1) The claim period expires and the claimant can get the deposit and the shares back by calling recover 2) The \\\"lost\\\" private key is used at any time to call clearClaim. In that case, the claim is deleted and    the deposit sent to the shareholder (the owner of the private key). It is recommended to call recover    whenever someone transfers funds to let claims be resolved automatically when the \\\"lost\\\" private key is    used again. 3) The owner deletes the claim and assigns the deposit to the claimant. This is intended to be used to resolve    disputes. Generally, using this function implies that you have to trust the issuer of the tokens to handle    the situation well. As a rule of thumb, the contract owner should assume the owner of the lost address to be the    rightful owner of the deposit. It is highly recommended that the owner observes the claims made and informs the owners of the claimed addresses whenever a claim is made for their address (this of course is only possible if they are known to the owner, e.g. through a shareholder register).\"},\"deleteClaim(address)\":{\"notice\":\"The token contract can delete claims. It is the responsibility of the token contract to make sure only authorized parties can trigger such a call.\"},\"isRecoverable(address)\":{\"notice\":\"Some users might want to disable claims for their address completely. For example if they use a deep cold storage solution or paper wallet.\"},\"recover(address,address)\":{\"notice\":\"After the claim period has passed, the claimant can call this function to send the tokens on the lost address as well as the collateral to himself.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/recovery/RecoveryHub.sol\":\"RecoveryHub\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/ERC20/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0x2224189bcdeb28cbadfdb8d126c278df60ec39875c7929e7ffa9e2055cded960\",\"license\":\"MIT\"},\"src/ERC20/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit is IERC20 {\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n\\t//////////////////////////////////////////////////////////////*/\\n    /// Block timestamp must to be before deadline.\\n    /// @param deadline The deadline of the permit.\\n    /// @param blockTimestamp The timestamp of the execution block.\\n    error Permit_DeadlineExpired(uint256 deadline, uint256 blockTimestamp);\\n    /// Recovered address must be owner and not zero address.\\n    /// @param signerAddress The recovered signer address.\\n    error Permit_InvalidSigner(address signerAddress);\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\",\"keccak256\":\"0x9c6c4c49deffc8176f13b34150dd580526b45dd85ce1b71fe2ed340ff0489ebd\",\"license\":\"MIT\"},\"src/recovery/IRecoverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"./IRecoveryHub.sol\\\";\\n\\ninterface IRecoverable is IERC20{\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n    //////////////////////////////////////////////////////////////*/\\n    /// The new custom claim collateral rate has to be always > 0. \\n    error Recoverable_RateZero();\\n\\n    // returns the recovery hub\\n    function recovery() external view returns (IRecoveryHub);\\n\\n    function claimPeriod() external view returns (uint256);\\n    \\n    function notifyClaimMade(address target) external;\\n\\n    function notifyClaimDeleted(address target) external;\\n\\n    function getCollateralRate(IERC20 collateral) external view returns(uint256);\\n\\n    function recover(address oldAddress, address newAddress) external;\\n\\n}\",\"keccak256\":\"0xaf83855010ac370e8651b36c899efb59ce895d77bfd9429cd4d9db1c4d32e0bf\",\"license\":\"MIT\"},\"src/recovery/IRecoveryHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IRecoverable.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\ninterface IRecoveryHub {\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            Custom errors\\n    //////////////////////////////////////////////////////////////*/\\n    /// Recovery can be disabled per address.\\n    /// @param lostAddress The address for which the recovery is disabled.\\n    error RecoveryHub_RecoveryDisabled(address lostAddress);\\n    /// No valid collateral type\\n    /// @param collateralType The address of collateral type token\\n    error RecoveryHub_BadCollateral(IERC20 collateralType);\\n    /// No token to able to recover on the lost address\\n    /// @param token The token address which is checked for recovery.\\n    /// @param lostAddress The lost address.\\n    error RecoveryHub_NothingToRecover(IERC20 token, address lostAddress);\\n    /// The was already a claim for this token and address.\\n    /// @param token The token address.\\n    /// @param lostAddress The lost address.\\n    error RecoveryHub_AlreadyClaimed(IERC20 token, address lostAddress);\\n    /// Sender has to be claimant\\n    /// @param sender The msg.sender of the call\\n    error RecoveryHub_InvalidSender(address sender);\\n    /// No claim for this address exists\\n    /// @param lostAddress The checked address \\n    error RecoveryHub_ClaimNotFound(address lostAddress);\\n    /// Recover can only be called after the claim period\\n    /// @param claimPeriodEnd The timestamp when the period ends\\n    /// @param currentTimestamp The block timestamp of the call\\n    error RecoveryHub_InClaimPeriod(uint256 claimPeriodEnd, uint256 currentTimestamp);\\n\\n    function setRecoverable(bool flag) external;\\n    \\n    // deletes claim and transfers collateral back to claimer\\n    function deleteClaim(address target) external;\\n\\n    // clears claim and transfers collateral to holder\\n    function clearClaimFromToken(address holder) external;\\n\\n    function clearClaimFromUser(IRecoverable token) external;\\n\\n}\",\"keccak256\":\"0x26c74df59e64d9426903db28442f955e778f90bb737e7e5076d3ef42e2859624\",\"license\":\"MIT\"},\"src/recovery/RecoveryHub.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2022 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IRecoveryHub.sol\\\";\\nimport \\\"./IRecoverable.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\n\\ncontract RecoveryHub is IRecoveryHub {\\n\\n    using SafeERC20 for IERC20;\\n\\n    // A struct that represents a claim made\\n    struct Claim {\\n        address claimant; // the person who created the claim\\n        uint256 collateral; // the amount of collateral deposited\\n        uint256 timestamp;  // the timestamp of the block in which the claim was made\\n        IERC20 currencyUsed; // The currency (XCHF) can be updated, we record the currency used for every request\\n    }\\n\\n    mapping(IRecoverable => mapping (address => Claim)) public claims; // there can be at most one claim per token and claimed address\\n    mapping(address => bool) public recoveryDisabled; // disable claimability (e.g. for long term storage)\\n\\n    event ClaimMade(IRecoverable indexed token, address indexed lostAddress, address indexed claimant, uint256 balance);\\n    event ClaimCleared(IRecoverable indexed token, address indexed lostAddress, uint256 collateral);\\n    event ClaimDeleted(IRecoverable indexed token, address indexed lostAddress, address indexed claimant, uint256 collateral);\\n    event ClaimResolved(IRecoverable indexed token, address indexed lostAddress, address indexed claimant, uint256 collateral);\\n\\n    function setRecoverable(bool enabled) external override {\\n        recoveryDisabled[msg.sender] = !enabled;\\n    }\\n\\n    /**\\n     * Some users might want to disable claims for their address completely.\\n     * For example if they use a deep cold storage solution or paper wallet.\\n     */\\n    function isRecoverable(address target) public view returns (bool) {\\n        return !recoveryDisabled[target];\\n    }\\n\\n  /** Anyone can declare that the private key to a certain address was lost by calling declareLost\\n    * providing a deposit/collateral. There are three possibilities of what can happen with the claim:\\n    * 1) The claim period expires and the claimant can get the deposit and the shares back by calling recover\\n    * 2) The \\\"lost\\\" private key is used at any time to call clearClaim. In that case, the claim is deleted and\\n    *    the deposit sent to the shareholder (the owner of the private key). It is recommended to call recover\\n    *    whenever someone transfers funds to let claims be resolved automatically when the \\\"lost\\\" private key is\\n    *    used again.\\n    * 3) The owner deletes the claim and assigns the deposit to the claimant. This is intended to be used to resolve\\n    *    disputes. Generally, using this function implies that you have to trust the issuer of the tokens to handle\\n    *    the situation well. As a rule of thumb, the contract owner should assume the owner of the lost address to be the\\n    *    rightful owner of the deposit.\\n    * It is highly recommended that the owner observes the claims made and informs the owners of the claimed addresses\\n    * whenever a claim is made for their address (this of course is only possible if they are known to the owner, e.g.\\n    * through a shareholder register).\\n    */\\n    function declareLost(IRecoverable token, IERC20 collateralType, address lostAddress) external {\\n        if(recoveryDisabled[lostAddress]) {\\n            revert RecoveryHub_RecoveryDisabled(lostAddress);\\n        }\\n        uint256 collateralRate = IRecoverable(token).getCollateralRate(collateralType);\\n        if (collateralRate == 0) {\\n            // if the there is no rate the collateral isn't accepted\\n            revert RecoveryHub_BadCollateral(collateralType);\\n        }\\n        uint256 balance = IERC20(token).balanceOf(lostAddress);\\n        if (balance == 0) {\\n            // if lost address has no balance, there also nothing to recover\\n            revert RecoveryHub_NothingToRecover(token, lostAddress);\\n        }\\n        uint256 collateral = balance * collateralRate;\\n        IERC20 currency = IERC20(collateralType);\\n        if (claims[token][lostAddress].collateral > 0) {\\n            revert RecoveryHub_AlreadyClaimed(token, lostAddress);\\n        }\\n\\n        claims[token][lostAddress] = Claim({\\n            claimant: msg.sender,\\n            collateral: collateral,\\n            // rely on time stamp is ok, no exact time stamp needed\\n            // solhint-disable-next-line not-rely-on-time\\n            timestamp: block.timestamp,\\n            currencyUsed: collateralType\\n        });\\n        emit ClaimMade(token, lostAddress, msg.sender, balance);\\n        // errors like no allowance/no balance revert generally in the transferFrom\\n        currency.safeTransferFrom(msg.sender, address(this), collateral);\\n        IRecoverable(token).notifyClaimMade(lostAddress);\\n    }\\n\\n    function getClaimant(IRecoverable token, address lostAddress) external view returns (address) {\\n        return claims[token][lostAddress].claimant;\\n    }\\n\\n    function getCollateral(IRecoverable token, address lostAddress) external view returns (uint256) {\\n        return claims[token][lostAddress].collateral;\\n    }\\n\\n    function getCollateralType(IRecoverable token, address lostAddress) external view returns (IERC20) {\\n        return claims[token][lostAddress].currencyUsed;\\n    }\\n\\n    function getTimeStamp(IRecoverable token, address lostAddress) external view returns (uint256) {\\n        return claims[token][lostAddress].timestamp;\\n    }\\n\\n    /**\\n     * Clears a claim after the key has been found again and assigns the collateral to the \\\"lost\\\" address.\\n     * This is the price an adverse claimer pays for filing a false claim and makes it risky to do so.\\n     */\\n    function clearClaimFromToken(address holder) external override {\\n        clearClaim(IRecoverable(msg.sender), holder);\\n    }\\n\\n    function clearClaimFromUser(IRecoverable token) external override {\\n        clearClaim(token, msg.sender);\\n    }\\n\\n    function clearClaim(IRecoverable token, address holder) private {\\n        Claim memory claim = claims[token][holder];\\n        if (claim.collateral > 0){\\n            IERC20 currency = IERC20(claim.currencyUsed);\\n            delete claims[token][holder];\\n            currency.safeTransfer(holder, claim.collateral);\\n            emit ClaimCleared(token, holder, claim.collateral);\\n        }\\n        IRecoverable(token).notifyClaimDeleted(holder);\\n    }\\n\\n   /**\\n    * After the claim period has passed, the claimant can call this function to send the\\n    * tokens on the lost address as well as the collateral to himself.\\n    */\\n    function recover(IRecoverable token, address lostAddress) external {\\n        Claim memory claim = claims[token][lostAddress];\\n        uint256 collateral = claim.collateral;\\n        if (collateral == 0) {\\n            revert RecoveryHub_ClaimNotFound(lostAddress);\\n        }\\n        address claimant = claim.claimant;\\n        if (claimant != msg.sender) {\\n            revert RecoveryHub_InvalidSender(msg.sender);\\n        }\\n        // rely on time stamp is ok, no exact time stamp needed\\n        // solhint-disable-next-line not-rely-on-time\\n        uint256 claimPeriodEnd = claim.timestamp + IRecoverable(token).claimPeriod();\\n        if (claimPeriodEnd > block.timestamp) {\\n            revert RecoveryHub_InClaimPeriod(claimPeriodEnd, block.timestamp);\\n        }\\n        delete claims[token][lostAddress];\\n        emit ClaimResolved(token, lostAddress, claimant, collateral);\\n        IRecoverable(token).notifyClaimDeleted(lostAddress);\\n        IERC20 currency = IERC20(claim.currencyUsed);\\n        currency.safeTransfer(claimant, collateral);\\n        IRecoverable(token).recover(lostAddress, claimant);\\n    }\\n\\n    /**\\n     * The token contract can delete claims. It is the responsibility of the token contract to make sure\\n     * only authorized parties can trigger such a call.\\n     */\\n    function deleteClaim(address lostAddress) external override {\\n        IRecoverable token = IRecoverable(msg.sender);\\n        Claim memory claim = claims[token][lostAddress];\\n        IERC20 currency = IERC20(claim.currencyUsed);\\n        if (claim.collateral == 0) {\\n            revert RecoveryHub_ClaimNotFound(lostAddress);\\n        }\\n        delete claims[token][lostAddress];\\n        emit ClaimDeleted(token, lostAddress, claim.claimant, claim.collateral);\\n        IRecoverable(token).notifyClaimDeleted(lostAddress);\\n        currency.safeTransfer(claim.claimant, claim.collateral);\\n    }\\n\\n}\",\"keccak256\":\"0x41ac60e2522c14a9bb1b40989bc1dc1e1e08d57b6287f4ae4848aaacb841023f\",\"license\":\"LicenseRef-Aktionariat\"},\"src/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\n// and modified it.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Address {\\n\\n    /// @param target Target address to call the function on.\\n    error Address_NotTransferNorContract(address target);\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n        return account.code.length > 0;\\n    }\\n    \\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 weiValue) internal returns (bytes memory) {\\n        if (data.length != 0 && !isContract(target)) {\\n            revert Address_NotTransferNorContract(target);\\n        }\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else if (returndata.length > 0) {\\n            assembly{\\n                revert (add (returndata, 0x20), mload (returndata))\\n            }\\n        } else {\\n           revert(\\\"failed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xb95d45875550203c1afb7dfc9c99ce62c77496c36e96f3adfaad2d42cb3380a2\",\"license\":\"MIT\"},\"src/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// coppied and adjusted from OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../ERC20/IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../ERC20/IERC20Permit.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        if (nonceAfter != nonceBefore + 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\",\"keccak256\":\"0xa162e550fe203915126fddc231c55d28dd3f16d39be22dd48c5fc7f5ccd6fd93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806352226ef01161008c578063b40e80d111610066578063b40e80d114610263578063c1e5857314610286578063cc0720cc14610299578063e334860a146102e757600080fd5b806352226ef0146101e95780636427ed9714610223578063648bf7741461025057600080fd5b806306036025146100d457806323cd9a86146100e95780632851bbc91461010f57806332a7ae951461014c5780633f733c6b1461015f5780634d301a30146101d6575b600080fd5b6100e76100e2366004610e2f565b610320565b005b6100fc6100f7366004610e4c565b61032d565b6040519081526020015b60405180910390f35b61013c61011d366004610e2f565b6001600160a01b031660009081526001602052604090205460ff161590565b6040519015158152602001610106565b6100e761015a366004610e2f565b61035b565b6101a761016d366004610e4c565b600060208181529281526040808220909352908152208054600182015460028301546003909301546001600160a01b039283169391921684565b604080516001600160a01b03958616815260208101949094528301919091529091166060820152608001610106565b6100e76101e4366004610e2f565b6104eb565b6100fc6101f7366004610e4c565b6001600160a01b0391821660009081526020818152604080832093909416825291909152206001015490565b6100e7610231366004610e93565b336000908152600160205260409020805460ff19169115919091179055565b6100e761025e366004610e4c565b6104f5565b61013c610271366004610e2f565b60016020526000908152604090205460ff1681565b6100e7610294366004610eb0565b6107a9565b6102cf6102a7366004610e4c565b6001600160a01b03918216600090815260208181526040808320938516835292905220541690565b6040516001600160a01b039091168152602001610106565b6102cf6102f5366004610e4c565b6001600160a01b03918216600090815260208181526040808320938516835292905220600301541690565b61032a8133610a9c565b50565b6001600160a01b03808316600090815260208181526040808320938516835292905220600201545b92915050565b336000818152602081815260408083206001600160a01b038681168552908352818420825160808101845281548316815260018201549481018590526002820154938101939093526003015416606082018190529092909190036103e25760405163bca13b6b60e01b81526001600160a01b03851660048201526024015b60405180910390fd5b6001600160a01b0383811660008181526020818152604080832089861680855290835281842080546001600160a01b0319908116825560018201869055600282019590955560030180549094169093558651878301519151918252909416939192917fe353e089146c0574fa0001d9aa56c67a4eee067d8730543ae0ee937a30d679f3910160405180910390a460405163396e093b60e21b81526001600160a01b03858116600483015284169063e5b824ec90602401600060405180830381600087803b1580156104b257600080fd5b505af11580156104c6573d6000803e3d6000fd5b5050835160208501516104e593506001600160a01b0385169250610c0e565b50505050565b61032a3382610a9c565b6001600160a01b038083166000908152602081815260408083208585168452825280832081516080810183528154861681526001820154938101849052600282015492810192909252600301549093166060840152908190036105765760405163bca13b6b60e01b81526001600160a01b03841660048201526024016103d9565b81516001600160a01b03811633146105a35760405163a755367960e01b81523360048201526024016103d9565b6000856001600160a01b0316637dc2cd986040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106079190610efb565b84604001516106169190610f2a565b9050428111156106425760405163065d672f60e41b8152600481018290524260248201526044016103d9565b6001600160a01b038681166000818152602081815260408083208a861680855290835281842080546001600160a01b03199081168255600182018690556002820195909555600301805490941690935551878152938616939192917f03746d4086c981172ed0a960601bec02cfe0a2ecbe1b1b4e328752bbf5d0c255910160405180910390a460405163396e093b60e21b81526001600160a01b03868116600483015287169063e5b824ec90602401600060405180830381600087803b15801561070b57600080fd5b505af115801561071f573d6000803e3d6000fd5b50505050606084015161073c6001600160a01b0382168486610c0e565b604051631922fddd60e21b81526001600160a01b038781166004830152848116602483015288169063648bf774906044015b600060405180830381600087803b15801561078857600080fd5b505af115801561079c573d6000803e3d6000fd5b5050505050505050505050565b6001600160a01b03811660009081526001602052604090205460ff16156107f15760405160016234012160e11b031981526001600160a01b03821660048201526024016103d9565b6040516377e071ad60e01b81526001600160a01b038381166004830152600091908516906377e071ad90602401602060405180830381865afa15801561083b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085f9190610efb565b90508060000361088d5760405163df8c6ee360e01b81526001600160a01b03841660048201526024016103d9565b6040516370a0823160e01b81526001600160a01b038381166004830152600091908616906370a0823190602401602060405180830381865afa1580156108d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fb9190610efb565b90508060000361093157604051630b31b77b60e01b81526001600160a01b038087166004830152841660248201526044016103d9565b600061093d8383610f3d565b6001600160a01b038088166000908152602081815260408083209389168352929052206001015490915085901561099a57604051636dee9c8560e01b81526001600160a01b038089166004830152861660248201526044016103d9565b60408051608081018252338082526020808301868152428486019081526001600160a01b038c8116606087019081528e821660008181528087528981208f85168083529752899020975188549084166001600160a01b03199182161789559451600189015592516002880155516003909601805496909116959092169490941790559251909291907f6bfd50306449d9d6c51593433950fc186e4ab99a885ed357a34549bfd7a2668f90610a519088815260200190565b60405180910390a4610a6e6001600160a01b038216333085610c72565b6040516330605cb160e21b81526001600160a01b03868116600483015288169063c18172c49060240161076e565b6001600160a01b038083166000908152602081815260408083208585168452825291829020825160808101845281548516815260018201549281018390526002820154938101939093526003015490921660608201529015610bae5760608101516001600160a01b0380851660009081526020818152604080832087851684528252822080546001600160a01b031990811682556001820184905560028201939093556003018054909216909155830151610b5b918316908590610c0e565b826001600160a01b0316846001600160a01b03167febe2b7544a1a711c29034fc19c1b200f13cf4ec175198e0f857735ed4f5f9bd18460200151604051610ba491815260200190565b60405180910390a3505b60405163396e093b60e21b81526001600160a01b03838116600483015284169063e5b824ec90602401600060405180830381600087803b158015610bf157600080fd5b505af1158015610c05573d6000803e3d6000fd5b50505050505050565b6040516001600160a01b03838116602483015260448201839052610c6d91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610cab565b505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526104e59186918216906323b872dd90608401610c3b565b6000610cc06001600160a01b03841683610d0e565b90508051600014158015610ce5575080806020019051810190610ce39190610f54565b155b15610c6d57604051635274afe760e01b81526001600160a01b03841660048201526024016103d9565b6060610d1c83836000610d23565b9392505050565b60608251600014158015610d3f57506001600160a01b0384163b155b15610d6857604051639eb1341360e01b81526001600160a01b03851660048201526024016103d9565b600080856001600160a01b03168486604051610d849190610f71565b60006040518083038185875af1925050503d8060008114610dc1576040519150601f19603f3d011682016040523d82523d6000602084013e610dc6565b606091505b50915091508115610dda579150610d1c9050565b805115610de957805160208201fd5b60405162461bcd60e51b815260206004820152600660248201526519985a5b195960d21b60448201526064016103d9565b6001600160a01b038116811461032a57600080fd5b600060208284031215610e4157600080fd5b8135610d1c81610e1a565b60008060408385031215610e5f57600080fd5b8235610e6a81610e1a565b91506020830135610e7a81610e1a565b809150509250929050565b801515811461032a57600080fd5b600060208284031215610ea557600080fd5b8135610d1c81610e85565b600080600060608486031215610ec557600080fd5b8335610ed081610e1a565b92506020840135610ee081610e1a565b91506040840135610ef081610e1a565b809150509250925092565b600060208284031215610f0d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561035557610355610f14565b808202811582820484141761035557610355610f14565b600060208284031215610f6657600080fd5b8151610d1c81610e85565b6000825160005b81811015610f925760208186018101518583015201610f78565b50600092019182525091905056fea26469706673582212201e5663ae574cd2b9f29c7f45f02f888b5e5359181ee0275ee0db63fe25f5516664736f6c63430008190033",
  "devdoc": {
    "errors": {
      "Address_NotTransferNorContract(address)": [
        {
          "params": {
            "target": "Target address to call the function on."
          }
        }
      ],
      "RecoveryHub_AlreadyClaimed(address,address)": [
        {
          "params": {
            "lostAddress": "The lost address.",
            "token": "The token address."
          }
        }
      ],
      "RecoveryHub_BadCollateral(address)": [
        {
          "params": {
            "collateralType": "The address of collateral type token"
          }
        }
      ],
      "RecoveryHub_ClaimNotFound(address)": [
        {
          "params": {
            "lostAddress": "The checked address "
          }
        }
      ],
      "RecoveryHub_InClaimPeriod(uint256,uint256)": [
        {
          "params": {
            "claimPeriodEnd": "The timestamp when the period ends",
            "currentTimestamp": "The block timestamp of the call"
          }
        }
      ],
      "RecoveryHub_InvalidSender(address)": [
        {
          "params": {
            "sender": "The msg.sender of the call"
          }
        }
      ],
      "RecoveryHub_NothingToRecover(address,address)": [
        {
          "params": {
            "lostAddress": "The lost address.",
            "token": "The token address which is checked for recovery."
          }
        }
      ],
      "RecoveryHub_RecoveryDisabled(address)": [
        {
          "params": {
            "lostAddress": "The address for which the recovery is disabled."
          }
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "errors": {
      "RecoveryHub_AlreadyClaimed(address,address)": [
        {
          "notice": "The was already a claim for this token and address."
        }
      ],
      "RecoveryHub_BadCollateral(address)": [
        {
          "notice": "No valid collateral type"
        }
      ],
      "RecoveryHub_ClaimNotFound(address)": [
        {
          "notice": "No claim for this address exists"
        }
      ],
      "RecoveryHub_InClaimPeriod(uint256,uint256)": [
        {
          "notice": "Recover can only be called after the claim period"
        }
      ],
      "RecoveryHub_InvalidSender(address)": [
        {
          "notice": "Sender has to be claimant"
        }
      ],
      "RecoveryHub_NothingToRecover(address,address)": [
        {
          "notice": "No token to able to recover on the lost address"
        }
      ],
      "RecoveryHub_RecoveryDisabled(address)": [
        {
          "notice": "Recovery can be disabled per address."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "clearClaimFromToken(address)": {
        "notice": "Clears a claim after the key has been found again and assigns the collateral to the \"lost\" address. This is the price an adverse claimer pays for filing a false claim and makes it risky to do so."
      },
      "declareLost(address,address,address)": {
        "notice": "Anyone can declare that the private key to a certain address was lost by calling declareLost providing a deposit/collateral. There are three possibilities of what can happen with the claim: 1) The claim period expires and the claimant can get the deposit and the shares back by calling recover 2) The \"lost\" private key is used at any time to call clearClaim. In that case, the claim is deleted and    the deposit sent to the shareholder (the owner of the private key). It is recommended to call recover    whenever someone transfers funds to let claims be resolved automatically when the \"lost\" private key is    used again. 3) The owner deletes the claim and assigns the deposit to the claimant. This is intended to be used to resolve    disputes. Generally, using this function implies that you have to trust the issuer of the tokens to handle    the situation well. As a rule of thumb, the contract owner should assume the owner of the lost address to be the    rightful owner of the deposit. It is highly recommended that the owner observes the claims made and informs the owners of the claimed addresses whenever a claim is made for their address (this of course is only possible if they are known to the owner, e.g. through a shareholder register)."
      },
      "deleteClaim(address)": {
        "notice": "The token contract can delete claims. It is the responsibility of the token contract to make sure only authorized parties can trigger such a call."
      },
      "isRecoverable(address)": {
        "notice": "Some users might want to disable claims for their address completely. For example if they use a deep cold storage solution or paper wallet."
      },
      "recover(address,address)": {
        "notice": "After the claim period has passed, the claimant can call this function to send the tokens on the lost address as well as the collateral to himself."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10537,
        "contract": "src/recovery/RecoveryHub.sol:RecoveryHub",
        "label": "claims",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_contract(IRecoverable)10437,t_mapping(t_address,t_struct(Claim)10529_storage))"
      },
      {
        "astId": 10541,
        "contract": "src/recovery/RecoveryHub.sol:RecoveryHub",
        "label": "recoveryDisabled",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1352": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRecoverable)10437": {
        "encoding": "inplace",
        "label": "contract IRecoverable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Claim)10529_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RecoveryHub.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)10529_storage"
      },
      "t_mapping(t_contract(IRecoverable)10437,t_mapping(t_address,t_struct(Claim)10529_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IRecoverable)10437",
        "label": "mapping(contract IRecoverable => mapping(address => struct RecoveryHub.Claim))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Claim)10529_storage)"
      },
      "t_struct(Claim)10529_storage": {
        "encoding": "inplace",
        "label": "struct RecoveryHub.Claim",
        "members": [
          {
            "astId": 10521,
            "contract": "src/recovery/RecoveryHub.sol:RecoveryHub",
            "label": "claimant",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10523,
            "contract": "src/recovery/RecoveryHub.sol:RecoveryHub",
            "label": "collateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10525,
            "contract": "src/recovery/RecoveryHub.sol:RecoveryHub",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10528,
            "contract": "src/recovery/RecoveryHub.sol:RecoveryHub",
            "label": "currencyUsed",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)1352"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}